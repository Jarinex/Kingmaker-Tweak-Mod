using CallOfTheWild;
using dnlib.DotNet;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Blueprints.Classes.Experience;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Classes.Spells;
using Kingmaker.Blueprints.Facts;
using Kingmaker.Blueprints.Items.Equipment;
using Kingmaker.Blueprints.Items;
using Kingmaker.Blueprints.Items.Shields;
using Kingmaker.Blueprints.Items.Armors;
using Kingmaker.Blueprints.Items.Weapons;
using Kingmaker.Visual;
using Kingmaker.Visual.Sound;
using Kingmaker.Controllers.Brain.Blueprints;
using Kingmaker.Controllers.Brain.Blueprints.Considerations;
using Kingmaker.Designers.Mechanics.Facts;
using Kingmaker.EntitySystem.Stats;
using Kingmaker.Enums;
using Kingmaker.Localization;
using Kingmaker.ResourceLinks;
using Kingmaker.UnitLogic;
using Kingmaker.UnitLogic.Mechanics.Actions;
using Kingmaker.UnitLogic.Abilities.Blueprints;
using Kingmaker.UnitLogic.ActivatableAbilities;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using Kingmaker.UnitLogic.FactLogic;
using Kingmaker.View;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TinyJson;
using CallOfTheWild.FavoredEnemyMechanics;
using CallOfTheWild.SizeMechanics;
using UnityEngine.UI;
using System.Resources;

namespace TweakMod
{
    class StoryTweaks
    {
        static LibraryScriptableObject library = Main.library;
        static Consideration light_armor_consideration = library.Get<ArmorTypeConsideration>("2ba801c8a6f585749b7fd636e843e6f0");
        static Consideration heavy_armor_consideration = library.Get<ArmorTypeConsideration>("c376d918c01838b48befcb711cc528ff");

        static Consideration ArcaneCasterPriorityConsiderationVordakai = library.Get<TargetClassConsideration>("fddbc4306c4d47640bb7ea482fab7b46");
        static CommandCooldownConsideration swift_action_available = library.Get<CommandCooldownConsideration>("c2b7d2f9a5cb8d04d9e1aa4bf3d3c598");
        static Consideration AOE_ChooseMoreEnemies = library.Get<UnitsAroundConsideration>("b2490b137b8b53a4e950c1d79d1c5c1d");
        static Consideration units_around = library.Get<UnitsThreateningConsideration>("ee3f6b33227c2f847acda914e90f25af");
        static Consideration attacktargetspriority = library.Get<ComplexConsideration>("7a2b25dcc09cd244db261ce0a70cca84");
        static Consideration SupporCasterFocusConsideration = library.Get<TargetClassConsideration>("60bfe8583de6d3f45818c641b459386e");
        static Consideration ChaoticBehavior = library.Get<RandomConsideration>("aad346ba597e8aa45bb4b589d9f9d0ea");
        static Consideration NoBuffDisplacement = library.Get<BuffConsideration>("6d0ad23e4e010bd41bd1dffa5dabf23d");
        static Consideration NoBuffBlur = library.Get<BuffConsideration>("8a629688cbc97c142a5e7a41794c12c4");
        static Consideration AlliesNoBuff_Haste = library.Get<BuffsAroundConsideration>("8d02fafb7d3ed7744bb78cde35285e5d");
        static Consideration AlliesNoBuff_GoodHope = library.Get<BuffsAroundConsideration>("16929ddeb9456404bb6bcb9ce28e7063");
        static Consideration NoBuffSlow = library.Get<BuffConsideration>("5dfd84e3c5099c6409d46968c93b318b");
        static Consideration NoBuffShield = library.Get<BuffConsideration>("905abbae3815c5945a216d80d282ef15");
        static Consideration AlliesNoBuff_Stoneskin = library.Get<BuffsAroundConsideration>("3b380952d267ae3498e93f41657f9450");
        static Consideration TargetSelf = library.Get<TargetSelfConsideration>("83e2dd97b82d769498394c3edf0d260e");
        static Consideration TargetOther = library.Get<TargetSelfConsideration>("f4be6fc6f46b61044a44715f99f1918d");
        static Consideration AoE_AvoidFriends = library.Get<UnitsAroundConsideration>("8e6f34026b34c3d4ba831bb94548904a");
        static Consideration NoBuffHideousLaughter = library.Get<BuffConsideration>("cda52cd9004adb3429956e82734781f7");
        static Consideration IntGreaterThan2 = library.Get<StatConsideration>("9fe91dc89e64fe3488786d98dbe1814d");
        static Consideration NoBuffHurricaneBow = library.Get<BuffConsideration>("55bebe3428e9e6648878a8645c9f0248");
        static Consideration NoBuffBarkskin = library.Get<BuffConsideration>("3330505fd47bc3e4bbaf1bf7a5542dfa");
        static Consideration HealSpellConsideration = library.Get<HealthConsideration>("fc1512ca56ce08e49aa257e32c6365d4");
        static Consideration EnemiesNoDebuff_Prayer = library.Get<BuffsAroundConsideration>("18705e45d8cdea746aa0ef47a40b58e6");
        static Consideration AlliesNoBuff_Prayer = library.Get<BuffsAroundConsideration>("def28ea7f64241844b0a0dbccc1c4348");
        static Consideration AlliesNoBuff_Bless = library.Get<BuffsAroundConsideration>("1ae4bc050c1a0844ca356d9013e3ecb8");
        static Consideration NoBuff_DivineFavor = library.Get<BuffConsideration>("dd92328b39caaab40b48c0a26af16c08");
        static Consideration AlliesNoBuff_Heroism = library.Get<BuffsAroundConsideration>("cc9beda0bfe77424bbd02f6e8007a53b");
        static Consideration NoBuffMageArmor = library.Get<BuffConsideration>("053312e626b5b3d42ba4126d518a9d3a");
        static Consideration ArcaneCasterFocusConsiderationVordakai = library.Get<TargetClassConsideration>("a10afa800940a9143bda381d487fcd5c");
        static Consideration IgnoreControlledConsiderationVordakai = library.Get<ComplexConsideration>("081277d57cd22f946a518bd61707bc7f");
        static Consideration AlliesNoBuff_ResistFire = library.Get<BuffsAroundConsideration>("647d5f83acd33414a9eef9281b032e56");
        static Consideration LongRange = library.Get<DistanceConsideration>("37226cf3dc2948343b92f04b5992653a");
        static Consideration AlliesNoBuff_ProtectionFromFire = library.Get<BuffsAroundConsideration>("49a17f72e9984d44d8c9f905a9aaa1d5");
        static Consideration NoBuffShieldBuff = library.Get<BuffConsideration>("a3ffff7b93017744ea88433311569cec");
        static Consideration NoDisarmBuff = library.Get<BuffConsideration>("48d96793fce780144bf12bcb9a2b62a4");
        static Consideration NoBuffStaggered = library.Get<BuffConsideration>("1089841cc5fba29419540cca51e0919c");
        static Consideration NotUndead = library.Get<FactConsideration>("15d3f3497bda0d042a1cf5fe3b1af942");
        static Consideration NoBuffVampiricTouch = library.Get<BuffConsideration>("49c1e6eb9d095bf4e8b29185d5bf2d95");
        static Consideration AlliesNoBuff_CatsGrace = library.Get<BuffsAroundConsideration>("c351d1cf6693233448931abef192540c");
        static Consideration SwiftAction = library.Get<ComplexConsideration>("f335c9d35bc608648af2ca45ef2e096c");
        static Consideration StandardActionOffCooldown = library.Get<CommandCooldownConsideration>("a82d061edd18ce748a1a7f97e7e6d9d2");
        static Consideration NoBuffHoldMonster = library.Get<BuffConsideration>("e937ffe62a732c04c9bff79276e4de05");
        static Consideration NoBuffCrushingDespair = library.Get<BuffConsideration>("755cb11326d32854d958c7c001712d95");
        static Consideration TouchInMeleeConsideration = library.Get<InRangeConsideration>("9928ebc923fca0744ba6ef1947d5e027");
        static Consideration NoBuffReducePerson = library.Get<BuffConsideration>("f92e863a3106a6f4b8cd7088df916725");
        static Consideration NoBuffsickened = library.Get<BuffConsideration>("96c6d0223d81012499b14fd16645f5c8");
        static Consideration NoBuffSunder = library.Get<BuffConsideration>("b11013b50f1c48a41af0ebe377601089");
        static Consideration AlliesNoBuff_OwlsWisdom = library.Get<BuffsAroundConsideration>("0914ece191a2cde44a319df8ed5a7e33");
        static Consideration NoBuffBullStrength = library.Get<BuffConsideration>("8196fc3abebf54749b0e9fce09a63b97");
        static Consideration AlliesNoBuff_EnlargePerson = library.Get<BuffsAroundConsideration>("b72a7de89582d4d48ab8eda367b2e282");
        static Consideration NoBuffMirrorImage = library.Get<BuffConsideration>("db074912aa8072c469b527f6c111e82c");
        static Consideration NoBuffBalefulPolymorph = library.Get<BuffConsideration>("881bcb09ccf53074d88c5dec9f2fcaa9");
        static Consideration InjuryAround = library.Get<HealthAroundConsideration>("2a2cfff1d585f3142aadaafe0c1a74e6");
        static Consideration NoBuffShieldofFaith = library.Get<BuffConsideration>("14698bcd142fb924bbb912d57c3fe712");
        static Consideration NoBuffInvisibilityGreater = library.Get<BuffConsideration>("2fc05579e43f56146a1cdaaa82e5119c");
        static Consideration AlliesNoBuff_Aid = library.Get<BuffsAroundConsideration>("d0abaad453732d040a035eb85f9d96af");
        static Consideration NoBuffShaken = library.Get<BuffConsideration>("e2ec459247a67e444a89da48e3f02005");
        static Consideration NoBuffFrightened = library.Get<BuffConsideration>("79e318942b12b8443b30e05e7f9198ce");
        static Consideration NoCaster = library.Get<FactConsideration>("22d91eb7dceec4249810c476ab7d5a56");
        static Consideration NoBuffInsanity = library.Get<BuffConsideration>("07683df074e29a54f803fab3500187ae");
        static Consideration NoBuffConfusion = library.Get<BuffConsideration>("ae9a969accfe096438bbe83e0c05e086");
        static Consideration NoBuffOverwhelmingGrief = library.Get<BuffConsideration>("5299d9a6db21c7e49bb03b314976c806");
        static Consideration AlliesNoBuff_FreedomOfMovement = library.Get<BuffsAroundConsideration>("ce945999d5ae86946922515e330dd256");
        static Consideration AnimalConsideration = library.Get<TargetClassConsideration>("ae38d3f18cc6265478f2df0917f6880c");
        static Consideration DisabledMovementCondition = library.Get<ConditionConsideration>("dcaa2ecdb79525642aadbd9907bb3841");
        static Consideration NoBuffVampiricShadowShield = library.Get<BuffConsideration>("7a5a431093dbe364eb52199a3fd41d42");
        static Consideration NoBuffNauseated = library.Get<BuffConsideration>("10005b1dfcd39bf4cbd9364714b3336b");
        static Consideration IloraNuski_InstantEnemyBuffConsideration = library.Get<BuffConsideration>("cbdacfe7c3fcc8f4f9b3c4417dbb79e3");
        static Consideration IloraNuski_InstantEnemyTypeConsideration = library.Get<FactConsideration>("08b151ac3be7f5c4c8f9ef0807cfedd0");
        static Consideration Trebricent_NoResonatingWordConsideration = library.Get<BuffConsideration>("b5038c62b4d7d174fb03967845393a0a");
        static Consideration Trebricent_NoConfusionConsideration = library.Get<BuffConsideration>("568055173ac2ed94a940b09fc538bba1");
        static Consideration NoBuffDominate = library.Get<BuffConsideration>("774ecd999d24e03459d85d515001df7a");
        static Consideration NoBuffMedusaPetrifying = library.Get<BuffConsideration>("7ba20e100fbfc814582ad370d37e57ff");
        static Consideration IsThreatedConsideration = library.Get<ThreatedByConsideration>("ec8e11fa0ccbf274ba557f3c26443bb5");
        static Consideration NoBuffFrightfulPresense = library.Get<BuffConsideration>("28b4da201e6b617419648e0046ae9af8");




        static class Spells
        {
            public static BlueprintAbility cape_of_wasps = library.Get<BlueprintAbility>("093ed1d67a539ad4c939d9d05cfe192c");
            public static BlueprintAbility summon_worm = library.Get<BlueprintAbility>("954f1469ed62843409783c9fa7472998");
            public static BlueprintAbility displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            public static BlueprintAbility divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            public static BlueprintAbility prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            public static BlueprintAbility umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            public static BlueprintAbility hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            public static BlueprintAbility wailbanshee = library.Get<BlueprintAbility>("b24583190f36a8442b212e45226c54fc");
            public static BlueprintAbility summonelderearth = library.Get<BlueprintAbility>("65254c7a2cf18944287207e1de3e44e8");
            public static BlueprintAbility sunburst = library.Get<BlueprintAbility>("e96424f70ff884947b06f41a765b7658");
            public static BlueprintAbility stormbolt = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            public static BlueprintAbility tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            public static BlueprintAbility seamantle = library.Get<BlueprintAbility>("7ef49f184922063499b8f1346fb7f521");
            public static BlueprintAbility trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");
            public static BlueprintAbility greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            public static BlueprintAbility greaterdispelarea = library.Get<BlueprintAbility>("b9be852b03568064b8d2275a6cf9e2de");
            public static BlueprintAbility frightfulaspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            public static BlueprintAbility wavesofexhaust = library.Get<BlueprintAbility>("3e4d3b9a5bd03734d9b053b9067c2f38");
            public static BlueprintAbility fear = library.Get<BlueprintAbility>("d2aeac47450c76347aebbc02e4f463e0");
            public static BlueprintAbility overwhelmingpresence = library.Get<BlueprintAbility>("41cf93453b027b94886901dbfc680cb9");
            public static BlueprintAbility SummonMonsterIX = library.Get<BlueprintAbility>("52b5df2a97df18242aec67610616ded0");
            public static BlueprintAbility SummonMonsterIXd3 = library.Get<BlueprintAbility>("4988b2e622c6f2d4b897894e3be13f09");
            public static BlueprintAbility blasphemy = library.Get<BlueprintAbility>("bd10c534a09f44f4ea632c8b8ae97145");
            public static BlueprintAbility inflictseriousmass = library.Get<BlueprintAbility>("820170444d4d2a14abc480fcbdb49535");
            public static BlueprintAbility vampireshield = library.Get<BlueprintAbility>("a34921035f2a6714e9be5ca76c5e34b5");
            public static BlueprintAbility bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            public static BlueprintAbility unholyaura = library.Get<BlueprintAbility>("47f9cb1c367a5e4489cfa32fce290f86");
            public static BlueprintAbility cleaveaction = library.Get<BlueprintAbility>("6447d104a2222c14d9c9b8a36e4eb242");
            public static BlueprintAbility mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            public static BlueprintAbility constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            public static BlueprintAbility entangle = library.Get<BlueprintAbility>("0fd00984a2c0e0a429cf1a911b4ec5ca");
            public static BlueprintAbility holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            public static BlueprintAbility summonelementalmedium = library.Get<BlueprintAbility>("e42b1dbff4262c6469a9ff0a6ce730e3");
            public static BlueprintAbility summonelementalmediumearth = library.Get<BlueprintAbility>("4ed414d36753459499578c9c3eb38b17");
            public static BlueprintAbility summonelementalmediumfire = library.Get<BlueprintAbility>("7b30211b83d55194db872b6c9c0d9cc1");
            public static BlueprintAbility stonecall = library.Get<BlueprintAbility>("5181c2ed0190fc34b8a1162783af5bf4");
            public static BlueprintAbility calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            public static BlueprintAbility stonefist = library.Get<BlueprintAbility>("85067a04a97416949b5d1dbf986d93f3");
            public static BlueprintAbility summonmonsterIII = library.Get<BlueprintAbility>("5d61dde0020bbf54ba1521f7ca0229dc");
            public static BlueprintAbility summonmonsterIIIsingle = library.Get<BlueprintAbility>("15b5efe371d47c944b58444e7b734ffb");
            public static BlueprintAbility summonmonsterIIId3 = library.Get<BlueprintAbility>("28f49845fad6a534b95a65b6cea8f8d6");
            public static BlueprintAbility blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            public static BlueprintAbility acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            public static BlueprintAbility magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            public static BlueprintAbility summonclerics = library.Get<BlueprintAbility>("5a1c766d3a5948bf98001e417e76ef0d");
            public static BlueprintAbility horrid_wilting = library.Get<BlueprintAbility>("08323922485f7e246acb3d2276515526");
            public static BlueprintAbility leadblades = library.Get<BlueprintAbility>("779179912e6c6fe458fa4cfb90d96e10");
            public static BlueprintAbility thundercall = library.Get<BlueprintAbility>("584427c2d3d3c5d45a169b82431612bc");
            public static BlueprintAbility earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            public static BlueprintAbility summoncyclops = library.Get<BlueprintAbility>("4089fb0f36bb4ca2a459a4420279ff87");
            public static BlueprintAbility blindbomb = library.Get<BlueprintAbility>("bd05918a568c41e49aed7b9526ba596b");
            public static BlueprintAbility chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            public static BlueprintAbility haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            public static BlueprintAbility slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            public static BlueprintAbility stinkycloud = library.Get<BlueprintAbility>("68a9e6d7256f1354289a39003a46d826");
            public static BlueprintAbility trip = library.Get<BlueprintAbility>("6fd05c4ecfebd6f4d873325de442fc17");
            public static BlueprintAbility chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            public static BlueprintAbility magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            public static BlueprintAbility summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            public static BlueprintAbility summonmonsterVId3 = library.Get<BlueprintAbility>("237d76aebbb28334e95d83475611cb47");
            public static BlueprintAbility dragonsbreath = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            public static BlueprintAbility dragonsbreathblue = library.Get<BlueprintAbility>("2809e762f83cbdb47b2f8b7816cc2a34");
            public static BlueprintAbility dragonsbreathgold = library.Get<BlueprintAbility>("e6f5453df86bd714fa33b14c994739f3");
            public static BlueprintAbility dragonsbreathsilver = library.Get<BlueprintAbility>("45e0813484581514fbfcf49939ee050d");
            public static BlueprintAbility dragonsbreathblack = library.Get<BlueprintAbility>("13ec8518bcf242e44aae59c1fd4f7198");
            public static BlueprintAbility dragonsbreathgreen = library.Get<BlueprintAbility>("48c4433acbcecae499d1d38a56f72f36");
            public static BlueprintAbility icestorm = library.Get<BlueprintAbility>("fcb028205a71ee64d98175ff39a0abf9");
            public static BlueprintAbility stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            public static BlueprintAbility lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            public static BlueprintAbility hideouslaughter = library.Get<BlueprintAbility>("fd4d9fd7f87575d47aafe2a64a6e2d8d");
            public static BlueprintAbility barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            public static BlueprintAbility hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            public static BlueprintAbility summonelementalgreat = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            public static BlueprintAbility SummonElementalGreaterAir = library.Get<BlueprintAbility>("a4849d6bd536ade48a3839a4ad960a8b");
            public static BlueprintAbility summonelementalgreatearth = library.Get<BlueprintAbility>("3ecd589cf1a55df42a3b66940ee93ea4");
            public static BlueprintAbility summonelementalgreatwater = library.Get<BlueprintAbility>("cfa3ff71a42ab8a4c8a8a4b5db3f04d4");
            public static BlueprintAbility summonelementalgreatfire = library.Get<BlueprintAbility>("35c6b4497a5bfd24aabe0cf28507abef");
            public static BlueprintAbility coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            public static BlueprintAbility heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            public static BlueprintAbility bladebarrier = library.Get<BlueprintAbility>("36c8971e91f1745418cc3ffdfac17b74");
            public static BlueprintAbility righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            public static BlueprintAbility flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            public static BlueprintAbility summonmonsterII = library.Get<BlueprintAbility>("1724061e89c667045a6891179ee2e8e7");
            public static BlueprintAbility summonmonsterIIsingle = library.Get<BlueprintAbility>("7ab27a0d547742741beb5d089f1c3852");
            public static BlueprintAbility bless = library.Get<BlueprintAbility>("90e59f4a4ada87243b7b3535a06d0638");
            public static BlueprintAbility divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            public static BlueprintAbility summonelementalsmall = library.Get<BlueprintAbility>("970c6db48ff0c6f43afc9dbb48780d03");
            public static BlueprintAbility summonelementalsmallearth = library.Get<BlueprintAbility>("69b36426bb910e341a943f101daed594");
            public static BlueprintAbility earthaciddart = library.Get<BlueprintAbility>("3ff40918d33219942929f0dbfe5d1dee");
            public static BlueprintAbility shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            public static BlueprintAbility cursedbombdeterioration = library.Get<BlueprintAbility>("3ac7286a18ba6234a908ae5d8b84d107");
            public static BlueprintAbility acidbomb = library.Get<BlueprintAbility>("fd101fbc4aacf5d48b76a65e3aa5db6d");
            public static BlueprintAbility heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            public static BlueprintAbility magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            public static BlueprintAbility fingerofdeath = library.Get<BlueprintAbility>("6f1dcf6cfa92d1948a740195707c0dbe");
            public static BlueprintAbility inflictmoderatewoundmass = library.Get<BlueprintAbility>("03944622fbe04824684ec29ff2cec6a7");
            public static BlueprintAbility DarknessDomainGreaterAbility = library.Get<BlueprintAbility>("31acd268039966940872c916782ae018");
            public static BlueprintAbility Resistenergycommunal = library.Get<BlueprintAbility>("7bb0c402f7f789d4d9fae8ca87b4c7e2");
            public static BlueprintAbility ResistFirecommunal = library.Get<BlueprintAbility>("832bf98966e72cd478eecc9f8ba829f5");
            public static BlueprintAbility boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            public static BlueprintAbility bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            public static BlueprintAbility protectionfromenergycommunal = library.Get<BlueprintAbility>("76a629d019275b94184a1a8733cac45e");
            public static BlueprintAbility protectionfromfirecommunal = library.Get<BlueprintAbility>("2903d31d6c8356547aa4aae5a3e7a655");
            public static BlueprintAbility firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            public static BlueprintAbility controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            public static BlueprintAbility shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            public static BlueprintAbility bullrushability = library.Get<BlueprintAbility>("7ab6f70c996fe9b4597b8332f0a3af5f");
            public static BlueprintAbility chargeability = library.Get<BlueprintAbility>("c78506dd0e14f7c45a599990e4e65038");
            public static BlueprintAbility scorchingray = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");
            public static BlueprintAbility disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            public static BlueprintAbility terrifyinghowl = library.Get<BlueprintAbility>("50fab1245a4342eaa1c82c8e81f883e3");
            public static BlueprintAbility terrifyingcroak = library.Get<BlueprintAbility>("d7ab3a110325b174e90ae6c7b4e96bb9");
            public static BlueprintAbility command = library.Get<BlueprintAbility>("ee88e59d9ecb40df851a5498d03d79f6");
            public static BlueprintAbility command1 = library.Get<BlueprintAbility>("08439ce8a0674a3fbc3a158255d761a8");
            public static BlueprintAbility frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            public static BlueprintAbility vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            public static BlueprintAbility phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            public static BlueprintAbility catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            public static BlueprintAbility shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            public static BlueprintAbility dimensionstrike = library.Get<BlueprintAbility>("cf7c4eaa2b47d7242b2c734df567cefb");
            public static BlueprintAbility volcanicstorm = library.Get<BlueprintAbility>("16ce660837fb2544e96c3b7eaad73c63");
            public static BlueprintAbility snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            public static BlueprintAbility flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            public static BlueprintAbility poxpostules = library.Get<BlueprintAbility>("bc153808ef4884a4594bc9bec2299b69");
            public static BlueprintAbility burstofnettles = library.Get<BlueprintAbility>("af0092cbb9cacd74aadfe6bf4ebcdebf");
            public static BlueprintAbility dirtytrickblindness = library.Get<BlueprintAbility>("8b7364193036a8d4a80308fbe16c8187");
            public static BlueprintAbility summonghosts = library.Get<BlueprintAbility>("a8ba7017d97345969db2567eb7c249b7");
            public static BlueprintAbility summonghosts2 = library.Get<BlueprintAbility>("2cbda65cde8f462baf8994af02854d4e");
            public static BlueprintAbility summonundeadfriends = library.Get<BlueprintAbility>("119a6fc4756c45a7a329859f030836c2");
            public static BlueprintAbility summonvengefulspectres = library.Get<BlueprintAbility>("b820d077b4ea4c22b79b24c221b8ffe1");
            public static BlueprintAbility wavesoffatigue = library.Get<BlueprintAbility>("8878d0c46dfbd564e9d5756349d5e439");
            public static BlueprintAbility blindness = library.Get<BlueprintAbility>("46fd02ad56c35224c9c91c88cd457791");
            public static BlueprintAbility crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            public static BlueprintAbility summonelementallarge = library.Get<BlueprintAbility>("89404dd71edc1aa42962824b44156fe5");
            public static BlueprintAbility summonelementallargeair = library.Get<BlueprintAbility>("16fff43f034133a4a86e914a523e021f");
            public static BlueprintAbility slayliving = library.Get<BlueprintAbility>("4fbd47525382517419c66fb548fe9a67");
            public static BlueprintAbility bane = library.Get<BlueprintAbility>("8bc64d869456b004b9db255cdd1ea734");
            public static BlueprintAbility explosivebomb = library.Get<BlueprintAbility>("2b76e3bd89b4fa0419853a69fec0785f");
            public static BlueprintAbility standartbomb = library.Get<BlueprintAbility>("5fa0111ac60ed194db82d3110a9d0352");
            public static BlueprintAbility reduceperson = library.Get<BlueprintAbility>("4e0e9aba6447d514f88eff1464cc4763");
            public static BlueprintAbility dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            public static BlueprintAbility dispeltarget = library.Get<BlueprintAbility>("143775c49ae6b7446b805d3b2e702298");
            public static BlueprintAbility rayofsickening = library.Get<BlueprintAbility>("fa3078b9976a5b24caf92e20ee9c0f54");
            public static BlueprintAbility sunderarmor = library.Get<BlueprintAbility>("fa9bfb9fd997faf49a108c4b17a00504");
            public static BlueprintAbility web = library.Get<BlueprintAbility>("134cb6d492269aa4f8662700ef57449f");
            public static BlueprintAbility acidicspray = library.Get<BlueprintAbility>("c543eef6d725b184ea8669dd09b3894c");
            public static BlueprintAbility coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            public static BlueprintAbility spikestones = library.Get<BlueprintAbility>("d1afa8bc28c99104da7d784115552de5");
            public static BlueprintAbility burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");
            public static BlueprintAbility fireball = library.Get<BlueprintAbility>("2d81362af43aeac4387a3d4fced489c3");
            public static BlueprintAbility soundburst = library.Get<BlueprintAbility>("c3893092a333b93499fd0a21845aa265");
            public static BlueprintAbility owlswisdom = library.Get<BlueprintAbility>("f0455c9295b53904f9e02fc571dd2ce1");
            public static BlueprintAbility EnlargePersonMass = library.Get<BlueprintAbility>("66dc49bf154863148bd217287079245e");
            public static BlueprintAbility WildshapeBear = library.Get<BlueprintAbility>("3f7873efe4ca499bae86489d1d993442");
            public static BlueprintAbility bullsstrength = library.Get<BlueprintAbility>("4c3d08935262b6544ae97599b3a9556d");
            public static BlueprintAbility phantasmalweb = library.Get<BlueprintAbility>("12fb4a4c22549c74d949e2916a2f0b6a");
            public static BlueprintAbility balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            public static BlueprintAbility summonmonsterIV = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            public static BlueprintAbility summonmonsterIVsingle = library.Get<BlueprintAbility>("efa433a38e9c7c14bb4e780f8a3fe559");
            public static BlueprintAbility channelnegativeenergyharmbase = library.Get<BlueprintAbility>("1daa4e1ca1d24a14a36e4b3f20b27985");
            public static BlueprintAbility channelnegativeenergy = library.Get<BlueprintAbility>("89df18039ef22174b81052e2e419c728");
            public static BlueprintAbility channelpositivehealbase = library.Get<BlueprintAbility>("507ba29b9238431baf0ff39c215b5899");
            public static BlueprintAbility channelpositiveenergy = library.Get<BlueprintAbility>("f5fc9a1a2a3c1a946a31b320d1dd31b2");
            public static BlueprintAbility searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            public static BlueprintAbility shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            public static BlueprintAbility InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            public static BlueprintAbility fester = library.Get<BlueprintAbility>("2dbe271c979d9104c8e2e6b42e208e32");
            public static BlueprintAbility aid = library.Get<BlueprintAbility>("03a9630394d10164a9410882d31572f0");
            public static BlueprintAbility serenity = library.Get<BlueprintAbility>("d316d3d94d20c674db2c24d7de96f6a7");
            public static BlueprintAbility boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            public static BlueprintAbility causefear = library.Get<BlueprintAbility>("bd81a3931aa285a4f9844585b5d97e51");
            public static BlueprintAbility colorspray = library.Get<BlueprintAbility>("91da41b9793a4624797921f221db653c");
            public static BlueprintAbility auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            public static BlueprintAbility confusion = library.Get<BlueprintAbility>("cf6c901fb7acc904e85c63b342e9c949");
            public static BlueprintAbility overwhelminggrief = library.Get<BlueprintAbility>("dd2918e4a77c50044acba1ac93494c36");
            public static BlueprintAbility greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            public static BlueprintAbility icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            public static BlueprintAbility profanenimbus = library.Get<BlueprintAbility>("b56521d58f996cd4299dab3f38d5fe31");
            public static BlueprintAbility wildshapesmilodon = library.Get<BlueprintAbility>("32f1f208ad635224f89ef158140ab509");
            public static BlueprintAbility greatermagicfang = library.Get<BlueprintAbility>("f1100650705a69c4384d3edd88ba0f52");
            public static BlueprintAbility thornbody = library.Get<BlueprintAbility>("2daf9c5112f16d54ab3cd6904c705c59");
            public static BlueprintAbility aspectofthewolf = library.Get<BlueprintAbility>("6126b36fe22291543ad72f8b9f0d53a7");
            public static BlueprintAbility aspectofthebear = library.Get<BlueprintAbility>("a4ad1b8fa11e7c347a608c004efce9d5");
            public static BlueprintAbility calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            public static BlueprintAbility calllightningstormlightning = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            public static BlueprintAbility freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            public static BlueprintAbility animalgrowth = library.Get<BlueprintAbility>("56923211d2ac95e43b8ac5031bab74d8");
            public static BlueprintAbility instantenemy = library.Get<BlueprintAbility>("42c78009dd5cb8e429b27c13d92152b7");
            public static BlueprintAbility quarry = library.Get<BlueprintAbility>("e93dfca6f025e6d4e9583e688c147aca");
            public static BlueprintAbility aspectofthefalcon = library.Get<BlueprintAbility>("7bdb6a9fb6b37614e96f155748ae50c6");
            public static BlueprintAbility echolocation = library.Get<BlueprintAbility>("20b548bf09bb3ea4bafea78dcb4f3db6");
            public static BlueprintAbility summondweomercat = library.Get<BlueprintAbility>("fcd4a4b7efea4a59b2153ccbe505e307");
            public static BlueprintAbility SickeningEntangle = library.Get<BlueprintAbility>("6c7467f0344004d48848a43d8c078bf8");
            public static BlueprintAbility BurningEntangle = library.Get<BlueprintAbility>("a9eda36d0fb048bc9d22af324577d31a");
            public static BlueprintAbility creepingdoom = library.Get<BlueprintAbility>("b974af13e45639a41a04843ce1c9aa12");
            public static BlueprintAbility fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            public static BlueprintAbility vinetrap = library.Get<BlueprintAbility>("6d1d48a939ce475409f06e1b376bc386");
            public static BlueprintAbility castigatemass = library.Get<BlueprintAbility>("41236cf0e476d7043bc16a33a9f449bd");
            public static BlueprintAbility phantasmalputrification = library.Get<BlueprintAbility>("1f2e6019ece86d64baa5effa15e81ecc");
            public static BlueprintAbility angelicaspect = library.Get<BlueprintAbility>("75a10d5a635986641bfbcceceec87217");
            public static BlueprintAbility wavesofecstasy = library.Get<BlueprintAbility>("1e2d1489781b10a45a3b70192bba9be3");
            public static BlueprintAbility acidfog = library.Get<BlueprintAbility>("dbf99b00cd35d0a4491c6cc9e771b487");
            public static BlueprintAbility burstofglory = library.Get<BlueprintAbility>("1bc83efec9f8c4b42a46162d72cbf494");
            public static BlueprintAbility summonspectres = library.Get<BlueprintAbility>("69481c1067334bdaa4948e274a277085");
            public static BlueprintAbility chainsoflight = library.Get<BlueprintAbility>("f8cea58227f59c64399044a82c9735c4");
            public static BlueprintAbility dirtytricksickened = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");
            public static BlueprintAbility summonelementalhuge = library.Get<BlueprintAbility>("766ec978fa993034f86a372c8eb1fc10");
            public static BlueprintAbility summonelementalhugeair = library.Get<BlueprintAbility>("2c26e78ca33e83843b1aa3f6783877bd");
            public static BlueprintAbility BreathWeaponBomb = library.Get<BlueprintAbility>("17041de68a89a5f4b92889c3ed475c00");
            public static BlueprintAbility kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            public static BlueprintAbility holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            public static BlueprintAbility cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            public static BlueprintAbility goodhope = library.Get<BlueprintAbility>("a5e23522eda32dc45801e32c05dc9f96");
            public static BlueprintAbility festermass = library.Get<BlueprintAbility>("52b8b14360a87104482b2735c7fc8606");
            public static BlueprintAbility unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            public static BlueprintAbility summonrangedfriends = library.Get<BlueprintAbility>("fea4591ce15b43909d1c80114edb8555");
            public static BlueprintAbility virtuosoperformance = library.Get<BlueprintAbility>("1702006da6ff412dae198ee0f1e3f933");
            public static BlueprintAbility resonatingword = library.Get<BlueprintAbility>("df7d13c967bce6a40bec3ba7c9f0e64c");
            public static BlueprintAbility songofdiscord = library.Get<BlueprintAbility>("d38aaf487e29c3d43a3bffa4a4a55f8f");
            public static BlueprintAbility mindfog = library.Get<BlueprintAbility>("eabf94e4edc6e714cabd96aa69f8b207");
            public static BlueprintAbility legendaryproportions = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            public static BlueprintAbility DragonkindIIBlue = library.Get<BlueprintAbility>("22ac82f7c2287ec4594f25653da384f7");
            public static BlueprintAbility DragonkindIIBlueBreath = library.Get<BlueprintAbility>("a78415f2be26edb40912499a643d4a0c");
            public static BlueprintAbility featherstepmass = library.Get<BlueprintAbility>("d219494150ac1f24f9ce14a3d4f66d26");
            public static BlueprintAbility blessingofthesalamander = library.Get<BlueprintAbility>("9256a86aec14ad14e9497f6b60e26f3f");
            public static BlueprintAbility sensevitals = library.Get<BlueprintAbility>("82962a820ebc0e7408b8582fdc3f4c0c");
            public static BlueprintAbility kiattackextra = library.Get<BlueprintAbility>("7f6ea312f5dad364fa4a896d7db39fdd");
            public static BlueprintAbility deathclutch = library.Get<BlueprintAbility>("c3d2294a6740bc147870fff652f3ced5");
            public static BlueprintAbility razorcone = library.Get<BlueprintAbility>("9e57bbe2a8d9cc84086b15f6355346e2");
            public static BlueprintAbility shoutgreater = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            public static BlueprintAbility DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");
            public static BlueprintAbility stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            public static BlueprintAbility plaguestorm = library.Get<BlueprintAbility>("82a5b848c05e3f342b893dedb1f9b446");
            public static BlueprintAbility plaguestormblindingsickness = library.Get<BlueprintAbility>("2dc03fae8128c84479f5c4bebae97001");
            public static BlueprintAbility plagueStormBubonicPlague = library.Get<BlueprintAbility>("e76b0dd9972fcaf499f5d447d0c8e145");
            public static BlueprintAbility firestorm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            public static BlueprintAbility summonelderelemental = library.Get<BlueprintAbility>("8a7f8c1223bda1541b42fd0320cdbe2b");
            public static BlueprintAbility summonelderelementalearth = library.Get<BlueprintAbility>("65254c7a2cf18944287207e1de3e44e8");
            public static BlueprintAbility calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            public static BlueprintAbility disintegrate = library.Get<BlueprintAbility>("4aa7942c3e62a164387a73184bca3fc1");
            public static BlueprintAbility summondamnedtrolls = library.Get<BlueprintAbility>("79b350e94db34296bc9c028880a96f2b");
            public static BlueprintAbility summonfrostgiants = library.Get<BlueprintAbility>("90c17d807cb04d5b9045480d1eef447c");
            public static BlueprintAbility summonerinyes = library.Get<BlueprintAbility>("e5a1f14eba86468988b8cd60c22af173");
            public static BlueprintAbility effortlessarmor = library.Get<BlueprintAbility>("e1291272c8f48c14ab212a599ad17aac");
            public static BlueprintAbility summonelderworms = library.Get<BlueprintAbility>("a89156c13eca4f6d91364f41ae8d00f9");
            public static BlueprintAbility icyprisonmass = library.Get<BlueprintAbility>("1852a9393a23d5741b650a1ea7078abc");
            public static BlueprintAbility tsunami = library.Get<BlueprintAbility>("d8144161e352ca846a73cf90e85bf9ac");
            public static BlueprintAbility Shadowevocationgreater = library.Get<BlueprintAbility>("3c4a2d4181482e84d9cd752ef8edc3b6");
            public static BlueprintAbility Shadowevocationgreaterchainlightning = library.Get<BlueprintAbility>("0d7d3c0b53ec3584296e9617c59c15f1");
            public static BlueprintAbility Shadowevocationgreatercoldicestrike = library.Get<BlueprintAbility>("92c7ad6de5115694392504c626309da6");
            public static BlueprintAbility polarray = library.Get<BlueprintAbility>("17696c144a0194c478cbe402b496cb23");
            public static BlueprintAbility causticeruption = library.Get<BlueprintAbility>("8c29e953190cc67429dc9c701b16b7c2");
            public static BlueprintAbility summontreants = library.Get<BlueprintAbility>("b4beebe9cb3f4ca8967b1257289c23ea");
            public static BlueprintAbility cloakofchaos = library.Get<BlueprintAbility>("9155dbc8268da1c49a7fc4834fa1a4b1");
            public static BlueprintAbility knurlywitchmadness = library.Get<BlueprintAbility>("8f4d6e80a08255744b4b158b36f860ab");
            public static BlueprintAbility Weird = library.Get<BlueprintAbility>("870af83be6572594d84d276d7fc583e0");
            public static BlueprintAbility BlackDragonFrightfulPresenceAbility = library.Get<BlueprintAbility>("6381660e646656d4790a54335e0ec733");
            public static BlueprintAbility polarmidnight = library.Get<BlueprintAbility>("ba48abb52b142164eba309fd09898856");
            public static BlueprintAbility illthuliaksbreath = library.Get<BlueprintAbility>("0a0d33427f8ae384ab2a35f589482f99");
            public static BlueprintAbility summonbloodybones = library.Get<BlueprintAbility>("8bf285a86abd4e64a9613f185aa689a1");
            public static BlueprintAbility summonundeadminions = library.Get<BlueprintAbility>("616db5550a924aa0bf582cbb7ac5da6c");
            public static BlueprintAbility summonsouleaters = library.Get<BlueprintAbility>("a15ecda6872b4246b0ea500767a38e75");
            public static BlueprintAbility summonelders = library.Get<BlueprintAbility>("5c373918f5aa44258d600c0765384d44");
            public static BlueprintAbility summongreaters = library.Get<BlueprintAbility>("f5f5f07f19e74650a1d10e612cdfad1e");
            public static BlueprintAbility summonaidforest = library.Get<BlueprintAbility>("d22e1838adc447a9b908a3dd47cd76fc");
            public static BlueprintAbility catsmass = library.Get<BlueprintAbility>("1f6c94d56f178b84ead4c02f1b1e1c48");
            public static BlueprintAbility summonaidlake = library.Get<BlueprintAbility>("e09c4938682d490f918a9fc79d30b4c1");
            public static BlueprintAbility CloakofDreams = library.Get<BlueprintAbility>("7f71a70d822af94458dc1a235507e972");
            public static BlueprintAbility EaglesSplendorMass = library.Get<BlueprintAbility>("2caa607eadda4ab44934c5c9875e01bc");
            public static BlueprintAbility Split = library.Get<BlueprintAbility>("e8628038652343fcbe93de195e1d7885");
            public static BlueprintAbility CallFallen = library.Get<BlueprintAbility>("259c56f85ed8425991a8889563ae0de9");

            



        }



        static class AiActions
        {

            static public BlueprintAiCastSpell MakePreCast(BlueprintAiCastSpell from)
            {
                BlueprintAiCastSpell action = CallOfTheWild.Helpers.Create<BlueprintAiCastSpell>();
                action.name = from.name.Replace("SLE_", "SLE_PRECAST_");
                return action;
            }
            

            static public BlueprintAiCastSpell cape_of_wasps_cast_first = createCastSpellAction("CastCapeOfWaspsBuff", Spells.cape_of_wasps,
                                                                                     new Consideration[] { },
                                                                                     new Consideration[] { },
                                                                                     base_score: 10.0f, combat_count: 1);


            static public BlueprintAiCastSpell castanimalgrowth = createCastSpellAction("CastAnimalGrowth", Spells.animalgrowth,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { AnimalConsideration },
                                                                         base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell usequarry = createCastSpellAction("CastQuarry", Spells.quarry,
                                                                        new Consideration[] { },
                                                                        new Consideration[] { attacktargetspriority },
                                                                        base_score: 20.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castgreatermagicfang = createCastSpellAction("castgreatermagicfang", Spells.greatermagicfang,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { TargetSelf },
                                                                         base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castunbreakableheart = createCastSpellAction("castunbreakableheart", Spells.unbreakableheart,
                                                             new Consideration[] { },
                                                             new Consideration[] { TargetSelf },
                                                             base_score: 30.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castthornbody = createCastSpellAction("castthornbody", Spells.thornbody,
                                                             new Consideration[] { },
                                                             new Consideration[] { },
                                                             base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castspikestones = createCastSpellAction("castspikestones", Spells.spikestones,
                                                 new Consideration[] { },
                                                 new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
                                                 base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell castaspectwolf = createCastSpellAction("castaspectwolf", Spells.aspectofthewolf,
                                                 new Consideration[] { },
                                                 new Consideration[] { },
                                                 base_score: 10.0f, combat_count: 1, pre_cast: true);


            static public BlueprintAiCastSpell castaspectbear = createCastSpellAction("castaspectbear", Spells.aspectofthebear,
                                                 new Consideration[] { },
                                                 new Consideration[] { TargetSelf },
                                                 base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castfreedomofmovement = createCastSpellAction("castfreedomofmovement", Spells.freedomofmovement,
                                     new Consideration[] { AlliesNoBuff_FreedomOfMovement },
                                     new Consideration[] { TargetSelf },
                                     base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castauraofdoom = createCastSpellAction("CastAuraodDoom", Spells.auraofdoom,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { },
                                                                         base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell divine_power_first = createCastSpellAction("CastDivinePowerFirst", Spells.divinepower,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { },
                                                                         base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell summon_worm_first = createCastSpellAction("CastSummonWorm", Spells.summon_worm,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { },
                                                                         base_score: 10.0f, combat_count: 1);
            static public BlueprintAiCastSpell displacement_first = createCastSpellAction("CastDisplacementBuff", Spells.displacement,
                                                                                     new Consideration[] { },
                                                                                     new Consideration[] { NoBuffDisplacement, TargetSelf },
                                                                                     base_score: 10.0f, combat_count: 4, pre_cast: true);



            static public BlueprintAiCastSpell prayer_second = createCastSpellAction("CastPrayerSecond", Spells.prayer,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { },
                                                                         base_score: 10.0f, combat_count: 2);

            static public BlueprintAiCastSpell umbral_strike = createCastSpellAction("CastUmbralStrike", Spells.umbralstrike,
                                                             new Consideration[] { },
                                                             new Consideration[] { },
                                                              base_score: 10.0f);
            static public BlueprintAiCastSpell hellfire_ray = createCastSpellAction("CastHellfireRay", Spells.hellfireray,
                                                             new Consideration[] { },
                                                             new Consideration[] { },
                                                             base_score: 10.0f);
            static public BlueprintAiCastSpell wail_banshee_first = createCastSpellAction("CastWailBanshee", Spells.wailbanshee,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { },
                                                                         base_score: 10.0f, combat_count: 1);
            static public BlueprintAiCastSpell summon_elder_earth = createCastSpellAction("CastSummonElderEarth", Spells.summonelderearth,
                                                             new Consideration[] { },
                                                             new Consideration[] { },
                                                             base_score: 10.0f, combat_count: 1);
            static public BlueprintAiCastSpell sunburst = createCastSpellAction("CastSunburst", Spells.sunburst,
                                                 new Consideration[] { },
                                                 new Consideration[] { },
                                                 base_score: 10.0f, combat_count: 1);
            static public BlueprintAiCastSpell stormbolt = createCastSpellAction("CastStormbolt", Spells.stormbolt,
                                     new Consideration[] { },
                                     new Consideration[] { },
                                     base_score: 10.0f, combat_count: 1);
            static public BlueprintAiCastSpell tarpool = createCastSpellAction("CastTarpool", Spells.tarpool,
                         new Consideration[] { },
                         new Consideration[] { ArcaneCasterPriorityConsiderationVordakai },
                         base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell seamantle = createCastSpellAction("CastSeamantle", Spells.seamantle,
             new Consideration[] { },
             new Consideration[] { },
             base_score: 50.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell greaterdispel = createCastSpellAction("CastGreaterDispelQuick", Spells.greaterdispel,
                new Consideration[] { },
                new Consideration[] { AOE_ChooseMoreEnemies },
                base_score: 19.0f, variant: Spells.greaterdispelarea, combat_count: 1);

            static public BlueprintAiCastSpell frightfulaspect = createCastSpellAction("CastFrightfulAspect", Spells.frightfulaspect,
               new Consideration[] { },
               new Consideration[] { },
               base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell wavesofexhaust = createCastSpellAction("CastWavesOfExhaustion", Spells.wavesofexhaust,
               new Consideration[] { },
               new Consideration[] { AOE_ChooseMoreEnemies },
               base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell wavesofexhaustghost = createCastSpellAction("CastWavesOfExhaustionghost", Spells.wavesofexhaust,
             new Consideration[] { },
             new Consideration[] { AOE_ChooseMoreEnemies },
             base_score: 60.0f, combat_count: 1);


            static public BlueprintAiCastSpell fear = createCastSpellAction("CastFear", Spells.fear,
              new Consideration[] { },
              new Consideration[] { AOE_ChooseMoreEnemies },
              base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell castcausefeardelay = createCastSpellAction("castcausefeardelay", Spells.causefear,
  new Consideration[] { },
  new Consideration[] { attacktargetspriority, NoBuffShaken, NoBuffFrightened, NoCaster },
  base_score: 10.0f, combat_count: 1, cooldown_rounds: 2, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castfearwitch = createCastSpellAction("CastFearwitch", Spells.fear,
  new Consideration[] { },
  new Consideration[] { AOE_ChooseMoreEnemies },
  base_score: 10.0f, cooldown_rounds: 2, start_cooldown_rounds: 5);


            static public BlueprintAiCastSpell overwhelmingpresence = createCastSpellAction("CastOverwhelmingpresence", Spells.overwhelmingpresence,
            new Consideration[] { },
            new Consideration[] { AOE_ChooseMoreEnemies },
            base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell summonmonsterIX = createCastSpellAction("CastSummonMonsterIX", Spells.SummonMonsterIX,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 20.0f, variant: Spells.SummonMonsterIXd3, combat_count: 1);

            static public BlueprintAiCastSpell blasphemy = createCastSpellAction("CastBlasphemy", Spells.blasphemy,
                new Consideration[] { },
                new Consideration[] { },
                base_score: 10.0f, combat_count: 10);

            static public BlueprintAiCastSpell inflictseriousmass = createCastSpellAction("CastInflictSeriousWoundsMass", Spells.inflictseriousmass,
                  new Consideration[] { },
                 new Consideration[] { },
               base_score: 10.0f, combat_count: 4);

            static public BlueprintAiCastSpell vampireshield = createCastSpellAction("CastVampireShield", Spells.vampireshield,
                new Consideration[] { },
                new Consideration[] { },
              base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell bansheeblast = createCastSpellAction("CastBansheeBlast", Spells.bansheeblast,
            new Consideration[] { },
            new Consideration[] { AOE_ChooseMoreEnemies },
            base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell unholyaura = createCastSpellAction("Castunholyaura", Spells.unholyaura,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 20.0f, combat_count: 2,pre_cast: true);


            static public BlueprintAiCastSpell cleave = createCastSpellAction("UseCleave", Spells.cleaveaction,
            new Consideration[] { units_around },
            new Consideration[] { attacktargetspriority },
            base_score: 10.0f, cooldown_rounds: 3);



            static public BlueprintAiCastSpell mirrorimage = createCastSpellAction("Castmirrorimage", Spells.mirrorimage,
                new Consideration[] { },
                new Consideration[] { NoBuffMirrorImage },
                base_score: 20.0f, combat_count: 1, pre_cast: true);


            static public BlueprintAiCastSpell mirrorimagerecast = createCastSpellAction("Castmirrorimagerecast", Spells.mirrorimage,
    new Consideration[] { },
    new Consideration[] { NoBuffMirrorImage },
    base_score: 30.0f, combat_count: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell displacementrecast = createCastSpellAction("Castdisplacementrecast", Spells.displacement,
new Consideration[] { },
new Consideration[] { NoBuffDisplacement },
base_score: 30.0f, combat_count: 1, start_cooldown_rounds: 8);



            static public BlueprintAiCastSpell entangle = createCastSpellAction("Castentangle", Spells.entangle,
                new Consideration[] { },
                 new Consideration[] { AOE_ChooseMoreEnemies },
                base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell constrictingcoils = createCastSpellAction("Castconstrictingcoils", Spells.constrictingcoils,
             new Consideration[] { },
             new Consideration[] { SupporCasterFocusConsideration },
             base_score: 20.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell holdpersontartuk = createCastSpellAction("Castholdpersontartuk", Spells.holdperson,
                    new Consideration[] { },
                    new Consideration[] { attacktargetspriority, ChaoticBehavior },
                    base_score: 3.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell summonelementalmediumearth = createCastSpellAction("CastSummonelementalmedium", Spells.summonelementalmedium,
                new Consideration[] { },
                new Consideration[] { },
                base_score: 20.0f, variant: Spells.summonelementalmediumearth, combat_count: 1);

            static public BlueprintAiCastSpell summonelementalmediumfire = createCastSpellAction("CastSummonelementalfire", Spells.summonelementalmedium,
    new Consideration[] { },
    new Consideration[] { },
    base_score: 20.0f, variant: Spells.summonelementalmediumfire, combat_count: 1);

            static public BlueprintAiCastSpell summonelementalhugeair = createCastSpellAction("summonelementalhugeair", Spells.summonelementalhuge,
new Consideration[] { },
new Consideration[] { },
base_score: 40.0f, variant: Spells.summonelementalhugeair, combat_count: 1);

            static public BlueprintAiCastSpell stonecall = createCastSpellAction("Caststonecall", Spells.stonecall,
                 new Consideration[] { },
                 new Consideration[] { AOE_ChooseMoreEnemies },
                 base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell calllightningthirdturn = createCastSpellAction("calllightningthirdturn", Spells.calllightning,
                 new Consideration[] { },
                 new Consideration[] { attacktargetspriority },
                base_score: 3.0f, combat_count: 2, cooldown_rounds: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell calllightningstorm = createCastSpellAction("calllightningstorm", Spells.calllightningstorm,
     new Consideration[] { },
     new Consideration[] { attacktargetspriority },
    base_score: 3.0f, cooldown_rounds: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell stonefist = createCastSpellAction("Caststonefist", Spells.stonefist,
                    new Consideration[] { },
                    new Consideration[] { AOE_ChooseMoreEnemies },
                    base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell summonmonsterIIIsingle = createCastSpellAction("CastsummonmonsterIII", Spells.summonmonsterIII,
                    new Consideration[] { },
                    new Consideration[] { },
                    base_score: 20.0f, variant: Spells.summonmonsterIIIsingle, combat_count: 1);



            static public BlueprintAiCastSpell blur_first = createCastSpellAction("CastBlurBuff", Spells.blur,
                              new Consideration[] { NoBuffBlur },
                              new Consideration[] { },
                              base_score: 60.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell acidarrowdelay = createCastSpellAction("Castacidarrowdelay", Spells.acidarrow,
                   new Consideration[] { },
                  new Consideration[] { attacktargetspriority },
                 base_score: 3.0f, cooldown_rounds: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell magicmissledelay = createCastSpellAction("Castmagicmissledelay", Spells.magicmissle,
                 new Consideration[] { },
                 new Consideration[] { attacktargetspriority },
                 base_score: 3.0f, cooldown_rounds: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell summonclerics = createCastSpellAction("CastSummonClerics", Spells.summonclerics,
                new Consideration[] { },
                new Consideration[] { },
                base_score: 20.0f, combat_count: 1, cooldown_rounds: 500);


            static public BlueprintAiCastSpell horridwilting = createCastSpellAction("CastHorridWilting", Spells.horrid_wilting,
                     new Consideration[] { },
                     new Consideration[] { },
                  base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell leadblades = createCastSpellAction("CastLeadBlades", Spells.leadblades,
                     new Consideration[] { },
                     new Consideration[] { },
                  base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell nothundercall = createCastSpellAction("NoCastThundercall", Spells.thundercall,
              new Consideration[] { },
              new Consideration[] { },
            base_score: 20.0f, combat_count: 1, cooldown_rounds: 500);

            static public BlueprintAiCastSpell earpierce = createCastSpellAction("castearpierce", Spells.earpiercescream,
            new Consideration[] { },
             new Consideration[] { attacktargetspriority },
            base_score: 20.0f, combat_count: 4, start_cooldown_rounds: 1, cooldown_rounds: 1);


            static public BlueprintAiCastSpell castsearinglight = createCastSpellAction("castsearinglight", Spells.searing_light,
                new Consideration[] { },
                new Consideration[] { attacktargetspriority },
                base_score: 20.0f, combat_count: 4, start_cooldown_rounds: 2, cooldown_rounds: 1);

            static public BlueprintAiCastSpell summoncyclops = createCastSpellAction("Castsummoncyclops", Spells.summoncyclops,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell throwblindbomb = createCastSpellAction("throwblindbomb", Spells.blindbomb,
            new Consideration[] { },
             new Consideration[] { AOE_ChooseMoreEnemies },
            base_score: 20.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell throwchokebomb = createCastSpellAction("throwchokebomb", Spells.chokebomb,
new Consideration[] { },
 new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell usebreathbomb = createCastSpellAction("usebreathbomb", Spells.BreathWeaponBomb,
new Consideration[] { },
 new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell casthaste = createCastSpellAction("casthaste", Spells.haste,
            new Consideration[] { },
            new Consideration[] { AlliesNoBuff_Haste },
            base_score: 30.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell casthasteherald = createCastSpellAction("casthasteherald", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 50.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell casthastetreb = createCastSpellAction("casthastetreb", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 90.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castslow = createCastSpellAction("castslow", Spells.slow,
                new Consideration[] { },
                new Consideration[] { attacktargetspriority, NoBuffSlow },
            base_score: 20.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castslowgardener = createCastSpellAction("castslowgardener", Spells.slow,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, NoBuffSlow },
base_score: 20.0f, combat_count: 1, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castslowherald = createCastSpellAction("castslowherald", Spells.slow,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, NoBuffSlow },
base_score: 20.0f, combat_count: 1, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castslowogre = createCastSpellAction("castslowogre", Spells.slow,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffSlow },
base_score: 50.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell caststinkycloud = createCastSpellAction("caststinkycloud", Spells.stinkycloud,
             new Consideration[] { },
             new Consideration[] { attacktargetspriority },
            base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell trip = createCastSpellAction("Usetrip", Spells.trip,
            new Consideration[] { },
            new Consideration[] { attacktargetspriority },
            base_score: 10.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell chainlightning = createCastSpellAction("castchainlightning", Spells.chainlightning,
                new Consideration[] { },
                new Consideration[] { attacktargetspriority },
                base_score: 20.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell magicmissleswift = createCastSpellAction("castmagicmissleswift", Spells.magicmissleswift,
                new Consideration[] { },
               new Consideration[] { attacktargetspriority, NoBuffShield },
            base_score: 20.0f, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castmagicmissle = createCastSpellAction("castmagicmissle", Spells.magicmissle,
    new Consideration[] { },
   new Consideration[] { attacktargetspriority, NoBuffShield },
base_score: 20.0f, cooldown_rounds: 1);

            static public BlueprintAiCastSpell castmagicmissletransmuter = createCastSpellAction("castmagicmissletransmuter", Spells.magicmissle,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffShield },
base_score: 20.0f, cooldown_rounds: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell summonmonsterVI = createCastSpellAction("CastSummonMonsterVI", Spells.summonmonsterVI,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 20.0f, variant: Spells.summonmonsterVId3, combat_count: 1);

            static public BlueprintAiCastSpell dragonsbreath = createCastSpellAction("Castdragonsbreathblue", Spells.dragonsbreath,
                new Consideration[] { },
                new Consideration[] { },
            base_score: 20.0f, variant: Spells.dragonsbreathblue, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell icestorm = createCastSpellAction("casticestorm", Spells.icestorm,
                 new Consideration[] { },
                 new Consideration[] { attacktargetspriority },
            base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell icestormgardener = createCastSpellAction("casticestormgardener", Spells.icestorm,
         new Consideration[] { },
         new Consideration[] { attacktargetspriority },
    base_score: 40.0f, combat_count: 1, start_cooldown_rounds: 4);



            static public BlueprintAiCastSpell stoneskincommunal = createCastSpellAction("caststoneskincommunal", Spells.stoneskincommunal,
                 new Consideration[] { },
                 new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
                base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell stoneskin = createCastSpellAction("caststoneskin", Spells.stoneskin,
     new Consideration[] { },
     new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
    base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell stoneskincommunalengel = createCastSpellAction("caststoneskincommunalengel", Spells.stoneskincommunal,
     new Consideration[] { },
     new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
    base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell stoneskincommunalmagus = createCastSpellAction("caststoneskincommunalmagus", Spells.stoneskincommunal,
     new Consideration[] { },
     new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
    base_score: 50.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell stoneskincommunalinquisitor = createCastSpellAction("caststoneskincommunalinquisitor", Spells.stoneskincommunal,
     new Consideration[] { },
     new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
    base_score: 50.0f, combat_count: 1);

            static public BlueprintAiCastSpell trueseeing = createCastSpellAction("CastTrueSeeing", Spells.trueseeing,
            new Consideration[] { },
            new Consideration[] { attacktargetspriority },
            base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell virtuosoperformance = createCastSpellAction("Castvirtuosoperformance", Spells.virtuosoperformance,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 10.0f, combat_count: 1, pre_cast: true);


            

            static public BlueprintAiCastSpell dragonsbreathsilver = createCastSpellAction("Castdragonsbreathsilver", Spells.dragonsbreath,
            new Consideration[] { },
            new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
            base_score: 20.0f, variant: Spells.dragonsbreathsilver, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell lightningboltfourturns = createCastSpellAction("castlightningbolt", Spells.lightningbolt,
                 new Consideration[] { },
                 new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
            base_score: 3.0f, combat_count: 3, cooldown_rounds: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell acidarrownixie = createCastSpellAction("Castacidarrownixie", Spells.acidarrow,
             new Consideration[] { },
                 new Consideration[] { attacktargetspriority },
             base_score: 3.0f, cooldown_rounds: 1);

            static public BlueprintAiCastSpell hideouslaughternixie = createCastSpellAction("Casthideouslaughternixie", Spells.hideouslaughter,
             new Consideration[] { },
             new Consideration[] { attacktargetspriority, NoBuffHideousLaughter, IntGreaterThan2 },
             base_score: 3.0f, cooldown_rounds: 2);

            static public BlueprintAiCastSpell barkskingoblinking = createCastSpellAction("Castbarkskin", Spells.barkskin,
            new Consideration[] { NoBuffBarkskin },
            new Consideration[] { },
             base_score: 1.0f,  pre_cast: true);

            static public BlueprintAiCastSpell hurricanebowgoblinking = createCastSpellAction("Casthurricanebow", Spells.hurricanebow,
            new Consideration[] { NoBuffHurricaneBow },
                new Consideration[] { },
            base_score: 1.0f,  pre_cast: true);

            static public BlueprintAiCastSpell hurricanebowbandittransmuter = createCastSpellAction("hurricanebowbandittransmuter", Spells.hurricanebow,
new Consideration[] { NoBuffHurricaneBow },
    new Consideration[] { },
base_score: 1.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell summonelementalgreatearth = createCastSpellAction("CastSummonelementalgreat", Spells.summonelementalgreat,
                new Consideration[] { },
                new Consideration[] { },
             base_score: 20.0f, variant: Spells.summonelementalgreatearth, combat_count: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell summonelementalgreatwatermoray = createCastSpellAction("summonelementalgreatwatermoray", Spells.summonelementalgreatwater,
    new Consideration[] { },
    new Consideration[] { },
 base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell coldicestrike = createCastSpellAction("Castcoldicestrike", Spells.coldicestrike,
            new Consideration[] { },
                new Consideration[] { },
            base_score: 20.0f, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell coldicestrikegardener = createCastSpellAction("Castcoldicestrikegardener", Spells.coldicestrike,
new Consideration[] { },
    new Consideration[] { },
base_score: 20.0f, combat_count: 3, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell healspell = createCastSpellAction("Casthealspell", Spells.heal,
         new Consideration[] { },
         new Consideration[] { TargetSelf, HealSpellConsideration },
         base_score: 20.0f, cooldown_rounds: 3);

            static public BlueprintAiCastSpell righteousmightgoblinshaman = createCastSpellAction("Castrighteousmightgoblinshaman", Spells.righteousmight,
                 new Consideration[] { },
                 new Consideration[] { },
                 base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell righteousmightinquisitor = createCastSpellAction("Castrighteousmightinquisitor", Spells.righteousmight,
     new Consideration[] { },
     new Consideration[] { },
     base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell bladebarriergoblinshaman = createCastSpellAction("Castbladebarriergoblinshaman", Spells.bladebarrier,
                new Consideration[] { },
                 new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
            base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell prayergoblinshaman = createCastSpellAction("Castprayergoblinshaman", Spells.prayer,
                                   new Consideration[] { },
                                   new Consideration[] { AlliesNoBuff_Prayer, EnemiesNoDebuff_Prayer },
                     base_score: 10.0f, combat_count: 2);

            static public BlueprintAiCastSpell flamestrikegoblinshaman = createCastSpellAction("Castflamestrikegoblinshaman", Spells.flamestrike,
                       new Consideration[] { },
                       new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
         base_score: 10.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell hideouslaughterbanditbard = createCastSpellAction("Casthideouslaughterbanditbard", Spells.hideouslaughter,
             new Consideration[] { },
             new Consideration[] { attacktargetspriority, NoBuffHideousLaughter, IntGreaterThan2 },
             base_score: 3.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell summonmonsterII = createCastSpellAction("CastsummonmonsterII", Spells.summonmonsterII,
        new Consideration[] { },
        new Consideration[] { },
        base_score: 20.0f, variant: Spells.summonmonsterIIsingle, combat_count: 1);

            static public BlueprintAiCastSpell blesscast = createCastSpellAction("Castbless", Spells.bless,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Bless },
base_score: 20.0f, combat_count: 1);


            static public BlueprintAiCastSpell blesscastpitax = createCastSpellAction("Castblesspitax", Spells.bless,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Bless },
base_score: 50.0f, combat_count: 1);

            static public BlueprintAiCastSpell divinefavor = createCastSpellAction("Castdivinefavor", Spells.divinefavor,
new Consideration[] { NoBuff_DivineFavor },
new Consideration[] { },
base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell holdpersondelay = createCastSpellAction("Castholdpersondelay", Spells.holdperson,
        new Consideration[] { },
        new Consideration[] { attacktargetspriority },
        base_score: 3.0f, combat_count: 2, cooldown_rounds: 1);

            static public BlueprintAiCastSpell holdpersonhellknight = createCastSpellAction("Castholdpersonhellknight", Spells.holdperson,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, combat_count: 3, cooldown_rounds: 2);

            static public BlueprintAiCastSpell holdpersondelaybanditcleric = createCastSpellAction("Castholdpersonbanditdelay", Spells.holdperson,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 3.0f, combat_count: 3, cooldown_rounds: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castshieldoffaith = createCastSpellAction("Castshieldoffaith", Spells.shieldoffaith,
new Consideration[] { },
new Consideration[] { TargetSelf, NoBuffShieldofFaith },
base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castshieldoffaithdelay = createCastSpellAction("Castshieldoffaithdelay", Spells.shieldoffaith,
new Consideration[] { },
new Consideration[] { TargetSelf, NoBuffShieldofFaith },
base_score: 40.0f, combat_count: 1);

            static public BlueprintAiCastSpell castdivinepowerdelay = createCastSpellAction("Castdivinepowerdelay", Spells.divinepower,
new Consideration[] { },
new Consideration[] { TargetSelf },
base_score: 40.0f, combat_count: 1);

            static public BlueprintAiCastSpell castdivinepowerdelaypitax = createCastSpellAction("Castdivinepowerdelaypitax", Spells.divinepower,
new Consideration[] { },
new Consideration[] { TargetSelf },
base_score: 40.0f, combat_count: 2, cooldown_rounds: 5, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castshieldoffaithgorum = createCastSpellAction("castshieldoffaithgorum", Spells.shieldoffaith,
new Consideration[] { },
new Consideration[] { TargetSelf, },
base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell blurcast = createCastSpellAction("Castblur", Spells.blur,
             new Consideration[] { },
             new Consideration[] { NoBuffBlur, TargetSelf },
          base_score: 90.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell summonmonsterIIId3 = createCastSpellAction("CastsummonmonsterIIId3", Spells.summonmonsterIII,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, variant: Spells.summonmonsterIIId3, combat_count: 1);

            static public BlueprintAiCastSpell summonelementalsmallearth = createCastSpellAction("CastSummonelementalsmall", Spells.summonelementalsmall,
    new Consideration[] { },
    new Consideration[] { },
 base_score: 20.0f, variant: Spells.summonelementalsmallearth, combat_count: 1);

            static public BlueprintAiCastSpell holdpersondsineshal = createCastSpellAction("Castholdpersondsineshal", Spells.holdperson,
            new Consideration[] { },
            new Consideration[] { attacktargetspriority },
            base_score: 3.0f, combat_count: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell earthaciddart = createCastSpellAction("Castearthaciddart", Spells.earthaciddart,
           new Consideration[] { },
            new Consideration[] { },
            base_score: 3.0f, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell earthaciddartearlier = createCastSpellAction("Castearthaciddartearlier", Spells.earthaciddart,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 3.0f, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castshout = createCastSpellAction("Castshout", Spells.shout,
            new Consideration[] { },
            new Consideration[] { AoE_AvoidFriends,AOE_ChooseMoreEnemies },
            base_score: 3.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 2);



            static public BlueprintAiCastSpell throwcursedbombdeter = createCastSpellAction("throwcursedbombdeter", Spells.cursedbombdeterioration,
            new Consideration[] { },
            new Consideration[] { AOE_ChooseMoreEnemies, ChaoticBehavior },
            base_score: 20.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell throwacidbomb = createCastSpellAction("throwacidbomb", Spells.acidbomb,
             new Consideration[] { },
             new Consideration[] { AOE_ChooseMoreEnemies, ChaoticBehavior },
            base_score: 20.0f, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castheroism = createCastSpellAction("castheroism", Spells.heroism,
            new Consideration[] { },
            new Consideration[] { AlliesNoBuff_Heroism, TargetSelf },
            base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell greaterdispelvordakai = createCastSpellAction("CastGreaterDispelvordakai", Spells.greaterdispel,
            new Consideration[] { },
            new Consideration[] { AOE_ChooseMoreEnemies },
            base_score: 50.0f, variant: Spells.greaterdispelarea, combat_count: 1);

            static public BlueprintAiCastSpell castslowvordakai = createCastSpellAction("castslowvordakai", Spells.slow,
            new Consideration[] { },
            new Consideration[] { attacktargetspriority, NoBuffSlow },
            base_score: 20.0f, cooldown_rounds: 3, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell horridwiltingvordakai = createCastSpellAction("CastHorridWiltingVordakai", Spells.horrid_wilting,
         new Consideration[] { },
         new Consideration[] { },
         base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castmagearmorvordakai = createCastSpellAction("Castmagearmorvordakai", Spells.magearmor,
            new Consideration[] { },
            new Consideration[] { NoBuffMageArmor },
            base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 6);

            static public BlueprintAiCastSpell castfingerofdeathvordakai = createCastSpellAction("castfingerofdeathvordakai", Spells.fingerofdeath,
            new Consideration[] { },
            new Consideration[] { ArcaneCasterFocusConsiderationVordakai, IgnoreControlledConsiderationVordakai },
            base_score: 20.0f, combat_count: 3, start_cooldown_rounds: 5, cooldown_rounds: 2);

            static public BlueprintAiCastSpell displacementvordakai = createCastSpellAction("Castdisplacementvordakai", Spells.displacement,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { NoBuffDisplacement, TargetSelf },
                                                                         base_score: 30.0f, pre_cast: true);

            static public BlueprintAiCastSpell inflictmoderatemass = createCastSpellAction("CastInflictmoderateWoundsMass", Spells.inflictmoderatewoundmass,
            new Consideration[] { },
            new Consideration[] { AOE_ChooseMoreEnemies },
             base_score: 20.0f, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castmoonfire = createCastSpellAction("Castmoonfire", Spells.DarknessDomainGreaterAbility,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 20.0f, start_cooldown_rounds: 4, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castresistfirecommunal = createCastSpellAction("Castresistfirecommunal", Spells.Resistenergycommunal,
            new Consideration[] { },
            new Consideration[] { AlliesNoBuff_ResistFire },
            base_score: 20.0f, variant: Spells.ResistFirecommunal);


            static public BlueprintAiCastSpell castresistfirecommunalgaetane = createCastSpellAction("Castresistfirecommunalgaetane", Spells.Resistenergycommunal,
            new Consideration[] { },
            new Consideration[] { AlliesNoBuff_ResistFire },
            base_score: 50.0f, variant: Spells.ResistFirecommunal, combat_count: 1, start_cooldown_rounds: 3 );

            static public BlueprintAiCastSpell castboneshaker = createCastSpellAction("Castboneshaker", Spells.boneshaker,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { LongRange },
                                                                         base_score: 10.0f, start_cooldown_rounds: 3, cooldown_rounds: 1);

            static public BlueprintAiCastSpell castboneshakerghostmage = createCastSpellAction("Castboneshakerghostmage", Spells.boneshaker,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { LongRange },
                                                                         base_score: 8.0f, start_cooldown_rounds: 7);

            static public BlueprintAiCastSpell castbullsmass = createCastSpellAction("Castbullsmass", Spells.bullsmass,
                                                             new Consideration[] { },
                                                             new Consideration[] { },
                                                             base_score: 20.0f, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castbullsmasspitax = createCastSpellAction("Castbullsmasspitax", Spells.bullsmass,
                                                 new Consideration[] { },
                                                 new Consideration[] { },
                                                 base_score: 50.0f, combat_count: 1);

            static public BlueprintAiCastSpell castowlswisdom = createCastSpellAction("Castowlswisdom", Spells.owlswisdom,
                                                 new Consideration[] { },
                                                 new Consideration[] { AlliesNoBuff_OwlsWisdom, TargetSelf },
                                                 base_score: 20.0f, start_cooldown_rounds: 3, pre_cast: true);

            static public BlueprintAiCastSpell constrictingcoilszombie = createCastSpellAction("Castconstrictingcoilszombie", Spells.constrictingcoils,
        new Consideration[] { },
        new Consideration[] { SupporCasterFocusConsideration },
        base_score: 20.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell protectionfromfirecommunal = createCastSpellAction("Castprotectionfromfirecommunal", Spells.protectionfromenergycommunal,
            new Consideration[] { },
            new Consideration[] { AlliesNoBuff_ProtectionFromFire },
            base_score: 30.0f, variant: Spells.protectionfromfirecommunal);

            static public BlueprintAiCastSpell castfingerofdeathastraldaemonguard = createCastSpellAction("castfingerofdeathastraldaemonguard", Spells.fingerofdeath,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority },
    base_score: 20.0f, cooldown_rounds: 5);

            static public BlueprintAiCastSpell dragonsbreathgreen = createCastSpellAction("Castdragonsbreathgreen", Spells.dragonsbreath,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
    base_score: 20.0f, variant: Spells.dragonsbreathgreen, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castfiresnake = createCastSpellAction("Castfiresnake", Spells.firesnake,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
    base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell castfiresnakeogre = createCastSpellAction("Castfiresnakeogre", Spells.firesnake,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell stoneskincommunalsprig = createCastSpellAction("caststoneskincommunalsprig", Spells.stoneskincommunal,
     new Consideration[] { },
     new Consideration[] { AlliesNoBuff_Stoneskin },
    base_score: 30.0f, combat_count: 1);

            static public BlueprintAiCastSpell castcontrolledfireball = createCastSpellAction("castcontrolledfireball", Spells.controlledfireball,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
    base_score: 30.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castcontrolledfireballwyvern = createCastSpellAction("castcontrolledfireballwyvern", Spells.controlledfireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, cooldown_rounds: 5);

            static public BlueprintAiCastSpell castcontrolledfireballstrongwyvern = createCastSpellAction("castcontrolledfireballstrongwyvern", Spells.controlledfireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castmagearmorsprig = createCastSpellAction("castmagearmorsprig", Spells.magearmor,
    new Consideration[] { },
    new Consideration[] { NoBuffMageArmor, TargetSelf },
    base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castshieldsprig = createCastSpellAction("castshieldsprig", Spells.shield,
    new Consideration[] { },
    new Consideration[] { NoBuffShieldBuff },
    base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castslowsprig = createCastSpellAction("castslowsprig", Spells.slow,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, NoBuffSlow },
    base_score: 20.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell cleavesprig = createCastSpellAction("UseCleavesprig", Spells.cleaveaction,
new Consideration[] { units_around },
new Consideration[] { attacktargetspriority },
base_score: 10.0f, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell bullrush = createCastSpellAction("Usebullrush", Spells.bullrushability,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 10.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell charge = createCastSpellAction("Usecharge", Spells.chargeability,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell scorchingraydelay = createCastSpellAction("castscorchingraydelay", Spells.scorchingray,
                   new Consideration[] { },
                  new Consideration[] { attacktargetspriority },
                 base_score: 30.0f, cooldown_rounds: 1, start_cooldown_rounds: 3);


            static public BlueprintAiCastSpell usedisarm = createCastSpellAction("usedisarm", Spells.disarm,
                     new Consideration[] { },
                 new Consideration[] { attacktargetspriority, NoDisarmBuff },
                base_score: 20.0f, cooldown_rounds: 3, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell useterrifyinghowl = createCastSpellAction("useterrifyinghowl", Spells.terrifyinghowl,
            new Consideration[] { },
            new Consideration[] { attacktargetspriority },
            base_score: 40.0f);

            static public BlueprintAiCastSpell castcommand = createCastSpellAction("castcommand", Spells.command,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, variant: Spells.command1, combat_count: 5);

            static public BlueprintAiCastSpell castfrigidtouch = createCastSpellAction("castfrigidtouch", Spells.frigidtouch,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffStaggered },
base_score: 40.0f, cooldown_rounds: 2, combat_count: 4, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castfrigidtouchmagus = createCastSpellAction("castfrigidtouchmagus", Spells.frigidtouch,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffStaggered },
base_score: 40.0f, cooldown_rounds: 2, combat_count: 4, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castfrigidtouchogre = createCastSpellAction("castfrigidtouchogre", Spells.frigidtouch,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffStaggered },
base_score: 40.0f, cooldown_rounds: 2, combat_count: 4, start_cooldown_rounds: 11);

            static public BlueprintAiCastSpell castfrigidtouchlostsister = createCastSpellAction("castfrigidtouchlostsister", Spells.frigidtouch,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffStaggered },
base_score: 40.0f, cooldown_rounds: 1, start_cooldown_rounds: 10);

            static public BlueprintAiCastSpell castvampirictouch = createCastSpellAction("castvampirictouch", Spells.vampirictouch,
new Consideration[] { NoBuffVampiricTouch },
new Consideration[] { attacktargetspriority, NotUndead },
base_score: 40.0f, cooldown_rounds: 3, combat_count: 2, start_cooldown_rounds: 5);


            static public BlueprintAiCastSpell castvampirictouchogre = createCastSpellAction("castvampirictouchogre", Spells.vampirictouch,
new Consideration[] { NoBuffVampiricTouch },
new Consideration[] { attacktargetspriority, NotUndead },
base_score: 40.0f, cooldown_rounds: 3, combat_count: 2, start_cooldown_rounds: 12);

            static public BlueprintAiCastSpell castvampirictouchowlbear = createCastSpellAction("castvampirictouchowlbear", Spells.vampirictouch,
new Consideration[] { NoBuffVampiricTouch },
new Consideration[] { attacktargetspriority, NotUndead },
base_score: 40.0f, cooldown_rounds: 3);

            static public BlueprintAiCastSpell mirrorimageowlbear = createCastSpellAction("Castmirrorimageowlbear", Spells.mirrorimage,
new Consideration[] { },
new Consideration[] { NoBuffMirrorImage },
base_score: 20.0f, cooldown_rounds: 6, start_cooldown_rounds: 4, pre_cast: true);

            static public BlueprintAiCastSpell castfiresnakeowlbear = createCastSpellAction("castfiresnakeowlbear", Spells.firesnake,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 20.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castphantasmalkiller = createCastSpellAction("castphantasmalkiller", Spells.phantasmalkiller,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, cooldown_rounds: 3, combat_count: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castphantasmalkillermagus = createCastSpellAction("castphantasmalkillermagus", Spells.phantasmalkiller,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, cooldown_rounds: 3, combat_count: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castcatsgrace = createCastSpellAction("Castcatsrace", Spells.catsgrace,
                                                 new Consideration[] { },
                                                 new Consideration[] { AlliesNoBuff_CatsGrace },
                                                 base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell mirrorimagecyclop = createCastSpellAction("Castmirrorimagecyclop", Spells.mirrorimage,
    new Consideration[] { },
    new Consideration[] { NoBuffMirrorImage },
    base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 12, pre_cast: true);

            static public BlueprintAiCastSpell castshockgrasp = createCastSpellAction("castshockgrasp", Spells.shockinggrasp,
            new Consideration[] { },
            new Consideration[] { attacktargetspriority },
            base_score: 40.0f, cooldown_rounds: 3, combat_count: 4, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castshockgraspogre = createCastSpellAction("castshockgraspogre", Spells.shockinggrasp,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, cooldown_rounds: 3, combat_count: 4, start_cooldown_rounds: 13);

            static public BlueprintAiCastSpell usedimensionstrike = createCastSpellAction("usedimensionstrike", Spells.dimensionstrike,
        new Consideration[] { StandardActionOffCooldown },
        new Consideration[] { attacktargetspriority },
        base_score: 40.0f, combat_count: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castcontrolledfireballsister = createCastSpellAction("castcontrolledfireballsister", Spells.controlledfireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 1, cooldown_rounds: 3, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castfireballtartuk = createCastSpellAction("castfireballtartuk", Spells.fireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castfireball = createCastSpellAction("castfireball", Spells.fireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 30.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell casthastetartuk = createCastSpellAction("casthastetartuk", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 30.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell casthastebanditnecro = createCastSpellAction("casthastebanditnecro", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 60.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castvolcanicstorm = createCastSpellAction("castvolcanicstorm ", Spells.volcanicstorm,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 1, cooldown_rounds: 3, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castgreaterdispellsister = createCastSpellAction("Castgreaterdispellsister", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 19.0f, variant: Spells.greaterdispelarea, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castfiresnakesister = createCastSpellAction("Castfiresnakesister", Spells.firesnake,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 4);


            static public BlueprintAiCastSpell castfiresnakemagus = createCastSpellAction("Castfiresnakemagus", Spells.firesnake,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castflamestrikesister = createCastSpellAction("Castflamestrikesister", Spells.flamestrike,
           new Consideration[] { },
           new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 10.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell calllightningsister = createCastSpellAction("calllightningsister", Spells.calllightning,
     new Consideration[] { },
     new Consideration[] { attacktargetspriority },
    base_score: 3.0f, combat_count: 3, cooldown_rounds: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell calllightninglostsister = createCastSpellAction("calllightninglostsister", Spells.calllightningstormlightning,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 20.0f, cooldown_rounds: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castsnowballsister = createCastSpellAction("castsnowballsister", Spells.snowball,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 3.0f, combat_count: 3, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castsnowballlostsister = createCastSpellAction("castsnowballlostsister", Spells.snowball,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 3.0f, cooldown_rounds: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castsnowballwitch = createCastSpellAction("castsnowballwitch", Spells.snowball,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 3.0f, cooldown_rounds: 1);



            static public BlueprintAiCastSpell castburstofnettles = createCastSpellAction("castburstofnettles", Spells.burstofnettles,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 3.0f, combat_count: 3, cooldown_rounds: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castflurryofsnowballs = createCastSpellAction("castflurryofsnowballs", Spells.flurryofsnowballs,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 3.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castpoxpostules = createCastSpellAction("castpoxpostules", Spells.poxpostules,
new Consideration[] { },
new Consideration[] { attacktargetspriority, ArcaneCasterPriorityConsiderationVordakai },
base_score: 3.0f, combat_count: 2);

            static public BlueprintAiCastSpell righteousmightdugath = createCastSpellAction("Castrighteousmightdugath", Spells.righteousmight,
     new Consideration[] { },
     new Consideration[] { },
     base_score: 20.0f, combat_count: 1);


            static public BlueprintAiCastSpell usedirtytrickblind = createCastSpellAction("usedirtytrickblind", Spells.dirtytrickblindness,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 20.0f, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell usesummonghosts = createCastSpellAction("usesummonghosts", Spells.summonghosts,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell usesummonghosts2 = createCastSpellAction("usesummonghosts2", Spells.summonghosts2,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell usesummonrangedfriends = createCastSpellAction("usesummonrangedfriends", Spells.summonrangedfriends,
new Consideration[] { },
new Consideration[] { },
base_score: 100.0f, combat_count: 1);

            static public BlueprintAiCastSpell usesummonundeadfriends = createCastSpellAction("usesummonundeadfriends", Spells.summonundeadfriends,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1);



            static public BlueprintAiCastSpell usedisarmspectre = createCastSpellAction("usedisarmspectre", Spells.disarm,
         new Consideration[] { },
     new Consideration[] { attacktargetspriority, NoDisarmBuff },
    base_score: 20.0f,  cooldown_rounds: 4, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castfingerofdeathastraldaemon = createCastSpellAction("castfingerofdeathastraldaemon", Spells.fingerofdeath,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 20.0f, cooldown_rounds: 5, combat_count: 3);

            static public BlueprintAiCastSpell castfearthanadaemon = createCastSpellAction("castfearthanadaemon", Spells.fear,
  new Consideration[] { },
  new Consideration[] { AOE_ChooseMoreEnemies },
  base_score: 10.0f, cooldown_rounds: 5);

            static public BlueprintAiCastSpell castwavesoffatigue = createCastSpellAction("castwavesoffatigue", Spells.wavesoffatigue,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 10.0f, combat_count: 2, cooldown_rounds: 5, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castblindness = createCastSpellAction("castblindness", Spells.blindness,
new Consideration[] { },
new Consideration[] { attacktargetspriority, ChaoticBehavior, NoBuffHoldMonster },
base_score: 10.0f, cooldown_rounds: 3, start_cooldown_rounds: 5);


            static public BlueprintAiCastSpell castblindnesswitch = createCastSpellAction("castblindnesswitch", Spells.blindness,
new Consideration[] { },
new Consideration[] { attacktargetspriority, ArcaneCasterFocusConsiderationVordakai, NoBuffHoldMonster },
base_score: 10.0f, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castcrushingdespair = createCastSpellAction("castcrushingdespair", Spells.crushingdespair,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffCrushingDespair, AOE_ChooseMoreEnemies },
base_score: 10.0f, cooldown_rounds: 2, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castcrushingdespairherald = createCastSpellAction("castcrushingdespairherald", Spells.crushingdespair,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffCrushingDespair, AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 1, cooldown_rounds: 2, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castcrushingdespairwyvern = createCastSpellAction("castcrushingdespairwyvern", Spells.crushingdespair,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffCrushingDespair, AOE_ChooseMoreEnemies },
base_score: 10.0f, cooldown_rounds: 5);

            static public BlueprintAiCastSpell castconfusionwyvern = createCastSpellAction("castconfusionwyvern", Spells.confusion,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffInsanity, NoBuffConfusion, AOE_ChooseMoreEnemies },
base_score: 10.0f, cooldown_rounds: 5);

            static public BlueprintAiCastSpell summonelementallargeair = createCastSpellAction("Castsummonelementallargeair", Spells.summonelementallarge,
    new Consideration[] { },
    new Consideration[] { },
    base_score: 20.0f, variant: Spells.summonelementallargeair, combat_count: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castboneshakerzombiewizard = createCastSpellAction("castboneshakerzombiewizard", Spells.boneshaker,
                                                             new Consideration[] { },
                                                             new Consideration[] { LongRange },
                                                             base_score: 10.0f, start_cooldown_rounds: 4, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castboneshatter = createCastSpellAction("castboneshatter", Spells.boneshatter,
                                                 new Consideration[] { },
                                                 new Consideration[] { LongRange },
                                                 base_score: 10.0f, start_cooldown_rounds: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castslayliving = createCastSpellAction("castslayliving", Spells.slayliving,
                                                 new Consideration[] { },
                                                 new Consideration[] { TouchInMeleeConsideration },
                                                 base_score: 10.0f, start_cooldown_rounds: 10);

            static public BlueprintAiCastSpell holdpersonzombiecleric = createCastSpellAction("Castholdpersonzombiecleric", Spells.holdperson,
        new Consideration[] { },
        new Consideration[] { attacktargetspriority, ChaoticBehavior },
        base_score: 20.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castbane = createCastSpellAction("Castbane", Spells.bane,
                         new Consideration[] { },
                         new Consideration[] { },
                         base_score: 10.0f, combat_count: 1);

            static public BlueprintAiCastSpell throwexplosivebombgoblin = createCastSpellAction("throwexplosivebombgoblin", Spells.explosivebomb,
 new Consideration[] { },
 new Consideration[] { AOE_ChooseMoreEnemies, ChaoticBehavior },
base_score: 20.0f, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell throwblindbombgoblin = createCastSpellAction("throwblindbombgoblin", Spells.blindbomb,
new Consideration[] { },
 new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 5);


            static public BlueprintAiCastSpell casthastegoblin = createCastSpellAction("casthastegoblin", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 20.0f, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castthrowbomb = createCastSpellAction("castthrowbomb", Spells.standartbomb,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castshieldgoblin = createCastSpellAction("castshieldgoblin", Spells.shield,
new Consideration[] { },
new Consideration[] { NoBuffShieldBuff },
base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castreducepersongoblin = createCastSpellAction("castreducepersongoblin", Spells.reduceperson,
new Consideration[] { },
new Consideration[] { NoBuffReducePerson, TargetSelf },
base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castdisplacementgoblin = createCastSpellAction("castdisplacementgoblin", Spells.displacement,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { NoBuffDisplacement, TargetSelf },
                                                                         base_score: 20.0f);

            static public BlueprintAiCastSpell dispel = createCastSpellAction("CastDispeltarget", Spells.dispel,
    new Consideration[] { },
    new Consideration[] { ChaoticBehavior },
    base_score: 19.0f, variant: Spells.dispeltarget, cooldown_rounds: 3, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castrayofsickening = createCastSpellAction("castrayofsickening", Spells.rayofsickening,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffsickened },
base_score: 19.0f, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell usesunderarmorzombiebarb = createCastSpellAction("usesunderarmorzombiebarb", Spells.sunderarmor,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffSunder, heavy_armor_consideration },
base_score: 20.0f, cooldown_rounds: 4, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell useweb = createCastSpellAction("Castweb", Spells.web,
     new Consideration[] { },
      new Consideration[] { AOE_ChooseMoreEnemies, LongRange },
     base_score: 50.0f, combat_count: 1);

            static public BlueprintAiCastSpell usephantasmalwebwitch = createCastSpellAction("usephantasmalwebwitch", Spells.phantasmalweb,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 50.0f, combat_count: 1);

            static public BlueprintAiCastSpell chainlightningelderair = createCastSpellAction("castchainlightningelderair", Spells.chainlightning,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority },
    base_score: 20.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell acidicsprayelderearth = createCastSpellAction("castacidicsprayelderearth", Spells.acidicspray,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell firesnakeelderfire = createCastSpellAction("Castfiresnakeelderfire", Spells.firesnake,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell coneofcoldelderwater = createCastSpellAction("coneofcoldelderwater", Spells.coneofcold,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell coneofcoldghostmage = createCastSpellAction("coneofcoldghost", Spells.coneofcold,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell lightningboltairelemental = createCastSpellAction("castlightningboltairelemental", Spells.lightningbolt,
     new Consideration[] { },
     new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
base_score: 3.0f, combat_count: 3, cooldown_rounds: 4);

            static public BlueprintAiCastSpell dragonsbreathearthelemental = createCastSpellAction("Castdragonsbreathearthelemental", Spells.dragonsbreathgreen,
                new Consideration[] { },
                new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
            base_score: 20.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell controlledfireballfireelemental = createCastSpellAction("castcontrolledfireballfireelemental", Spells.controlledfireball,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
    base_score: 30.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell dragonsbreathwaterelemental = createCastSpellAction("Castdragonswaterearthelemental", Spells.dragonsbreathsilver,
                new Consideration[] { },
                new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
            base_score: 40.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell dragonsbreathsilverhydra = createCastSpellAction("Castdragonsbreathsilverhydra", Spells.dragonsbreathsilver,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 40.0f, cooldown_rounds: 3);

            static public BlueprintAiCastSpell dragonsbreathgoldhydra = createCastSpellAction("Castdragonsbreathgoldhydra", Spells.dragonsbreathgold,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 40.0f, cooldown_rounds: 4);


            static public BlueprintAiCastSpell dragonsbreathgoldwyvern = createCastSpellAction("Castdragonsbreathgoldwyvern", Spells.dragonsbreathgold,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 40.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell acidarrowearthelemental = createCastSpellAction("Castacidarrowearthelemental", Spells.acidarrow,
       new Consideration[] { },
      new Consideration[] { attacktargetspriority },
     base_score: 3.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell burninarcfireelemental = createCastSpellAction("Castburninarcfireelemental", Spells.burningarc,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 3.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castsnowballwaterelemental = createCastSpellAction("castsnowballwaterelemental", Spells.snowball,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 3.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castsoundburst = createCastSpellAction("castsoundburst", Spells.soundburst,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 3.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 3);



            static public BlueprintAiCastSpell usedirtytrickblinddovan = createCastSpellAction("usedirtytrickblinddovan", Spells.dirtytrickblindness,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, cooldown_rounds: 3, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell throwexplosivebombbandit = createCastSpellAction("throwexplosivebombbandit", Spells.explosivebomb,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, ChaoticBehavior },
base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell castenlargemass = createCastSpellAction("Castenlargemass", Spells.EnlargePersonMass,
               new Consideration[] { },
               new Consideration[] { AlliesNoBuff_EnlargePerson },
               base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell usewildshapebear = createCastSpellAction("usewildshapebear", Spells.WildshapeBear,
               new Consideration[] { },
               new Consideration[] { },
               base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castbullsstrength = createCastSpellAction("Castbullsstrength", Spells.bullsstrength,
                                     new Consideration[] { },
                                     new Consideration[] { NoBuffBullStrength, TargetSelf },
                                     base_score: 20.0f, pre_cast: true);

            static public BlueprintAiCastSpell castbalefulpolymorphwitch = createCastSpellAction("castbalefulpolymorphwitch", Spells.balefulpolymorph,
                         new Consideration[] { },
                         new Consideration[] { NoBuffBalefulPolymorph, ArcaneCasterFocusConsiderationVordakai, attacktargetspriority },
                         base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castsummonmonsterIV = createCastSpellAction("CastSummonMonsterIVSingle", Spells.summonmonsterIV,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, variant: Spells.summonmonsterIVsingle, combat_count: 1);

            static public BlueprintAiCastSpell castnegativeenergyghostcleric = createCastSpellAction("castnegativeenergyghostcleric", Spells.channelnegativeenergyharmbase,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, variant: Spells.channelnegativeenergy, combat_count: 9, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castchannelpositivecleric = createCastSpellAction("castchannelpositivecleric", Spells.channelpositivehealbase,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, variant: Spells.channelpositiveenergy, combat_count: 6, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castchannelpositivepitax = createCastSpellAction("castchannelpositivepitax", Spells.channelpositivehealbase,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, variant: Spells.channelpositiveenergy, combat_count: 6, cooldown_rounds: 3, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castinvisibilitygreater = createCastSpellAction("castinvisibilitygreater", Spells.InvisibilityGreater,
new Consideration[] { },
new Consideration[] { NoBuffInvisibilityGreater, TargetSelf },
base_score: 40.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castaid = createCastSpellAction("castaid", Spells.aid,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Aid, TargetSelf },
base_score: 40.0f, combat_count: 1);

            static public BlueprintAiCastSpell castfester = createCastSpellAction("castfester", Spells.fester,
new Consideration[] { },
new Consideration[] { ArcaneCasterFocusConsiderationVordakai, attacktargetspriority },
base_score: 40.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castserenity = createCastSpellAction("castserenity", Spells.serenity,
new Consideration[] { },
new Consideration[] { },
base_score: 40.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castcolorspray = createCastSpellAction("castcolorspray", Spells.colorspray,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AoE_AvoidFriends, AOE_ChooseMoreEnemies },
base_score: 40.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell scorchingraydelaydryad = createCastSpellAction("castscorchingraydelaydryad", Spells.scorchingray,
       new Consideration[] { },
      new Consideration[] { attacktargetspriority },
     base_score: 30.0f, cooldown_rounds: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell earpiercedryad = createCastSpellAction("castearpiercedryad", Spells.earpiercescream,
new Consideration[] { },
 new Consideration[] { attacktargetspriority },
base_score: 20.0f, combat_count: 4, start_cooldown_rounds: 2, cooldown_rounds: 1);


            static public BlueprintAiCastSpell earpierceherald = createCastSpellAction("castearpierceherald", Spells.earpiercescream,
new Consideration[] { },
 new Consideration[] { attacktargetspriority },
base_score: 20.0f, combat_count: 4, start_cooldown_rounds: 8, cooldown_rounds: 2);

            static public BlueprintAiCastSpell earpierceirovetti = createCastSpellAction("castearpierceirovetti", Spells.earpiercescream,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 10.0f, start_cooldown_rounds: 8, cooldown_rounds: 1);

            static public BlueprintAiCastSpell dragonsbreathgreenhydra = createCastSpellAction("Castdragonsbreathgreenhydra", Spells.dragonsbreath,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 20.0f, variant: Spells.dragonsbreathgreen, cooldown_rounds: 4);

            static public BlueprintAiCastSpell dragonsbreathgreenwyvern = createCastSpellAction("Castdragonsbreathgreenwyvern", Spells.dragonsbreath,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 20.0f, variant: Spells.dragonsbreathgreen, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castoverwhelminggriefmanticore = createCastSpellAction("castoverwhelminggriefmanticore", Spells.overwhelminggrief,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffOverwhelmingGrief },
base_score: 20.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castoverwhelminggriefzombie = createCastSpellAction("castoverwhelminggriefzombie", Spells.overwhelminggrief,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffOverwhelmingGrief },
base_score: 20.0f, cooldown_rounds: 2, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castoverwhelminggriefherald = createCastSpellAction("castoverwhelminggriefherald", Spells.overwhelminggrief,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffOverwhelmingGrief },
base_score: 20.0f, combat_count: 1, cooldown_rounds: 2, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell usegreatershoutbird = createCastSpellAction("usegreatershoutbird", Spells.greatershout,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 20.0f, cooldown_rounds: 8);


            static public BlueprintAiCastSpell casticyprison = createCastSpellAction("casticyprison", Spells.icyprison,
new Consideration[] { },
new Consideration[] { attacktargetspriority, SupporCasterFocusConsideration },
base_score: 20.0f, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castprofanenimbus = createCastSpellAction("castprofanenimbus", Spells.profanenimbus,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell usewildshapesmilidon = createCastSpellAction("usewildshapesmilidon", Spells.wildshapesmilodon,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, pre_cast: true);

            static public BlueprintAiCastSpell bansheeblastghostmage = createCastSpellAction("CastBansheeBlastghostmage", Spells.bansheeblast,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell barkskingoblinsister = createCastSpellAction("Castbarkskinsister", Spells.barkskin,
new Consideration[] { NoBuffBarkskin },
new Consideration[] { },
 base_score: 10.0f, pre_cast: true);

            static public BlueprintAiCastSpell burninarcnixie = createCastSpellAction("Castburninarcnixie", Spells.burningarc,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 3.0f, cooldown_rounds: 1);

            static public BlueprintAiCastSpell castaspectfalcon = createCastSpellAction("castaspectfalcon", Spells.aspectofthefalcon,
                         new Consideration[] { },
                         new Consideration[] { },
                         base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castblessingsalamander = createCastSpellAction("castblessingsalamander", Spells.blessingofthesalamander,
             new Consideration[] { },
             new Consideration[] {TargetSelf},
             base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castboneshatterghostmage = createCastSpellAction("castboneshatterghostmage", Spells.boneshatter,
                                    new Consideration[] { },
                                    new Consideration[] { LongRange },
                                    base_score: 20.0f, start_cooldown_rounds: 2, cooldown_rounds: 1);

            static public BlueprintAiCastSpell castboneshatterghostmageiro = createCastSpellAction("castboneshatterghostmageiro", Spells.boneshatter,
                        new Consideration[] { },
                        new Consideration[] { LongRange },
                        base_score: 10.0f, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castburstofglory = createCastSpellAction("castburstofglory", Spells.burstofglory,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castcastigatemass = createCastSpellAction("castcastigatemass", Spells.castigatemass,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castfestermass = createCastSpellAction("castfestermass", Spells.festermass,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castchainlightningbloodmoon = createCastSpellAction("castchainlightningbloodmoon", Spells.chainlightning,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 20.0f, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castconfusionhamadryad = createCastSpellAction("castconfusionhamadryad", Spells.confusion,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffInsanity, NoBuffConfusion, AOE_ChooseMoreEnemies },
base_score: 10.0f, combat_count: 3, cooldown_rounds: 5);

            static public BlueprintAiCastSpell entanglehamadryad = createCastSpellAction("Castentanglehamadryad", Spells.entangle,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 6, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castdisplacementbloodmoon = createCastSpellAction("castdisplacementbloodmoon", Spells.displacement,
                                                          new Consideration[] { },
                                                          new Consideration[] { NoBuffDisplacement, TargetSelf },
                                                          base_score: 30.0f, combat_count: 1,pre_cast: true);

            static public BlueprintAiCastSpell coneofcoldbloodmoon = createCastSpellAction("coneofcoldbloodmoon", Spells.coneofcold,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 20.0f, combat_count: 3, cooldown_rounds: 3);

            static public BlueprintAiCastSpell casticyprisonbloodmoon = createCastSpellAction("casticyprisonbloodmoon", Spells.icyprison,
new Consideration[] { },
new Consideration[] { attacktargetspriority, SupporCasterFocusConsideration, ChaoticBehavior },
base_score: 20.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castecholocation = createCastSpellAction("Castecholocation", Spells.echolocation,
new Consideration[] { },
new Consideration[] { },
base_score: 10.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castflurryofsnowballssister = createCastSpellAction("castflurryofsnowballssister", Spells.flurryofsnowballs,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 3.0f, combat_count: 2, cooldown_rounds: 1, start_cooldown_rounds: 7);

            static public BlueprintAiCastSpell castfreedomofmovementshamble = createCastSpellAction("castfreedomofmovementshamble", Spells.freedomofmovement,
             new Consideration[] { AlliesNoBuff_FreedomOfMovement },
             new Consideration[] { DisabledMovementCondition, TargetSelf },
             base_score: 30.0f, combat_count: 1, pre_cast:true);

            static public BlueprintAiCastSpell castgreaterdispellsisterabandoned = createCastSpellAction("Castgreaterdispellsisterabandoned", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 19.0f, variant: Spells.greaterdispelarea, combat_count: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell casthasteghostmage = createCastSpellAction("casthasteghostmage", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 30.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell casthasteghostmageiro = createCastSpellAction("casthasteghostmageiro", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 70.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell casticyprisonghostmage = createCastSpellAction("casticyprisonghostmage", Spells.icyprison,
new Consideration[] { },
new Consideration[] { attacktargetspriority, SupporCasterFocusConsideration },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castmirrorimagebloodmoon = createCastSpellAction("Castmirrorimagebloodmoon", Spells.mirrorimage,
    new Consideration[] { },
    new Consideration[] { NoBuffMirrorImage },
    base_score: 20.0f, combat_count: 2, cooldown_rounds: 6, pre_cast: true);

            static public BlueprintAiCastSpell castphantasmalputrificationghostmage = createCastSpellAction("castphantasmalputrificationghostmage", Spells.phantasmalputrification,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castsearinglightbandit = createCastSpellAction("castsearinglightbandit", Spells.searing_light,
              new Consideration[] { },
              new Consideration[] { attacktargetspriority },
              base_score: 20.0f, combat_count: 2, start_cooldown_rounds: 6, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castsearinglighthellknight = createCastSpellAction("castsearinglighthellknight", Spells.searing_light,
  new Consideration[] { },
  new Consideration[] { attacktargetspriority },
  base_score: 40.0f, combat_count: 2, cooldown_rounds:1);

            static public BlueprintAiCastSpell castshieldoffaithzorek = createCastSpellAction("Castshieldoffaithzorek", Spells.shieldoffaith,
new Consideration[] { },
new Consideration[] { TargetSelf, NoBuffShieldofFaith },
base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 6, pre_cast: true);

            static public BlueprintAiCastSpell castangelicaspectzorek = createCastSpellAction("Castangelicaspectzorek", Spells.angelicaspect,
new Consideration[] { },
new Consideration[] { TargetSelf },
base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 6);

            static public BlueprintAiCastSpell castshockgraspsister = createCastSpellAction("castshockgraspsister", Spells.shockinggrasp,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, cooldown_rounds: 1, combat_count: 2);

            static public BlueprintAiCastSpell castsickeningentangle = createCastSpellAction("castsickeningentangle", Spells.SickeningEntangle,
                         new Consideration[] { },
                         new Consideration[] { AOE_ChooseMoreEnemies },
                         base_score: 50.0f, combat_count: 1);

            static public BlueprintAiCastSpell castslaylivingdevourer = createCastSpellAction("castslaylivingdevourer", Spells.slayliving,
                         new Consideration[] { },
                         new Consideration[] { TouchInMeleeConsideration },
                         base_score: 10.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castslowghostmage = createCastSpellAction("castslowghostmage", Spells.slow,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffSlow },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castslowstonegolem = createCastSpellAction("castslowstonegolem", Spells.slow,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffSlow },
base_score: 20.0f, cooldown_rounds: 3);

            static public BlueprintAiCastSpell caststormboltbloodmoon = createCastSpellAction("caststormboltbloodmoon", Spells.stormbolt,
             new Consideration[] { },
             new Consideration[] { },
             base_score: 30.0f, combat_count: 2, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castvinetrap = createCastSpellAction("CastVineTrap", Spells.vinetrap,
             new Consideration[] { },
             new Consideration[] { attacktargetspriority, SupporCasterFocusConsideration },
             base_score: 10.0f, combat_count: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castwavesofecstasy = createCastSpellAction("castwavesofecstasy", Spells.wavesofecstasy,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 1);

            static public BlueprintAiCastSpell chainlightningsister = createCastSpellAction("chainlightningsister", Spells.chainlightning,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell chainlightninggardener = createCastSpellAction("chainlightninggardener", Spells.chainlightning,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell chainsoflight = createCastSpellAction("Castchainsoflight", Spells.chainsoflight,
new Consideration[] { },
new Consideration[] { SupporCasterFocusConsideration },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell coldicestrikeghostmage = createCastSpellAction("Castcoldicestrikeghostmage", Spells.coldicestrike,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell coldicestrikeghostmageiro = createCastSpellAction("Castcoldicestrikeghostmageiro", Spells.coldicestrike,
new Consideration[] { },
new Consideration[] { },
base_score: 80.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell displacementghostmage = createCastSpellAction("Castdisplacementghostmage", Spells.displacement,
                                                                         new Consideration[] { },
                                                                         new Consideration[] { NoBuffDisplacement, TargetSelf },
                                                                         base_score: 30.0f, combat_count: 1, cooldown_rounds: 4,pre_cast:true);

            static public BlueprintAiCastSpell flamestrikebandit = createCastSpellAction("Castflamestrikebandit", Spells.flamestrike,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 25.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell inflictmoderatemassbloodybones = createCastSpellAction("inflictmoderatemassbloodybones", Spells.inflictmoderatewoundmass,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, attacktargetspriority },
base_score: 20.0f, combat_count: 3, cooldown_rounds: 3);

            static public BlueprintAiCastSpell lightningboltsister = createCastSpellAction("lightningboltsister", Spells.lightningbolt,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
base_score: 5.0f, combat_count: 4);

            static public BlueprintAiCastSpell prayerbandit = createCastSpellAction("Castprayerbandit", Spells.prayer,
           new Consideration[] { },
           new Consideration[] { AlliesNoBuff_Prayer, EnemiesNoDebuff_Prayer },
base_score: 30.0f, combat_count: 2);

            static public BlueprintAiCastSpell righteousmightbandit = createCastSpellAction("Castrighteousmightbandit", Spells.righteousmight,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 8);

            static public BlueprintAiCastSpell stoneskincommunalghostmage = createCastSpellAction("caststoneskincommunalghostmage", Spells.stoneskincommunal,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
base_score: 40.0f, combat_count: 2, cooldown_rounds: 5);

            static public BlueprintAiCastSpell stoneskincommunalghostmageiro = createCastSpellAction("caststoneskincommunalghostmageiro", Spells.stoneskincommunal,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
base_score: 60.0f, combat_count: 2, cooldown_rounds: 5);

            static public BlueprintAiCastSpell summondweomercat = createCastSpellAction("Castsummondweomercat", Spells.summondweomercat,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell summonelementalgreatair = createCastSpellAction("CastSummonelementalgreatair", Spells.summonelementalgreat,
new Consideration[] { },
new Consideration[] { },
base_score: 30.0f, variant: Spells.SummonElementalGreaterAir, combat_count: 1);

            static public BlueprintAiCastSpell summonelementalgreatfire = createCastSpellAction("CastSummonelementalgreatfire", Spells.summonelementalgreat,
new Consideration[] { },
new Consideration[] { },
base_score: 30.0f, variant: Spells.summonelementalgreatfire, combat_count: 1);

            static public BlueprintAiCastSpell usedirtytricksickened = createCastSpellAction("usedirtytricksickened", Spells.dirtytricksickened,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell usesummonspectre = createCastSpellAction("usesummonspectre", Spells.summonspectres,
new Consideration[] { },
new Consideration[] { },
base_score: 20.0f, combat_count: 1);

            static public BlueprintAiCastSpell usesummonspectreghost = createCastSpellAction("usesummonspectreghost", Spells.summonvengefulspectres,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell castkishout = createCastSpellAction("castkishout", Spells.kishout,
new Consideration[] { },
 new Consideration[] { attacktargetspriority },
base_score: 20.0f, combat_count: 2, start_cooldown_rounds: 1, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castkishoutirovetti = createCastSpellAction("castkishoutirovetti", Spells.kishout,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, combat_count: 3, start_cooldown_rounds: 1, cooldown_rounds: 2);



            static public BlueprintAiCastSpell castholdmonster = createCastSpellAction("castholdmonster", Spells.holdmonster,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffHoldMonster },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castholdmonstergardener = createCastSpellAction("castholdmonstergardener", Spells.holdmonster,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffHoldMonster },
base_score: 40.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castvampiricshadowshield = createCastSpellAction("castvampiricshadowshield", Spells.vampireshield,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffVampiricShadowShield },
base_score: 20.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell hellfire_raynird = createCastSpellAction("CastHellfireRaynird", Spells.hellfireray,
                                                 new Consideration[] { },
                                                 new Consideration[] { attacktargetspriority},
                                                 base_score: 30.0f, cooldown_rounds: 2, start_cooldown_rounds: 8);

            static public BlueprintAiCastSpell stoneskincommunalnird = createCastSpellAction("caststoneskincommunalnird", Spells.stoneskincommunal,
     new Consideration[] { },
     new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
    base_score: 60.0f, combat_count: 1);

            static public BlueprintAiCastSpell greaterdispelnird = createCastSpellAction("CastGreaterDispelQuicknird", Spells.greaterdispel,
    new Consideration[] { },
    new Consideration[] { AOE_ChooseMoreEnemies },
    base_score: 30.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell greaterdispelghostmageiro = createCastSpellAction("CastGreaterDispelQuickghostmageiro", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 70.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell greaterdispelghostmagenormal = createCastSpellAction("CastGreaterDispelQuickghostmagenormal", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 70.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 5);

            static public BlueprintAiCastSpell casthastenird = createCastSpellAction("casthastenird", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 60.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell castslownird = createCastSpellAction("castslownird", Spells.slow,
                new Consideration[] { },
                new Consideration[] { attacktargetspriority, NoBuffSlow },
            base_score: 40.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell hideouslaughternird = createCastSpellAction("Casthideouslaughternird", Spells.hideouslaughter,
 new Consideration[] { },
 new Consideration[] { attacktargetspriority, NoBuffHideousLaughter, IntGreaterThan2 },
 base_score: 1.0f, cooldown_rounds: 2, start_cooldown_rounds: 6);

            static public BlueprintAiCastSpell dragonsbreathblacknird = createCastSpellAction("Castdragonsbreathblacknird", Spells.dragonsbreath,
    new Consideration[] { },
    new Consideration[] { AoE_AvoidFriends,AOE_ChooseMoreEnemies },
base_score: 30.0f, variant: Spells.dragonsbreathblack, cooldown_rounds: 2, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell cacophonouscallmass = createCastSpellAction("cacophonouscallmass", Spells.cacophonouscallmass,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffNauseated },
base_score: 30.0f, combat_count: 1);

            static public BlueprintAiCastSpell castgoodhope = createCastSpellAction("castgoodhope", Spells.goodhope,
new Consideration[] { },
new Consideration[] {AlliesNoBuff_GoodHope, TargetSelf},
base_score: 100.0f, combat_count: 2, cooldown_rounds: 5);

            static public BlueprintAiCastSpell castgoodhopetreb = createCastSpellAction("castgoodhopetreb", Spells.goodhope,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_GoodHope, TargetSelf },
base_score: 90.0f, combat_count: 2, cooldown_rounds: 5, start_cooldown_rounds: 6);


            static public BlueprintAiCastSpell castcontrolledfireballtransmuter = createCastSpellAction("castcontrolledfireballtransmuter", Spells.controlledfireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 7);

            static public BlueprintAiCastSpell castenlargemasstransmuter = createCastSpellAction("Castenlargemasstransmuter", Spells.EnlargePersonMass,
   new Consideration[] { },
   new Consideration[] { AlliesNoBuff_EnlargePerson },
   base_score: 50.0f, combat_count: 1);

            static public BlueprintAiCastSpell summonelementalgreatearthtransmuter = createCastSpellAction("CastSummonelementalgreattransmuter", Spells.summonelementalgreat,
    new Consideration[] { },
    new Consideration[] { },
 base_score: 50.0f, variant: Spells.summonelementalgreatearth, combat_count: 1);

            static public BlueprintAiCastSpell castmagicmissletransmuterstrong = createCastSpellAction("castmagicmissletransmuterstrong", Spells.magicmissle,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffShield },
base_score: 20.0f, cooldown_rounds: 1, start_cooldown_rounds: 10);

            static public BlueprintAiCastSpell burninarctransmuter = createCastSpellAction("Castburninarctransmuter", Spells.burningarc,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 20.0f,  cooldown_rounds: 1, start_cooldown_rounds: 7);

            static public BlueprintAiCastSpell throwacidbombpoisoner = createCastSpellAction("throwacidbombpoisoner", Spells.acidbomb,
 new Consideration[] { },
 new Consideration[] { AOE_ChooseMoreEnemies, ChaoticBehavior },
base_score: 10.0f);


            static public BlueprintAiCastSpell castinstantenemyilora = createCastSpellAction("castinstantenemyilora", Spells.instantenemy,
 new Consideration[] { },
 new Consideration[] { attacktargetspriority,IloraNuski_InstantEnemyBuffConsideration,IloraNuski_InstantEnemyTypeConsideration },
base_score: 10.0f, combat_count: 2, cooldown_rounds: 5);

            static public BlueprintAiCastSpell castconfusiontreb = createCastSpellAction("castconfusiontreb", Spells.confusion,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffInsanity, NoBuffConfusion, AOE_ChooseMoreEnemies },
base_score: 10.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castmindfogtreb = createCastSpellAction("castmindfogtreb", Spells.mindfog,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, combat_count: 1, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castresonatingwordtreb = createCastSpellAction("castresonatingwordtreb", Spells.resonatingword,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 30.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castresonatingwordirovetti = createCastSpellAction("castresonatingwordirovetti", Spells.resonatingword,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 40.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 4);


            static public BlueprintAiCastSpell castsongofdiscordtreb = createCastSpellAction("castsongofdiscordtreb", Spells.songofdiscord,
new Consideration[] { },
new Consideration[] { attacktargetspriority,  },
base_score: 30.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castholdmonstertreb = createCastSpellAction("castholdmonstertreb", Spells.holdmonster,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffHoldMonster },
base_score: 20.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castlegendaryproportions = createCastSpellAction("castlegendaryproportions", Spells.legendaryproportions,
new Consideration[] { },
new Consideration[] { TargetSelf },
base_score: 20.0f, pre_cast:true);

            static public BlueprintAiCastSpell castdragonformIIblue = createCastSpellAction("castdragonformIIblue", Spells.DragonkindIIBlue,
new Consideration[] { },
new Consideration[] { },
base_score: 40.0f, combat_count: 1, start_cooldown_rounds:3 );
            

            static public BlueprintAiCastSpell caststormboltgardener = createCastSpellAction("CastStormboltgardener", Spells.stormbolt,
                         new Consideration[] { },
                         new Consideration[] { AOE_ChooseMoreEnemies},
                         base_score: 30.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 2);


            static public BlueprintAiCastSpell castdragonformIIbluebreath = createCastSpellAction("castdragonformIIbluebreat", Spells.DragonkindIIBlueBreath,
                         new Consideration[] { },
                         new Consideration[] { AOE_ChooseMoreEnemies,AoE_AvoidFriends },
                         base_score: 40.0f, cooldown_rounds: 4, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castlightningboltgardener = createCastSpellAction("castlightningboltgardener", Spells.lightningbolt,
                new Consideration[] { },
                new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
                base_score: 30.0f,  start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell featherstepmass = createCastSpellAction("castfeathermass", Spells.featherstepmass,
    new Consideration[] { },
    new Consideration[] { },
    base_score: 30.0f, combat_count: 1);

            static public BlueprintAiCastSpell sensevitalsgaetane = createCastSpellAction("sensevitalsgaetane", Spells.sensevitals,
new Consideration[] { },
new Consideration[] { },
base_score: 30.0f, combat_count: 1);

            static public BlueprintAiCastSpell castentanglegaetane = createCastSpellAction("astentanglegaetane", Spells.entangle,
    new Consideration[] { },
     new Consideration[] { AOE_ChooseMoreEnemies },
    base_score: 20.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell usekipool = createCastSpellAction("usekipool", Spells.kiattackextra,
new Consideration[] { },
new Consideration[] {  },
base_score: 50.0f, cooldown_rounds: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castdeathclutchghost = createCastSpellAction("castdeathclutchghost", Spells.deathclutch,
new Consideration[] { },
new Consideration[] { attacktargetspriority},
base_score: 20.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castrazoecone = createCastSpellAction("castrazoecone", Spells.razorcone,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 60.0f, combat_count: 5, cooldown_rounds: 2, start_cooldown_rounds: 1);


            static public BlueprintAiCastSpell overwhelmingpresenceirovetii = createCastSpellAction("CastOverwhelmingpresenceirovetti", Spells.overwhelmingpresence,
            new Consideration[] { },
            new Consideration[] { AOE_ChooseMoreEnemies },
            base_score: 60.0f, combat_count: 1);

            static public BlueprintAiCastSpell castshoutgreater = createCastSpellAction("castshoutgreater", Spells.shoutgreater,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 40.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castdominateirovetti = createCastSpellAction("castdominateirovetti", Spells.DominatePerson,
new Consideration[] { },
new Consideration[] { NoBuffDominate},
base_score: 50.0f, combat_count: 4, cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castgoodhopeirovetti = createCastSpellAction("castgoodhopeirovetti", Spells.goodhope,
new Consideration[] { },
new Consideration[] { },
base_score: 50.0f, combat_count: 1, cooldown_rounds: 5);

            static public BlueprintAiCastSpell casthasteirovetti = createCastSpellAction("casthasteirovetti", Spells.haste,
new Consideration[] { },
new Consideration[] { TargetSelf },
base_score: 50.0f, combat_count: 1, cooldown_rounds: 5);

            static public BlueprintAiCastSpell chainlightningtreant = createCastSpellAction("chainlightningtreant", Spells.chainlightning,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 60.0f, combat_count: 1);

            static public BlueprintAiCastSpell lightningbolttreant = createCastSpellAction("castlightningbolttreant", Spells.lightningbolt,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
base_score: 50.0f, combat_count: 3, cooldown_rounds: 4,start_cooldown_rounds:2);

            static public BlueprintAiCastSpell castfreedomofmovementtreant = createCastSpellAction("castfreedomofmovementtreant", Spells.freedomofmovement,
 new Consideration[] { AlliesNoBuff_FreedomOfMovement },
 new Consideration[] { TargetSelf },
 base_score: 80.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell usegreatershoutjabber = createCastSpellAction("usegreatershoutjabber", Spells.greatershout,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, cooldown_rounds: 6, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castplaguestorm = createCastSpellAction("castplaguestorm", Spells.plaguestorm,
                                     new Consideration[] { },
                                     new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
                                     base_score: 100.0f, variant: Spells.plaguestormblindingsickness, combat_count: 1);

            static public BlueprintAiCastSpell usegreatershoutmandra = createCastSpellAction("usegreatershoutmandra", Spells.greatershout,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 30.0f, cooldown_rounds: 4);

            static public BlueprintAiCastSpell castfirestormmonarch = createCastSpellAction("castfirestormmonarch", Spells.firestorm,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 50.0f, combat_count: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell greaterdispelmonarch = createCastSpellAction("CastGreaterDispelmonarch", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 50.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell dominatepersonmonarch = createCastSpellAction("dominatepersonmonarch", Spells.DominatePerson,
new Consideration[] { },
new Consideration[] { heavy_armor_consideration },
base_score: 60.0f, combat_count: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castcrushingdespairvilderavn = createCastSpellAction("castcrushingdespairvilderavn", Spells.crushingdespair,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffCrushingDespair, AOE_ChooseMoreEnemies },
base_score: 40.0f, cooldown_rounds: 6);

            static public BlueprintAiCastSpell usesunderarmorvilderavn = createCastSpellAction("usesunderarmorvilderavn", Spells.sunderarmor,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffSunder, heavy_armor_consideration },
base_score: 30.0f, cooldown_rounds: 6, start_cooldown_rounds: 1);

 static public BlueprintAiCastSpell castauraofdoomvilderavn = createCastSpellAction("castauraofdoomvilderavn", Spells.auraofdoom,
                                                             new Consideration[] { },
                                                             new Consideration[] { },
                                                             base_score: 40.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell displacementrecastowlbear = createCastSpellAction("Castdisplacementrecastowlbear", Spells.displacement,
new Consideration[] { },
new Consideration[] { NoBuffDisplacement },
base_score: 30.0f, combat_count: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell summonelderearthelemental = createCastSpellAction("summonelderearthelemental", Spells.summonelderelemental,
new Consideration[] { },
new Consideration[] { },
base_score: 60.0f, variant: Spells.summonelderelementalearth, combat_count: 1);

            static public BlueprintAiCastSpell lightningboltsisterhateot = createCastSpellAction("lightningboltsisterhateot", Spells.lightningbolt,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
base_score: 5.0f, combat_count: 4, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell umbral_strikehateot = createCastSpellAction("CastUmbralStrikehateot", Spells.umbralstrike,
                                                 new Consideration[] { },
                                                 new Consideration[] { },
                                                  base_score: 40.0f, combat_count: 2,cooldown_rounds:2,  start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell tarpoolnymph = createCastSpellAction("CastTarpoolnymph", Spells.tarpool,
             new Consideration[] { },
             new Consideration[] { ArcaneCasterPriorityConsiderationVordakai },
             base_score: 50.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell calllightningstormnymph = createCastSpellAction("calllightningstormnymph", Spells.calllightningstorm,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 20.0f, cooldown_rounds: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell calllightningnymph = createCastSpellAction("calllightningnymph", Spells.calllightningability,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 2.0f);

            static public BlueprintAiCastSpell castdisintegratearcane = createCastSpellAction("castdisintegratearcane", Spells.disintegrate,
new Consideration[] { },
new Consideration[] { attacktargetspriority,ArcaneCasterFocusConsiderationVordakai,NoBuffMedusaPetrifying },
base_score: 100.0f, cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castcontrolledfireballmedusa = createCastSpellAction("castcontrolledfireballmedusa", Spells.controlledfireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 50.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castlightningboltmedusa = createCastSpellAction("castlightningboltmedusa", Spells.lightningbolt,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 60.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castbalefulpolymorphmedusa = createCastSpellAction("castbalefulpolymorphmedusa", Spells.balefulpolymorph,
             new Consideration[] { },
             new Consideration[] { NoBuffBalefulPolymorph, ArcaneCasterFocusConsiderationVordakai, attacktargetspriority },
             base_score: 100.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castsnowballmedusa = createCastSpellAction("castsnowballmedusa", Spells.snowball,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 50.0f,  cooldown_rounds: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castscorchingraymedusa = createCastSpellAction("castscorchingraymedusa", Spells.scorchingray,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 60.0f, cooldown_rounds: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell casthellfireraymedusa = createCastSpellAction("casthellfireraygmedusa", Spells.hellfireray,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 70.0f, cooldown_rounds: 3, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell casthastemedusa = createCastSpellAction("casthastegmedusa", Spells.haste,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Haste },
base_score: 80.0f, combat_count: 1 );

            static public BlueprintAiCastSpell castslowmedusa = createCastSpellAction("castslowmedusa", Spells.slow,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority, NoBuffSlow },
base_score: 80.0f, combat_count: 1);

            static public BlueprintAiCastSpell castboneshattermedusa = createCastSpellAction("castboneshattermedusa", Spells.boneshatter,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 80.0f, cooldown_rounds: 2, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castfiresnakemedusa = createCastSpellAction("castfiresnakemedusa", Spells.controlledfireball,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 50.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castconstrictingmisbegotten = createCastSpellAction("castconstrictingmisbegotten", Spells.constrictingcoils,
new Consideration[] { },
new Consideration[] { SupporCasterFocusConsideration },
base_score: 80.0f, combat_count: 2, cooldown_rounds: 2);

            static public BlueprintAiCastSpell Casthealspellmisbegotten = createCastSpellAction("Casthealspellmisbegotten", Spells.heal,
new Consideration[] { },
new Consideration[] { TargetSelf, HealSpellConsideration },
base_score: 80.0f, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castsummondamnedtrolls = createCastSpellAction("castsummondamnedtrolls", Spells.summondamnedtrolls,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell castsummonfrostgiants = createCastSpellAction("castsummonfrostgiants", Spells.summonfrostgiants,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell castsummonerinyes = createCastSpellAction("castsummonerinyes", Spells.summonerinyes,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell casteffortlessarmor = createCastSpellAction("casteffortlessarmor", Spells.effortlessarmor,
new Consideration[] { },
new Consideration[] { },
base_score: 80.0f, combat_count: 1, pre_cast:true);

            static public BlueprintAiCastSpell castgreaterdispellqueen = createCastSpellAction("Castgreaterdispellqueen", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies,AoE_AvoidFriends },
base_score: 19.0f, variant: Spells.greaterdispelarea, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castsummonelderworms = createCastSpellAction("castsummonelderworms", Spells.summonelderworms,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell casticyprisonmass = createCastSpellAction("casticyprisonmass", Spells.icyprisonmass,
new Consideration[] { },
new Consideration[] { attacktargetspriority, SupporCasterFocusConsideration },
base_score: 100.0f, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell greaterdispelwrigglingman = createCastSpellAction("greaterdispelwrigglingman", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 50.0f, variant: Spells.greaterdispelarea, combat_count: 3, cooldown_rounds: 3);

            static public BlueprintAiCastSpell tsunamiwrigglingman = createCastSpellAction("tsunamiwrigglingman", Spells.tsunami,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 60.0f,  cooldown_rounds: 4, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castshadowchainlightning = createCastSpellAction("castshadowchainlightning", Spells.Shadowevocationgreater,
    new Consideration[] { },
    new Consideration[] { attacktargetspriority },
    base_score: 60.0f, variant: Spells.Shadowevocationgreaterchainlightning, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castshadowcoldicestrike = createCastSpellAction("castshadowcoldicestrike", Spells.Shadowevocationgreater,
new Consideration[] { },
    new Consideration[] { attacktargetspriority },
base_score: 40.0f, variant: Spells.Shadowevocationgreatercoldicestrike, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castpolarray = createCastSpellAction("castpolarray", Spells.polarray,
new Consideration[] { },
new Consideration[] { attacktargetspriority, heavy_armor_consideration },
base_score: 50.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell chainlightningwrigglingman = createCastSpellAction("chainlightningwrigglingman", Spells.chainlightning,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 80.0f, combat_count: 3, cooldown_rounds: 3);

            static public BlueprintAiCastSpell castcausticeruptionwrigglingman = createCastSpellAction("castcausticeruptionwrigglingman", Spells.causticeruption,
new Consideration[] {  },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f,  cooldown_rounds: 4, start_cooldown_rounds: 8);

            static public BlueprintAiCastSpell castsummontreants = createCastSpellAction("castsummontreants", Spells.summontreants,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);


            static public BlueprintAiCastSpell castcloakofchaos = createCastSpellAction("castcloakofchaos", Spells.cloakofchaos,
            new Consideration[] { },
            new Consideration[] { },
            base_score: 80.0f, combat_count: 1, pre_cast: true, cooldown_rounds: 15);

            static public BlueprintAiCastSpell castauraofmadnessknurly = createCastSpellAction("castauraofmadnessknurly", Spells.knurlywitchmadness,
new Consideration[] { },
new Consideration[] { },
base_score: 80.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castoverwhelmingpresenceknurly = createCastSpellAction("CastOverwhelmingpresenceknurly", Spells.overwhelmingpresence,
         new Consideration[] { },
         new Consideration[] { AOE_ChooseMoreEnemies },
         base_score: 90.0f, combat_count: 1);


            static public BlueprintAiCastSpell castweirdknurly = createCastSpellAction("castweirdknurly", Spells.Weird,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castplaguestormknurly = createCastSpellAction("castplaguestormknurly", Spells.plaguestorm,
                         new Consideration[] { },
                         new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
                         base_score: 100.0f, variant: Spells.plagueStormBubonicPlague, combat_count: 1, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell inflictseriousmassknurly = createCastSpellAction("CastInflictSeriousWoundsMassknurly", Spells.inflictseriousmass,
      new Consideration[] { },
     new Consideration[] { },
   base_score: 80.0f, combat_count: 2, start_cooldown_rounds: 4, cooldown_rounds:2);

            static public BlueprintAiCastSpell greaterdispelknurly = createCastSpellAction("greaterdispelknurly", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 100.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castdeathclutchknurly = createCastSpellAction("castdeathclutchknurly", Spells.deathclutch,
new Consideration[] { },
new Consideration[] { attacktargetspriority, ChaoticBehavior },
base_score: 70.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castdivinepowerknurly = createCastSpellAction("Castdivinepowerknurly", Spells.divinepower,
new Consideration[] { },
new Consideration[] { TargetSelf },
base_score: 80.0f,  start_cooldown_rounds: 10);


            static public BlueprintAiCastSpell prayerknurly = createCastSpellAction("Castprayerknurly", Spells.prayer,
                                   new Consideration[] { },
                                   new Consideration[] {  },
                     base_score: 150.0f, combat_count: 2, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castwavesofecstasyknurly = createCastSpellAction("castwavesofecstasyknurly", Spells.wavesofecstasy,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 90.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 5);


            static public BlueprintAiCastSpell castconfusionknurly = createCastSpellAction("castconfusionknurly", Spells.confusion,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffInsanity, NoBuffConfusion, AOE_ChooseMoreEnemies },
base_score: 80.0f, cooldown_rounds: 1, start_cooldown_rounds: 7);

            static public BlueprintAiCastSpell healspellknurly = createCastSpellAction("Casthealspellknurly", Spells.heal,
new Consideration[] { },
new Consideration[] { TargetSelf, HealSpellConsideration },
base_score: 150.0f, cooldown_rounds: 3);

            static public BlueprintAiCastSpell flamestrikeknurly = createCastSpellAction("Castflamestrikeknurly", Spells.flamestrike,
           new Consideration[] { },
           new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies},
base_score: 800.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 10);

            static public BlueprintAiCastSpell castweirdnyrissa = createCastSpellAction("castweirdnyrissa", Spells.Weird,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, combat_count: 2, cooldown_rounds: 5, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castdeathclutchnyrissa = createCastSpellAction("castdeathclutchnyrissa", Spells.deathclutch,
new Consideration[] { },
new Consideration[] { attacktargetspriority, ChaoticBehavior },
base_score: 70.0f, combat_count: 2, cooldown_rounds: 4, start_cooldown_rounds: 3);


            static public BlueprintAiCastSpell castfingerofdeathnyrissa = createCastSpellAction("castfingerofdeathnyrissa", Spells.fingerofdeath,
new Consideration[] { },
new Consideration[] { ArcaneCasterFocusConsiderationVordakai },
base_score: 80.0f, combat_count: 3, start_cooldown_rounds: 5, cooldown_rounds: 3);

            static public BlueprintAiCastSpell tsunaminyrissa = createCastSpellAction("tsunaminyrissa", Spells.tsunami,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 90.0f, combat_count: 2, cooldown_rounds: 4 );

        static public BlueprintAiCastSpell castsunburstnyrissa = createCastSpellAction("castsunburstnyrissa", Spells.sunburst,
              new Consideration[] { },
                                     new Consideration[] { AOE_ChooseMoreEnemies },
                                     base_score: 100.0f, combat_count: 1);

            static public BlueprintAiCastSpell castfirestormnyrissa = createCastSpellAction("castfirestormnyrissa", Spells.firestorm,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 90.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell caststormboltnyrissa = createCastSpellAction("caststormboltnyrissa", Spells.stormbolt,
new Consideration[] { },
new Consideration[] { },
base_score: 80.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell tarpoolnyrissa = createCastSpellAction("Casttarpoolnyrissa", Spells.tarpool,
 new Consideration[] { },
 new Consideration[] { ArcaneCasterPriorityConsiderationVordakai },
 base_score: 80.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell greaterdispelnyrissa = createCastSpellAction("greaterdispelnyrissa", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 100.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell healnyrissa = createCastSpellAction("Casthealnyrissa", Spells.heal,
new Consideration[] { },
new Consideration[] { TargetSelf, HealSpellConsideration },
base_score: 150.0f, cooldown_rounds: 2);

            static public BlueprintAiCastSpell wailbansheenyrissa = createCastSpellAction("wailbansheenyrissa", Spells.wailbanshee,
                                                              new Consideration[] { },
                                                              new Consideration[] { AOE_ChooseMoreEnemies},
                                                              base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell castfiresnakenyrissa = createCastSpellAction("castfiresnakenyrissa", Spells.firesnake,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 70.0f, combat_count: 3, cooldown_rounds: 3, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell castvinetrapnyrissa = createCastSpellAction("castvinetrapnyrissa", Spells.vinetrap,
 new Consideration[] { },
 new Consideration[] { attacktargetspriority, SupporCasterFocusConsideration },
 base_score: 80.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell overwhelmingpresencelanternking = createCastSpellAction("CastOverwhelmingpresencelanternking", Spells.overwhelmingpresence,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, combat_count: 1);


            static public BlueprintAiCastSpell castgoodhopelanternking = createCastSpellAction("castgoodhopelanternking", Spells.goodhope,
new Consideration[] { },
new Consideration[] { },
base_score: 50.0f, combat_count: 1, cooldown_rounds: 5);

            static public BlueprintAiCastSpell casthastelanternking = createCastSpellAction("casthastelanternking", Spells.haste,
new Consideration[] { },
new Consideration[] { TargetSelf },
base_score: 50.0f, combat_count: 1, cooldown_rounds: 6);

            static public BlueprintAiCastSpell castslowlanternking = createCastSpellAction("castslowlanternking", Spells.slow,
new Consideration[] { },
new Consideration[] { attacktargetspriority, NoBuffSlow },
base_score: 60.0f, combat_count: 3, cooldown_rounds: 6);

            static public BlueprintAiCastSpell illthuliakbreath = createCastSpellAction("illthuliakbreath", Spells.illthuliaksbreath,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 60.0f, cooldown_rounds: 4, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell frightfulpresenceillthuliak = createCastSpellAction("frightfulpresenceillthuliak", Spells.BlackDragonFrightfulPresenceAbility,
new Consideration[] { },
new Consideration[] { TargetSelf,NoBuffFrightfulPresense },
base_score: 60.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell castcausticeruptionillthuliak = createCastSpellAction("castcausticeruptionillthuliak", Spells.causticeruption,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, cooldown_rounds: 5, start_cooldown_rounds: 7);

            static public BlueprintAiCastSpell castpolarmidnightillthuliak = createCastSpellAction("castpolarmidnightillthuliak", Spells.polarmidnight,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 80.0f, combat_count: 1, start_cooldown_rounds: 3);


            static public BlueprintAiCastSpell wavesofexhaustlich = createCastSpellAction("CastWavesOfExhaustionlich", Spells.wavesofexhaust,
 new Consideration[] { },
 new Consideration[] { AOE_ChooseMoreEnemies },
 base_score: 100.0f, combat_count: 1);

            static public BlueprintAiCastSpell greaterdispellich = createCastSpellAction("greaterdispellich", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 80.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell wailofthebansheelich = createCastSpellAction("wailofthebansheelich", Spells.wailbanshee,
    new Consideration[] { },
    new Consideration[] { AOE_ChooseMoreEnemies },
    base_score: 70.0f, combat_count: 3, cooldown_rounds: 4, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castholdmonsterlich = createCastSpellAction("castholdmonsterlich", Spells.holdmonster,
new Consideration[] { },
new Consideration[] { heavy_armor_consideration, NoBuffHoldMonster },
base_score: 80.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 4);

            
            static public BlueprintAiCastSpell bansheeblastlich = createCastSpellAction("CastBansheeBlastlich", Spells.bansheeblast,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castcausticeruptionlich = createCastSpellAction("castcausticeruptionlich", Spells.causticeruption,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, cooldown_rounds: 3, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell castboneshakerlich = createCastSpellAction("Castboneshakerlich", Spells.boneshaker,
                                                             new Consideration[] { },
                                                             new Consideration[] { LongRange },
                                                             base_score: 20.0f, cooldown_rounds: 1, start_cooldown_rounds: 10);

            static public BlueprintAiCastSpell castboneshatterlich = createCastSpellAction("castboneshatterlich", Spells.boneshatter,
                                     new Consideration[] { },
                                     new Consideration[] { attacktargetspriority, ChaoticBehavior },
                                     base_score: 30.0f );

            static public BlueprintAiCastSpell horridwiltinglich = createCastSpellAction("CastHorridWiltinglich", Spells.horrid_wilting,
     new Consideration[] { },
     new Consideration[] { },
     base_score: 80.0f, combat_count: 3, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castfingerofdeathlich = createCastSpellAction("castfingerofdeathlich", Spells.fingerofdeath,
new Consideration[] { },
new Consideration[] { ArcaneCasterFocusConsiderationVordakai, IgnoreControlledConsiderationVordakai },
base_score: 80.0f, combat_count: 2, start_cooldown_rounds: 6, cooldown_rounds: 3);

            static public BlueprintAiCastSpell coneofcoldlich = createCastSpellAction("coneofcoldlich", Spells.coneofcold,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 70.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 6);

            static public BlueprintAiCastSpell usesummonbloodybonesbeast = createCastSpellAction("usesummonbloodybonesbeasts", Spells.summonbloodybones,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell usesummonundeadminions = createCastSpellAction("usesummonundeadminions", Spells.summonundeadminions,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell bansheeblastwatchfulomen = createCastSpellAction("Castbansheeblastwatchfulomen", Spells.bansheeblast,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 3);


            static public BlueprintAiCastSpell usesummonancientsouls = createCastSpellAction("usesummonancientsouls", Spells.summonsouleaters,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell usesummonelders = createCastSpellAction("usesummonelders", Spells.summonelders,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell stoneskincommunalevildruid = createCastSpellAction("caststoneskincommunalevildruid", Spells.stoneskincommunal,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Stoneskin, TargetSelf },
base_score: 100.0f, combat_count: 1, cooldown_rounds: 5);



            static public BlueprintAiCastSpell castplaguestormevildruid = createCastSpellAction("castplaguestormevildruid", Spells.plaguestorm,
             new Consideration[] { },
             new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
             base_score: 80.0f, variant: Spells.plagueStormBubonicPlague, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell umbral_strikehateevildruid = createCastSpellAction("CastUmbralStrikeevildruid", Spells.umbralstrike,
                                     new Consideration[] { },
                                     new Consideration[] { },
                                      base_score: 80.0f, combat_count: 2, cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell greaterdispelevildruid = createCastSpellAction("CastGreaterDispelevildruid", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 80.0f, variant: Spells.greaterdispelarea, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell lightningboltevildruid = createCastSpellAction("castlightningboltevildruid", Spells.lightningbolt,
                 new Consideration[] { },
                 new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
            base_score: 50.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 4);

            static public BlueprintAiCastSpell tarpoolevildruid = createCastSpellAction("CastTarpoolevildruid", Spells.tarpool,
 new Consideration[] { },
 new Consideration[] { AOE_ChooseMoreEnemies },
 base_score: 60.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell usesummongreater = createCastSpellAction("usesummongreater", Spells.summongreaters,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1, start_cooldown_rounds: 10);

            static public BlueprintAiCastSpell castflamestrikeevildruid = createCastSpellAction("castflamestrikeevildruid", Spells.flamestrike,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 55.0f,  cooldown_rounds: 2, start_cooldown_rounds: 5);


            static public BlueprintAiCastSpell usewildshapesmilidonevildruid = createCastSpellAction("usewildshapesmilidonevildruid", Spells.wildshapesmilodon,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f,  start_cooldown_rounds: 8);

            static public BlueprintAiCastSpell usesummonaidforest = createCastSpellAction("usesummonaidforest", Spells.summonaidforest,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);


            static public BlueprintAiCastSpell castlightningboltdryadhelp = createCastSpellAction("castlightningboltdryadhelp", Spells.lightningbolt,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 60.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);


            static public BlueprintAiCastSpell castcatsmass = createCastSpellAction("Castcatsmass", Spells.catsmass,
                                                       new Consideration[] { },
                                                       new Consideration[] { },
                                                       base_score: 100.0f, combat_count: 1);

            static public BlueprintAiCastSpell castdeathclutchprimrose = createCastSpellAction("castdeathclutchprimrose", Spells.deathclutch,
new Consideration[] { },
new Consideration[] { attacktargetspriority, ChaoticBehavior },
base_score: 70.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell greaterdispelprimrose = createCastSpellAction("greaterdispelprimrose", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 100.0f, variant: Spells.greaterdispelarea, combat_count: 1,  start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell castflamestrikedryadhelp = createCastSpellAction("castflamestrikedryadhelp", Spells.flamestrike,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 100.0f, combat_count: 2, cooldown_rounds: 3);

            static public BlueprintAiCastSpell stoneskincommunaldryadhelp = createCastSpellAction("caststoneskincommunaldryadhelp", Spells.stoneskincommunal,
new Consideration[] { },
new Consideration[] { AlliesNoBuff_Stoneskin },
base_score: 120.0f, combat_count: 1);

            static public BlueprintAiCastSpell usesummonaidlake = createCastSpellAction("usesummonaidlake", Spells.summonaidlake,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell castcloakofdreams = createCastSpellAction("castcloakofdreams", Spells.CloakofDreams,
new Consideration[] { },
new Consideration[] { },
base_score: 120.0f, combat_count: 1, pre_cast: true);

            static public BlueprintAiCastSpell casteaglemass = createCastSpellAction("Casteagkesmass", Spells.EaglesSplendorMass,
                                           new Consideration[] { },
                                           new Consideration[] { },
                                           base_score: 210.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castserenityshallow = createCastSpellAction("castserenityshallow", Spells.serenity,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies },
base_score: 140.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castdominateshallow = createCastSpellAction("castdominateshallow", Spells.DominatePerson,
new Consideration[] { },
new Consideration[] { NoBuffDominate },
base_score: 120.0f, combat_count: 3, cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell castmindfogshallow = createCastSpellAction("castmindfogshallow", Spells.mindfog,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 200.0f, combat_count: 1, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castkishoutshallow = createCastSpellAction("castkishoutshallow", Spells.kishout,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 120.0f, combat_count: 3, start_cooldown_rounds: 1, cooldown_rounds: 3);

            static public BlueprintAiCastSpell chainlightningshallow = createCastSpellAction("chainlightningshallow", Spells.chainlightning,
new Consideration[] { },
new Consideration[] { attacktargetspriority },
base_score: 80.0f, combat_count: 1, cooldown_rounds: 3);

            static public BlueprintAiCastSpell greaterdispelshallows = createCastSpellAction("greaterdispelshallow", Spells.greaterdispel,
new Consideration[] { },
new Consideration[] { AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 100.0f, variant: Spells.greaterdispelarea, combat_count: 1, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell lightningboltthreeturns = createCastSpellAction("castlightningboltthreeturns", Spells.lightningbolt,
     new Consideration[] { },
     new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
base_score: 10.0f, combat_count: 4, cooldown_rounds: 1, start_cooldown_rounds: 3);

            static public BlueprintAiCastSpell lightningboltshallow = createCastSpellAction("lightningboltshallow", Spells.lightningbolt,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AoE_AvoidFriends },
base_score: 15.0f, combat_count: 4, cooldown_rounds: 1, start_cooldown_rounds: 10);

            static public BlueprintAiCastSpell castshoutshallow = createCastSpellAction("castshoutshallow", Spells.shout,
new Consideration[] { },
new Consideration[] {  AOE_ChooseMoreEnemies },
base_score: 10.0f, combat_count: 4, cooldown_rounds: 1);

            static public BlueprintAiCastSpell coneofcoldzombiemagus = createCastSpellAction("coneofcoldzombiemagus", Spells.coneofcold,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 100.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 5);

            static public BlueprintAiCastSpell umbral_strikezombiemagus = createCastSpellAction("Castumbral_strikezombiemagus", Spells.umbralstrike,
                                         new Consideration[] { },
                                         new Consideration[] { },
                                          base_score: 40.0f, combat_count: 2);

            static public BlueprintAiCastSpell acidicsprayooze = createCastSpellAction("castacidicsprayooze", Spells.acidicspray,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies },
base_score: 20.0f, cooldown_rounds: 5);

            static public BlueprintAiCastSpell usesplit = createCastSpellAction("usesplit", Spells.Split,
new Consideration[] { },
new Consideration[] { },
base_score: 2000.0f, combat_count: 1);


            static public BlueprintAiCastSpell chainsoflightdeva = createCastSpellAction("Castchainsoflightdeva", Spells.chainsoflight,
new Consideration[] { },
new Consideration[] { SupporCasterFocusConsideration },
base_score: 150.0f, combat_count: 2, cooldown_rounds: 3, start_cooldown_rounds: 1);

            static public BlueprintAiCastSpell castflamestrikedeva = createCastSpellAction("castflamestrikedeva", Spells.flamestrike,
new Consideration[] { },
new Consideration[] { attacktargetspriority, AOE_ChooseMoreEnemies, AoE_AvoidFriends },
base_score: 55.0f, combat_count: 2 ,cooldown_rounds: 2, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell unholyauradeva = createCastSpellAction("Castunholyauradeva", Spells.unholyaura,
new Consideration[] { },
new Consideration[] { },
base_score: 100.0f, combat_count: 1, start_cooldown_rounds: 2);

            static public BlueprintAiCastSpell usecallfallen = createCastSpellAction("usecallfallen", Spells.CallFallen,
new Consideration[] { },
new Consideration[] { },
base_score: 150.0f, combat_count: 1);

            static public BlueprintAiCastSpell hellfire_raydeva = createCastSpellAction("CastHellfireRaydeva", Spells.hellfireray,
                                           new Consideration[] { },
                                           new Consideration[] { attacktargetspriority },
                                           base_score: 150.0f, combat_count: 1, start_cooldown_rounds: 1);






        }





        static BlueprintAiCastSpell createCastSpellAction(string name, BlueprintAbility spell, Consideration[] actor_consideration, Consideration[] target_consideration,
                                                      float base_score = 1f, BlueprintAbility variant = null, int combat_count = 0, int cooldown_rounds = 0, int start_cooldown_rounds = 0, string guid = "", bool pre_cast = false)
        {
            BlueprintAiCastSpell action = CallOfTheWild.Helpers.Create<BlueprintAiCastSpell>();
            action.Ability = spell;
            action.Variant = variant;
            action.ActorConsiderations = actor_consideration;
            action.TargetConsiderations = target_consideration;
            if (pre_cast)
                action.name = "SLE_PRECAST_" + name;
            else
                action.name = "SLE_" + name;
            action.BaseScore = base_score;
            action.CombatCount = combat_count;
            action.CooldownRounds = cooldown_rounds;
            action.StartCooldownRounds = start_cooldown_rounds;

            //If this is a legacy spell cast with an old name, we need to make sure it still exists...
            if (guid == "" && Helpers.GuidStorage.hasStoredGuid(name))
            {
                var oldGuid = Helpers.GuidStorage.getGuid(name);
                var oldAction = action.CreateCopy();
                oldAction.name = name;
                library.AddAsset(oldAction, oldGuid);
            }
            library.AddAsset(action, guid);

            return action;
        }

        static internal HashSet<string> LoadBrainsToClone()
        {
            var list = new HashSet<string>();


            foreach (var brain in Properties.Resources.BrainCloneWhitelist.Split('\n'))
            {
                list.Add(brain.Trim());
            }

            return list;
        }

        static internal HashSet<string> brainsToClone = LoadBrainsToClone();

        static internal bool ShouldCloneBrain(BlueprintUnit unit)
        {
            if (unit == null)
                return false;
            if (unit.Brain == null)
                return false;

            return brainsToClone.Contains(unit.AssetGuid);

            //brainsToClone.Add(unit.AssetGuid);

        }


        static internal void load()
        {

            //Keep a list of every brain id we have seen so we can generate a unique name for it
            Dictionary<string, int> brainsSeen = new Dictionary<string, int>();

            //Grab a list of all the blueprints (we can't just foreach over it since we modify the List as we go)
            var now = DateTime.Now;
            Main.logger.Log($"Fetching all blueprints...");
            var allBlueprints = library.GetAllBlueprints();
            Main.logger.Log($"Done (took: {DateTime.Now.Subtract(now).Seconds}s)");

            now = DateTime.Now;
            //For each blueprint
            for (int i = 0; i < allBlueprints.Count; i++)
            {
                //We only care about units that have brains
                var unit = allBlueprints[i] as BlueprintUnit;
                if (ShouldCloneBrain(unit))
                {
                    //If we have already seen this brain before, we copy it to a unique version
                    if (brainsSeen.TryGetValue(unit.Brain.AssetGuid, out var duplicateCount))
                    {
                        //Main.logger.Log($"Creating unique brain for unit: {unit.name} based on brain: {unit.Brain.name}:{unit.Brain.AssetGuid}");

                        //Keep track of how many times we have used this brain
                        brainsSeen[unit.Brain.AssetGuid] = duplicateCount + 1;

                        //Copy the brain (and add it as a new blueprint), with a unique name (required for cotw helpers)
                        //The empty guid string means cotw will either generate a new guid (only in debug mode) or look up the guid by name, we have guaranteed to be unique
                        var clonedBrain = library.CopyAndAdd<BlueprintBrain>(unit.Brain, $"{unit.Brain.name}_v{duplicateCount+1}_for_{unit.name}", "");
                        //I don't think brains have components, but let's do this anyway just to be safe
                        clonedBrain.ComponentsArray = clonedBrain.ComponentsArray.Select(c => c.CreateCopy()).ToArray();
                        //Insert the new brain back into the unit so subsequent code that also gets the brain via the unit will get the correct reference
                        unit.Brain = clonedBrain;

                        //Main.logger.Log($"Created unique brain ({unit.Brain.name})");
                    }
                    else
                    {
                        //If this is the first time we've seen the brain we don't need to clone it, just track that we've seen it
                        brainsSeen[unit.Brain.AssetGuid] = 1;
                    }
                }
            }
            Main.logger.Log($"Brain unique-ifying done (took: {DateTime.Now.Subtract(now).Seconds}s)");

            //System.IO.File.WriteAllText("brain_whitelist.txt", string.Join("\n", brainsToClone.ToArray()));

            //Chapter 1

            updateKalannah();
            updateTartukinSycamore();
            updateSycamoreSpiderBoss();
            updateMiteQueen();
            updateMiteSineshal();
            updateMiteCleric();
            updateKoboldKing();
            updateKoboldHerald();
            updateCR1_BanditBard();
            updateCR2_BanditPostiveCleric();
            updateDovan();
            updateStaglordDovan();
            updateStaglordDovanB();
            updateStaglordDovanC();
            updateDovanHighLevel();
            updateAuch();
            updatestaglordAuch();
            updateStagLord();
            updateStaglordLoyalistMage();
            updateStaglordLoyalist();
            updateNugrah();


            //Chapter 2 Trolls

            updateCR3_BanditAlchemist();
            updateCR6_BanditTransmuter();
            updatebanditroguerangedRW();
            updatebanditroguemeleeRW();
            updatebanditfighterRW();
            updatebanditfighterRangedRW();
            updatebanditfighterLH();
            updatebanditfighterRangedLH();
            updatebanditconjurerLH();
            updatebanditarmoredleader();

            updateKoboldTeacher();
            updateKoboldKeyKeeper();
            updateKoboldBladeCR3B();
            updateKoboldOnMarchShaman();
            updateKoboldEvokerTrollbold();
            updateKoboldBoomsayer();
            updateKoboldBladeCR3();
            updateKoboldHunter();
            updateKoboldAlchemistCR4();
            updateBoneShaman();
            updateJazon();
            updateJazonEarly();
            updateNagrundi();
            updateNagrundiTrollHound();
            fixTartuk();
            fixHargulka();


            //Chapter 2 Season of Bloom

            updateSwampWitch();
            changeLonelyGhoul();
            changeSwampWerewolf();
            updateGhostPriest();
            updateGhostStandard();
            changeNarlmarshscythetree();
            

            changeLonelyBarrowSkeletonCR2();
            changeLonelyBarrowSkeletonCR3();
            changeEasyBanditArcher();
            changeEasyBanditMelee();
            changeHardBanditMelee();
            changeHardBanditRanged();
            changeGraveRobber();
            changeLoneWarrior();
            changeLonelyBarrowskeletal();

            changeKingVesket();
            changeLizardRattler();
            changeLizardRangedHard();
            changeLizardMeleeHard();

            //Beasts

            updatehuntedhydra();
            updatecapitalhydra();
            updateCR12PoisonousHydra();
            updateCR14PoisonousHydra();
            updateHydraStandard();
            updateHydraAdvanced();
            updateHydraAdvancedCR7();
            updateHydraquickling();
            updateHydrabloom();
            updateHydravenom();
            updateOwlbearillusion();
            updateOwlbearnecro();
            updateStrongOwlbearevocation();
            updateStrongOwlbearnecro();
            updateStrongOwlbeartreant();
            updateSecretOwlbear();
            updateenragedowlbeartreant();
            updateBloominfusedspider();
            updatequicklingspider();
            updatedoomspider();
            updatespidermatriarch();
            updatestandardwyvern();
            updateadvancedwyvern();
            updateenchantmentwyvern();
            updateevocationwyvern();
            updatestrongenchantmentwyvern();
            updatetransmutationwyvern();
            updatetreantwyvern();
            updatewyvernforked();
            updateManticoreStandard();
            updateManticoreAdvanced();
            updateManticoreTransmutation();
            updateManticoreEnchantment();
            updateManticoreVenom();
            updateManticorebloominfused();
            updateManticoreMature();
            updateFlyTrapStandard();
            updateFlyTrapadvanced();
            updateFlyTrapbloominfused();

            //Talon Peak

            updateAncientRoc();
            updateTalonPeakAlchemist();
            updateTalonPeakFighter();
            updateTalonPeakRogue();

            //Silverstep

            updatesilverstepsmalltatzylwyrm();
            updateLargeTatzlwyrm();
            updatesilverstepfrogs();
            changeSilverstepWerewolf();
            changesilverstepbanditleader();
            updatesilverstepbanditmelee();
            changesilverstepbanditArcher();
            changesilverstepbanditRogue();


            fixLizardWilloWispBoss();

            updatefakestaglord(); 

            updatecraglinnorm();

            fixCandlemereWilloWispBoss();
            fixCandlemerePriest();

            fixnixieprankster();
            fixnereidstandard();


            //Goblins 

            fixGoblinSentry();
            fixGoblinDogcutter();
            fixGoblinHorseslayer();
            fixGoblinHorseslayerb();
            fixGoblinCommando();
            fixGoblinCommandob();
            fixGoblinGuardNeutral();

            fixGoblinRogueCR7();
            fixGoblinRogueCR7Ambush();
            fixGoblinRogueCR9();
            fixGoblinRogueCR9Ambush();

            fixGoblinSlyEye();
            fixGoblinDeadEye();
            fixGoblinDeathEye();
            fixGoblinEagleEye();
            fixGoblinEagleEyeB();
            fixGoblinLynxEye();
            fixGoblinLynxEyeB();
            fixGoblinLynxEyeC();
            fixGoblinArcherCR9Ambush();
            fixGoblinArcherCR7Ambush();

            fixGoblinGuardAlchemit();
            fixGoblinAlchemistCR7();
            fixGoblinAlchemistCR6();
            fixGoblinAlchemistCR5();
            fixGoblinAlchemistCR4();
            fixGoblinAlchemistCR1();

            fixGoblinKing();
            fixGoblinShaman();


            //Chapter 3

            changesprigganmeleefighter();
            changesprigganmeleerogueCR6();
            changesprigganmeleefighterCR4();
            changesprigganrogueranged();
            changesprigganmeleerogue();
            changesprigganmeleebarb();
            changesprigganrangedfighter();
            changesprigganboss();

            updateBarbarianCamp_ElderSister();
            updateElderSister();
            updateBarbarianCamp_YoungerSister();
            updateBarbarianCamp_SisterFromTomb();
            updateBarbarianCamp_Dugath();
            updateBarbarianmeleeLevel7();
            updateBarbfighter();
            updateBarbranger();
            updateBolga();

            changeholloweyearchers();
            changeholloweyerogues();
            changeholloweyealchemist();
            updateholloweyeFighterA();
            updateholloweyeFighterB();
            updateholloweyeBrawler();
            updateholloweyeBard();

            updateDunswardTombSorcerer();
            updateDunswardTombCleric();
            updateDunswardTombFighter();
            updateDunswardTombArcher();
            updateDunswardTombBarbarian();


            changeDaemonGuardian();
            changeAstraDaemonstandard();
            changeThanadaemon();
            updateVordakaiWillasGundarson();
            updateSpectreStandard();
            changeCephalLorentus();
            updateVordakai();
            updateHoragnamon();
            changeDreadZombieFighterFerocius();
            fixThickSkinnedZombieCyclopFighter();
            fixdreadzombieCR8();
            fixdreadzombieCR9();
            fixdreadgreaterbarbarian();

            fixDreadZombieCleric();
            fixundeadcyclopspriest();



            //Chapter 4

            //Flintlock Grasslands

            updateCR6_VandalPositiveClericLevel7();
            updateCR8_VandalPositiveClericLevel9();
            updateCR9_VandalDruidWildshapeLevel10();
            updateCR7_VandalDruidWildShapeLevel8();
            updateCR11_VandalMeleeBarbarianLevel12();
            updateCR9_VandalMeleeBarbarianLevel10();
            updateCR8_VandalMeleeRangerLevel9();
            updateCR6_VandalMeleeRangerLevel7();
            updateCR9_VandalRangedFighterLevel10();
            updateCR7_VandalRangedFighterLevel8();
            updateCR7_VandalMeleeFighterGreataxeLevel8();
            updateCR6_VandalMeleeFighterGreataxeLevel7();
            updateCR6_VandalMeleeFighterGreatswordLevel7();
            updateCR7_VandalMeleeFighterGreatswordLevel8();
            updateVandalRanged_BrevoyBad();
            updateVandalHillGiant();
            updateVandalwolf_brevoybad();


            //Abandoned Keep
            updateDefacedSisterAbandonedKeep();
            changeAdeptDryad();
            updateCR6_RedcapStandard();
            updateCR11_RedcapBarbarian();
            updateCR11_RedcapRogue();
            updateAbandonedKeep_RedcapBarbarian();
            updateAbandonedKeep_GolemStone();
            updatePrimalSpider();
            updatePrimalShambler();
            updateAbandonedKeep_Devourer();

            //ArmagsTomb
            updateVengefulSpectre();
            changearmagghostmageA();
            changearmagghostmageB();
            updateArmagsTomb_Devourer();
            updateArmagsTombDefacedSister();
            updateTombVandalLeader();
            updateTombVandalMelee();
            updateTombVandalRanged();
            changenightmareskeletalchamp();
            changeArmagInquisitorA();
            changeArmagInquisitorB();
            updateClericGorum();
            changenightmareskeletal();
            changenightmareskeletalbarb();

            updateClericGorumArmags();
            changebloodybonesbeast();
            changejmmtcleric();
            updateZorek();
            updateArmagIronGolem();
            updateArmag();




            //Chapter 5

            //Hellknight Quest
            changeLinxia();
            changeHellknightA();
            changeHellknightB();
            changeHellCasterA();
            changeHellCasterB();
            changeHellClericA();
            changeHellClericB();

            //River Pirates Camp

            changeriverbladepositivecleric();
            changeriverbladefightermelee();
            changeriverbladeranged();
            changeriverbladealchemist();
            changeriverbladeroguemelee();
            changeriverbladebard();
            changeriverbladenecro();
            changeRenshalaVascari();

            //Pitax Trolls

            updateTrollGuard();
            updateTrollGuardFerocious();
            updateTrollGuardVeteran();
            updateTrollGuardFerociousBerserk();
            updateTrollGuardVeteranElite();
            updateTrollGuardFerociousBerserkElite();


            //The Mengarie
            updateDwarfMagus();
            updateNirdCottenrople();

            //River Blades Camp

            changeriverbladetransmuter();
            changeCR8_BanditAlchemistLevel9();
            changeriverbladecampbard();
            changeriverbladecamproguemelee();
            changeriverbladecampfighterranged();
            changeriverbladecamprogueranged();
            changepoisoner();
            changeriverbladecampinquisitor();
            changeIloraNaski();

            //LittleTown

            changePitaxWardenMelee();
            changePitaxWardenRanged();
            changePitaxHerald();
            changeTrebicent();
            changeBanditBigBoss();

            //Whiterose Abbey
            changeMercenaryWeretiger();
            changeMercenaryWeretigerArcher();
            changeWereratRogue();
            changeWereratAlchemistPitax();
            changeJMMTPitaxPriest();
            changegardener();

            //Irovettis Palace
            changeIrovettiGuard();
            changeGuardCaptain();
            changeGuardCaptainB();
            changePitaxPriest();
            changePitaxWardenMeleeCutsceneNeutral();
            changePitaxWardenMeleeMessHallDialogue();
            changePitaxWardenRangedCutsceneNeutral();
            changePitaxWardenRangedMessHallDialogue();
            changePitaxWardenRangedAmbush();
            changePitaxWardenFemale();
            changeMercenaryWeretigerAmbush();
            changePitaxHeraldAmbush();
            changePitaxHeraldCutsceneNeutral();
            changePitaxHeraldFemale_Ambush();
            changeWereratAlchemistChange();
            updateGoldGolemPalace();
            updateYellowGolemPalace();
            updateNirdCottenroplePitax();
            //updateLuarCottenrople();
            changeGaetane();
            updateOgreMagus();
            changeAlasen();
            changeIrovettiGhostMage();
            changeIrovetti();
            changeEngelidis();

            //Chapter 6

            //Castle of Knives

            updateAlphaWorg();
            updateAlphaTreant();
            updatePrimalTreant();
            updateCR8Treant();
            updateCR17Treant();
            updatecraglinnormknives();
            changeWrigglingManAgent();
            changeWrigglingManWorm();
            CR13_PurpleWormAdvanced();
            JabberwockCastleofKnives();
            CR20_JabberwockLesserStandard();
            updateAnkou();
            updateAnkouClone();
            updateGhostlyGuard();
            CR15_ImmenseMandragora();
            TrialImmenseMandragora();

            //House at the Edge of Time

            updateHATEOTTreant();
            updateHATEOTTreantSummoned();
            updateHATEAnkou();
            updateGhostlyGuardHATEOT();
            changeGhostlyMageHATEOT();
            updateHATEOTNymph();
            updateHATEOTElderWaterElemental();
            changeMedusaSorcererArcane();
            changeMedusaSorcererDivine();
            changeHATEOTMedusa();
            updateHATEOT_FrostGiant();
            changeMedusaPhomandala();
            updateMisbegottenTroll();
            updateDamnedTroll();
            updateKargstaad();
            updateHATEOT_Satyr();
            updateHornedHunter();
            updateWrigglingMan();
            changeWrigglingManWormSummon();
            updateKnurlyWitch();
            updateNyrissaBoss();


            //Final Dungeon (Ruined Capital)
            CR23_JabberwockStandard();
            C71_JabberwockStandard();
            FinalJabberwock();
            updateFinalDungeon_GolemAdamantine();
            WerenDegar();
            WerenDegarEnemy();
            WerenDegarEnemy2();
            updatePrimalOwlbear();
            changeAncientWarWisp();

            //The Lantern King FINAL BOSS

            LanternKing1();
            LanternKing2();
            LanternKingTwoHander();
            LanternKingSwordandShield();
            LanternDualWielder();
            LanternBow();
            LanternCrossbow();
            LanternKing3();
            LanternKing5();

            //Wild Hunt Enemies

            //Scouts

            CR15_WildHunt_ScoutStandart();
            WildHunt_ScoutSummon();
            HATEOT_WildHunt_Scout();
            HATEOT_WildHunt_Scout_1();

            //Archers

            CR13_WildHunt_ArcherHaste();
            CR13_WildHunt_ArcherStandart();
            WildHunt_ArcherSummon();
            HATEOT_WildArcher();
            HATEOT_WildHunt_Archer_1();

            //Monarchs

            CR19_WildHunt_MonarchStandart();
            HATEOT_WildHunt_Monarch();
            HATEOT_WildHunt_Monarch_1();

            //Vilderavn

            CR16_VilderavnStandard();
            HATEOT_Vilderavn();
            FinalDungeon_Vilderavn();
            FinalDungeon_Vilderavn_team1();


            //Bald Hilltop (Ancient Curses)

            changebloodmoondryad();
            changebloodmoonnymph();
            changebloodmoonnereid();
            changebloodmoonhamadryad();
            changebloodmoonwarwisp();
            BloodmoonJabberwock();
            BloodmoonWildHuntMonarch();
            BloodmoonVilderavn(); 
            

            //Elementals

            updateElderAirElemental();
            updateGreaterAirElemental();
            updateHugeAirElemental();
            updateLargeAirElemental();
            updateMediumAirElemental();
            updateSmallAirElemental();

            updateSummonedElderAirElemental();
            updateSummonedGreaterAirElemental();
            updateSummonedHugeAirElemental();
            updateSummonedLargeAirElemental();
            updateSummonedMediumAirElemental();
            updateSummonedSmallAirElemental();

            updateElderFireElemental();
            updateGreaterFireElemental();
            updateHugeFireElemental();
            updateLargeFireElemental();
            updateMediumFireElemental();
            updateSmallFireElemental();

            updateSummonedElderFireElemental();
            updateSummonedGreaterFireElemental();
            updateSummonedHugeFireElemental();
            updateSummonedLargeFireElemental();
            updateSummonedMediumFireElemental();
            updateSummmonedSmallFireElemental();

            updateElderWaterElemental();
            updateGreaterWaterElemental();
            updateHugeWaterElemental();
            updateLargeWaterElemental();
            updateMediumWaterElemental();
            updateSmallWaterElemental();


            updateSummonedElderWaterElemental();
            updateSummonedGreaterWaterElemental();
            updateSummonedHugeWaterElemental();
            updateSummonedLargeWaterElemental();
            updateSummonedMediumWaterElemental();
            updateSummonedSmallWaterElemental();


            updateElderEarthElemental();
            updateGreaterEarthElemental();
            updateHugeEarthElemental();
            updateLargeEarthElemental();
            updateMediumEarthElemental();
            updateSmallEarthElemental();

            updateSummonedElderEarthElemental();
            updateSummonedGreaterEarthElemental();
            updateSummonedHugeEarthElemental();
            updateSummonedLargeEarthElemental();
            updateSummonedMediumEarthElemental();
            updateSummonedSmallEarthElemental();

            //ExtraHealthToNPCs

            updateBartholomew();
            updateBartholomewBefore();
            updateBartholomewFinal();
            updateBartholomewPacking();
            updateBartholomewWOwhip();
            updateBartholomewPrisonAsylum();
            updateBartholomewHub();
            updateBartholomewFW();
            updateBartholomewCapital();


            updateBrevoyOfficer();
            updateBrevoySoldierMelee();
            updateBrevoySoldierMeleeSpear();
            updateBrevoySoldierMeleeSword();
            updateBrevoySoldierMeleeTough();
            updateBrevoySoldierMeleeSpearTough();
            updateBrevoySoldierMeleeToughSword();
            updateBrevoySoldierRanged();
            updateBrevoySoldierRangedTough();
            updateBrevoyAttackMage();
            updateBrevoyMage();
            updateBrevoyMageSupport();



            //Magical Prison Encounters and Miscellaneous

            updateQueenRavena();
            changeSummonedErinyes();

            updateThickLizardQueen();
            updateThickLizardKing();
            updateThickLizardfolk();

            updateDevourerEncounter();

            updateWatchfulOmen();
            changehellishskeletal();
            changehellishskeletalchamp();

            updatePatientShadow();
            changeastraancientsoul();

            changeIronGolemBoss();
            changeBabyOoze();

            updateZombieLairFighter();
            updateZombieLairArcher();
            updateZombieLairBarbarian();
            changeZombieMagus();

            updateEvilDruid();
            changequickwood();




            updatePrimrose();
            updatePrimroseTreant();
            changePrimalDryad();
            updateLostlarnSatyrBow();


            updateLadyofShallows();
            changenereidhelpers();
            updateLadyWaterElemental();




            updateInsaneWizard();
            updateFallenDeva();




            updateIllthuliak();
            updatedragonslavemelee();
            updatedragonslaveranged();
            updatedragonslaveranged2();


            updateLichKulich();
            updateGuardianArmor();


            //Tenebrious Depths

            updatespawnofrovagug();

            //Lantern King Debuff Reduction

            //updateLanternKingDebuff4();


            //Dimensional Door Changes
            changewrigglingmandoor();
            changeNyrissadoor();
            changeNyrissacharm();
            changeNyrissasummon();
            changeLanternKingdoor();


        }

        

        //CHAPTER 1



        
        static void updateKalannah()
        {

            var Kalannah = library.Get<BlueprintUnit>("91190772833c8bf4ba65bb786566b644");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var KalannahSpellList = library.Get<BlueprintFeature>("8a5d921fc1279194dbed1daa65cc8b78");
            var KalannahFeatureList = library.Get<BlueprintFeature>("d10e5863b15db1b4f93da585e1d4a9fb");
            var summonmonsterII = library.Get<BlueprintAbility>("1724061e89c667045a6891179ee2e8e7");
            var summonmonsterI = library.Get<BlueprintAbility>("8fd74eddd9b6c224693d9ab241f25e84");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var summonmonsterIII = library.Get<BlueprintAbility>("5d61dde0020bbf54ba1521f7ca0229dc");
            var bluritem = library.Get<BlueprintFeature>("dcc369a22b95ddf409071e88a3dca448");
            


            Kalannah.AddFacts = Kalannah.AddFacts.AddToArray(bluritem,blur);

            Kalannah.Intelligence = 14;

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)Kalannah.AddFacts[0], "KalannahFeatureFeatureNew", "f62e994836a14f3baa281fd5cbcb5991");
            Kalannah.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)KalannahFeatureList.GetComponent<AddFacts>().Facts[1], "KalannahSpellListNew", "cf462cecf46941b794b23f8892775095");
            KalannahFeatureList.GetComponent<AddFacts>().Facts[1] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var CR2_BanditPostiveClericFeature = library.Get<BlueprintFeature>("f62e994836a14f3baa281fd5cbcb5991");
            var CR2_BanditPostiveClericFeatureSpells = library.Get<BlueprintFeature>("cf462cecf46941b794b23f8892775095");

            


            var clericLevels = CR2_BanditPostiveClericFeature.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            var spell_list = newAddClassLevels.MemorizeSpells.RemoveFromArray(summonmonsterII);
            newAddClassLevels.MemorizeSpells = spell_list;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels, newAddClassLevels);



            var clericLevels6 = CR2_BanditPostiveClericFeature.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(summonmonsterII);
            newAddClassLevels6.MemorizeSpells = spell_list6;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels6, newAddClassLevels6);

            var clericLevels8 = CR2_BanditPostiveClericFeature.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels8 = clericLevels8.CreateCopy();
            var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(summonmonsterII);
            newAddClassLevels8.MemorizeSpells = spell_list8;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels8, newAddClassLevels8);

            var clericLevels7 = CR2_BanditPostiveClericFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(summonmonsterIII);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels7, newAddClassLevels7);

            var clericLevels2 = CR2_BanditPostiveClericFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.RemoveFromArray(summonmonsterI);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var clericLevels4 = CR2_BanditPostiveClericFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(summonmonsterI);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels4, newAddClassLevels4);

            var clericLevels3 = CR2_BanditPostiveClericFeature.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.AddToArray(snowball, snowball, acidarrow, acidarrow, blur,summonmonsterIII);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels3, newAddClassLevels3);

            var clericLevels5 = CR2_BanditPostiveClericFeature.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(acidarrow, blur,summonmonsterIII);
            newAddClassLevels5.SelectSpells = spell_list5;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels5, newAddClassLevels5);

            var superiorsummoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");

            var clericLevels9 = CR2_BanditPostiveClericFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels9 = clericLevels9.CreateCopy();
            foreach (var selection in newAddClassLevels9.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(superiorsummoning);

            }
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels9, newAddClassLevels9);


            var summonmonsterIIIai = library.Get<BlueprintAiCastSpell>("4efd8abb25894704d8c82617f9c2dee9");
            var mephitbluraiaction = library.Get<BlueprintAiCastSpell>("0c1367bfc61f76a4ca331ce53c6fc608");
            var brain = Kalannah.Brain;

            

            brain.Actions = brain.Actions.RemoveFromArray(summonmonsterIIIai);
            brain.Actions = brain.Actions.AddToArray(AiActions.summonmonsterIIId3,AiActions.acidarrownixie,mephitbluraiaction);


        }

        static void updateTartukinSycamore()
        {

            var TartukSycamore = library.Get<BlueprintUnit>("203d8959cd0b23b46b20014d8e537255");
            var sorcererclass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var TartukFireballAi = library.Get<BlueprintAiAction>("9ca807e0788499a47a8c2bee13af0b0b");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");

            TartukSycamore.AddFacts = TartukSycamore.AddFacts.AddToArray(blurbuff,quicken);





            var sorcererLevels = TartukSycamore.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == sorcererclass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(haste);
            newAddClassLevels.SelectSpells = spell_list;
            TartukSycamore.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            var brain = TartukSycamore.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(TartukFireballAi);
            brain.Actions = brain.Actions.AddToArray(AiActions.casthastetartuk,AiActions.castfireballtartuk);


        }

        static void updateSycamoreSpiderBoss()
        {

            var SycamoreSpiderBoss = library.Get<BlueprintUnit>("36fe14f64d7746f429d30f9dd7b2e652");
            var vermin = library.Get<BlueprintCharacterClass>("d1a15612d1a96334d94edf5f1d3b8d29");
            var web = library.Get<BlueprintAbility>("134cb6d492269aa4f8662700ef57449f");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");


            SycamoreSpiderBoss.Charisma = 6;
            SycamoreSpiderBoss.MaxHP = 50;


            SycamoreSpiderBoss.AddFacts = SycamoreSpiderBoss.AddFacts.AddToArray(web);

            var verminLevels = SycamoreSpiderBoss.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == vermin);
            var newverminLevels = verminLevels.CreateCopy();
            newverminLevels.Levels = 8;
            SycamoreSpiderBoss.ReplaceComponent(verminLevels, newverminLevels);

            SycamoreSpiderBoss.Body.AdditionalLimbs = SycamoreSpiderBoss.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            SycamoreSpiderBoss.Body.AdditionalLimbs = SycamoreSpiderBoss.Body.AdditionalLimbs.AddToArray(bite3d6);



            var brain = SycamoreSpiderBoss.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.useweb);

        }

        static void updateMiteQueen()
        {

            var MiteQueen = library.Get<BlueprintUnit>("7132cbddedf2e264c9bb86bba1a42cbd");
            var MiteQueen_feature = library.Get<BlueprintFeature>("a6915b9ad9e7a684dbff317bc0b67dbb");
            var fey = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var ranger = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var leadblades = library.Get<BlueprintAbility>("779179912e6c6fe458fa4cfb90d96e10");


            var feyLevels = MiteQueen.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == fey);
            var newfeyLevels = feyLevels.CreateCopy();
            newfeyLevels.Levels = 1;
            MiteQueen.ReplaceComponent(feyLevels, newfeyLevels);

            var rangerLevels = MiteQueen_feature.ComponentsArray
               .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == ranger);
            var newrangerLevels = rangerLevels.CreateCopy();
            newrangerLevels.Levels = 5;
            var spell_list = newrangerLevels.MemorizeSpells.AddToArray(leadblades);
            newrangerLevels.MemorizeSpells = spell_list;
            MiteQueen_feature.ReplaceComponent(rangerLevels, newrangerLevels);




            var brain = MiteQueen.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.leadblades);

        }

        static void updateMiteSineshal()
        {

            var MiteSineshal = library.Get<BlueprintUnit>("c2b2bdd0409298a4d8dc3bc60a8d82fd");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var summonearthsmall = library.Get<BlueprintAbility>("970c6db48ff0c6f43afc9dbb48780d03");
            



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)MiteSineshal.AddFacts[3], " MiteSineshalFeature", "ad0d124691294c43b105c7c07b753a85");
            MiteSineshal.AddFacts[3] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();


            var MiteSineshalFeature = library.Get<BlueprintFeature>("ad0d124691294c43b105c7c07b753a85");




            var clericLevels = MiteSineshalFeature.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(summonearthsmall);
            newAddClassLevels.MemorizeSpells = spell_list;
            MiteSineshalFeature.ReplaceComponent(clericLevels, newAddClassLevels);


 





            var brain = MiteSineshal.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.summonelementalsmallearth,AiActions.holdpersondsineshal,AiActions.earthaciddart);


        }

        static void updateMiteCleric()
        {

            var MiteCleric = library.Get<BlueprintUnit>("726fb074d855ba2418d563716e144893");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
           




            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)MiteCleric.AddFacts[1], "CR4MiteClericFeature", "43e82624f7db48d2a9970fd26d1baed6");
            MiteCleric.AddFacts[1] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();


            var MiteClericFeatureNew = library.Get<BlueprintFeature>("43e82624f7db48d2a9970fd26d1baed6");




            var clericLevels = MiteClericFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 4;
            MiteClericFeatureNew.ReplaceComponent(clericLevels, newAddClassLevels);








            var brain = MiteCleric.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.earthaciddartearlier);


        }

        static void updateKoboldKing()
        {

            var KoboldKing = library.Get<BlueprintUnit>("a00d3e0152a3c8142803d82b31ebc157");
            var KoboldKing_feature = library.Get<BlueprintFeature>("216023c5bf2aec148976f67a74e05b4a");
            var fighter = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");




            var fighterLevels = KoboldKing_feature.ComponentsArray
               .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == fighter);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 5;
            KoboldKing_feature.ReplaceComponent(fighterLevels, newfighterLevels);



        }

        static void updateKoboldHerald()
        {

            var KoboldHerald = library.Get<BlueprintUnit>("090d4fcb9a73f5242bc7f7f326876b89");
            var fighter = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var KoboldHeraldfeatureold = library.Get<BlueprintFeature>("17ac7f44b2f29334e953db0bc5a9e1be");
            var KoboldHeraldfeaturenew = library.Get<BlueprintFeature>("d112550a669ae8b4f99737de1ff7d837");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");

            KoboldHerald.Charisma = 16;

     




            KoboldHerald.AddFacts = KoboldHerald.AddFacts.RemoveFromArray(KoboldHeraldfeatureold);
            KoboldHerald.AddFacts = KoboldHerald.AddFacts.AddToArray(KoboldHeraldfeaturenew);
            KoboldHerald.AddFacts = KoboldHerald.AddFacts.AddToArray(inspirecourage);

              var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)KoboldHerald.AddFacts[1], " KoboldHeraldFeature", "1c4a5207edee437a82e458057bc3ff5a");
             KoboldHerald.AddFacts[1] = clone;
             clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


             var KoboldHeraldFeature = library.Get<BlueprintFeature>("1c4a5207edee437a82e458057bc3ff5a");




            var bardLevels = KoboldHeraldFeature.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == bardClass);
              var newAddClassLevels = bardLevels.CreateCopy();
              newAddClassLevels.Levels = 5;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(earpiercescream);
            newAddClassLevels.SelectSpells = spell_list;
            KoboldHeraldFeature.ReplaceComponent(bardLevels, newAddClassLevels);




            KoboldHerald.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("920c966944f98c14e9180237642b2d86"); //LightCrossbow 
            KoboldHerald.Body.Armor = null;



            var ai_action3 = library.CopyAndAdd<BlueprintAiCastSpell>("237c440dd94ad034288236d2988aa95f", "ThundercallerSoundBurstAiAction", "");

            var brain = KoboldHerald.Brain;
             brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.earpierce);


        }

        static void updateCR1_BanditBard()
        {

            var CR1_BanditBard = library.Get<BlueprintUnit>("6774bfa8c17aa6f4f88129b1451d6a4c");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var CR1_BanditBardSpellList = library.Get<BlueprintFeature>("100d875d15c7de34bbc930ed306069cd");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var CR1_BanditBardFeatureList = library.Get<BlueprintFeature>("15f335f39a871054c9711046636f3c28");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)CR1_BanditBard.AddFacts[0], "CR1_BanditBardFeatureNew", "3cdb69de99cd473cb9b7d130bd604bb7");
            CR1_BanditBard.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)CR1_BanditBardFeatureList.GetComponent<AddFacts>().Facts[0], "CR1_BanditBardSpellListNew", "ff7965e9845c40bfb67bfc3f75d6dc92");
            CR1_BanditBardFeatureList.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var CR1_BanditBardFeature = library.Get<BlueprintFeature>("3cdb69de99cd473cb9b7d130bd604bb7");
            var CR1_BanditBardFeatureSpells = library.Get<BlueprintFeature>("ff7965e9845c40bfb67bfc3f75d6dc92");



            var bardLevels = CR1_BanditBardFeature.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 4;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage);
            newAddClassLevels.SelectSpells = spell_list;
            CR1_BanditBardFeature.ReplaceComponent(bardLevels, newAddClassLevels);

            var bardLevels2 = CR1_BanditBardFeatureSpells.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == bardClass);
            var newbardLevels2 = bardLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(mirrorimage);
            newbardLevels2.Spells = spell_list2;
            CR1_BanditBardFeature.ReplaceComponent(bardLevels, newAddClassLevels);


            CR1_BanditBard.Brain.Actions = CR1_BanditBard.Brain.Actions.AddToArray(AiActions.mirrorimage,AiActions.hideouslaughterbanditbard);
        }

        static void updateCR2_BanditPostiveCleric()
        {

            var CR2_BanditPostiveCleric = library.Get<BlueprintUnit>("9ffceca100e02644ba67cf492c17d351");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var shielfoffaith = library.Get<BlueprintBuff>("5274ddc289f4a7447b7ace68ad8bebb0");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var CR2_BanditClericSpellList = library.Get<BlueprintFeature>("f619dfdb9c83e9d47a2f6608ade20377");
            var CR2_BanditClericFeatureList = library.Get<BlueprintFeature>("ed3bd34059550f14b9b94c5c60bbec3c");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var summonmonsterII = library.Get<BlueprintAbility>("1724061e89c667045a6891179ee2e8e7");
            var protcommunal = library.Get<BlueprintAbility>("2cadf6c6350e4684baa109d067277a45");




            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)CR2_BanditPostiveCleric.AddFacts[0], "CR2_BanditClericFeatureNew", "f43295f644064d89b2c9a0c5d9055a3a");
            CR2_BanditPostiveCleric.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)CR2_BanditClericFeatureList.GetComponent<AddFacts>().Facts[0], "CR2_BanditClericSpellListNew", "6df66f22eed64e61bd6e199e2cb74f27");
            CR2_BanditClericFeatureList.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var CR2_BanditPostiveClericFeature = library.Get<BlueprintFeature>("f43295f644064d89b2c9a0c5d9055a3a");
            var CR2_BanditPostiveClericFeatureSpells = library.Get<BlueprintFeature>("6df66f22eed64e61bd6e199e2cb74f27");

            CR2_BanditPostiveCleric.AddFacts = CR2_BanditPostiveCleric.AddFacts.AddToArray(shielfoffaith,combatcasting);


            var clericLevels = CR2_BanditPostiveClericFeature.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            var spell_list = newAddClassLevels.MemorizeSpells.RemoveFromArray(holdperson);
            newAddClassLevels.MemorizeSpells = spell_list;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels, newAddClassLevels);

            var clericLevels2 = CR2_BanditPostiveClericFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.RemoveFromArray(protcommunal);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var clericLevels3 = CR2_BanditPostiveClericFeature.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.AddToArray(summonmonsterII);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            CR2_BanditPostiveClericFeature.ReplaceComponent(clericLevels3, newAddClassLevels3);





            var brain = CR2_BanditPostiveCleric.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.summonmonsterII,AiActions.divinefavor,AiActions.holdpersondelay);


        }

        static void updateStagLord()
        {

            var StagLord = library.Get<BlueprintUnit>("ef69e3a2787f4f34bbcbd048902c4bd3");
            var StagLord_feature = library.Get<BlueprintFeature>("6ad0806c857cd6a429c21edd066d8b87");
            var ranger = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var entangle = library.Get<BlueprintAbility>("0fd00984a2c0e0a429cf1a911b4ec5ca");


             var rangerLevels = StagLord_feature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == ranger);
            var newrangerLevels = rangerLevels.CreateCopy();
            newrangerLevels.Levels = 10;
            var spell_list = newrangerLevels.MemorizeSpells.AddToArray(entangle);
            newrangerLevels.MemorizeSpells = spell_list;
            StagLord_feature.ReplaceComponent(rangerLevels, newrangerLevels);


            var brain = StagLord.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.entangle);

        }

        static void updateStaglordLoyalist()
        {

            var staglordloyalist = library.Get<BlueprintUnit>("d007ec20dc97ffc49a9ef579efce4a04");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");





            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)staglordloyalist.AddFacts[0], "staglordloyalistfeature", "7a76cd20f8da44be92dd4616c718d651");
            staglordloyalist.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

           


            var staglordloyalistfeature = library.Get<BlueprintFeature>("7a76cd20f8da44be92dd4616c718d651");




            var fighterLevels = staglordloyalistfeature.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;

            staglordloyalistfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            




        }

        static void updateStaglordLoyalistMage()
        {

            var StaglordLoyalistMage = library.Get<BlueprintUnit>("5a4ec98e24b3af94a9f0e46d12e22d91");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var shielfoffaith = library.Get<BlueprintBuff>("5274ddc289f4a7447b7ace68ad8bebb0");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var protcommunal = library.Get<BlueprintAbility>("2cadf6c6350e4684baa109d067277a45");
            var owlswisdom = library.Get<BlueprintAbility>("f0455c9295b53904f9e02fc571dd2ce1");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)StaglordLoyalistMage.AddFacts[0], "StaglordLoyalistMageFeature", "6f9f225ff8c042b2b97936700ee085bd");
            StaglordLoyalistMage.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();





            var StaglordLoyalistMageFeature = library.Get<BlueprintFeature>("6f9f225ff8c042b2b97936700ee085bd");


            StaglordLoyalistMage.AddFacts = StaglordLoyalistMage.AddFacts.AddToArray(shielfoffaith, combatcasting, quicken);


            var clericLevels = StaglordLoyalistMageFeature.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            var spell_list = newAddClassLevels.MemorizeSpells.RemoveFromArray(holdperson);
            newAddClassLevels.MemorizeSpells = spell_list;
            StaglordLoyalistMageFeature.ReplaceComponent(clericLevels, newAddClassLevels);

            var clericLevels2 = StaglordLoyalistMageFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.RemoveFromArray(protcommunal);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            StaglordLoyalistMageFeature.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var clericLevels3 = StaglordLoyalistMageFeature.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.AddToArray(owlswisdom);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            StaglordLoyalistMageFeature.ReplaceComponent(clericLevels3, newAddClassLevels3);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinefavor);



            var brain = StaglordLoyalistMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.summonmonsterIIIsingle, AiActions.divinefavor, AiActions.holdpersondelay,AiActions.castowlswisdom);


        }

        static void updateDovan()
        {

            var Dovan = library.Get<BlueprintUnit>("fe46840b544d73849b21e5f8988b15cc");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var pirahanastrike = library.Get<BlueprintFeature>("6a556375036ac8b4ebd80e74d308d108");
            var improvedunarmstrike = library.Get<BlueprintFeature>("7812ad3672a4b9a4fb894ea402095167");

            

            Dovan.Dexterity = 16;

            var rogueLevels = Dovan.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Dovan.ReplaceComponent(rogueLevels, newAddClassLevels);

            Dovan.AddFacts = Dovan.AddFacts.AddToArray(pirahanastrike);

            Dovan.AddFacts = Dovan.AddFacts.RemoveFromArray(improvedunarmstrike);

            var brain = Dovan.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm);


        }

        static void updateStaglordDovan()
        {

            var Dovan = library.Get<BlueprintUnit>("7ef9d1cac7c6c9641962efffbdbc8397");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var pirahanastrike = library.Get<BlueprintFeature>("6a556375036ac8b4ebd80e74d308d108");
            var improvedunarmstrike = library.Get<BlueprintFeature>("7812ad3672a4b9a4fb894ea402095167");




            Dovan.Dexterity = 16;

            var rogueLevels = Dovan.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Dovan.ReplaceComponent(rogueLevels, newAddClassLevels);

            Dovan.AddFacts = Dovan.AddFacts.AddToArray(pirahanastrike);

            Dovan.AddFacts = Dovan.AddFacts.RemoveFromArray(improvedunarmstrike);

            var brain = Dovan.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm);


        }

        static void updateStaglordDovanB()
        {

            var Dovan = library.Get<BlueprintUnit>("50763f48a8d0d734f915e6b7941c0ac7");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var pirahanastrike = library.Get<BlueprintFeature>("6a556375036ac8b4ebd80e74d308d108");
            var improvedunarmstrike = library.Get<BlueprintFeature>("7812ad3672a4b9a4fb894ea402095167");



            Dovan.Dexterity = 16;

            var rogueLevels = Dovan.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Dovan.ReplaceComponent(rogueLevels, newAddClassLevels);

            Dovan.AddFacts = Dovan.AddFacts.AddToArray(pirahanastrike);

            Dovan.AddFacts = Dovan.AddFacts.RemoveFromArray(improvedunarmstrike);

            var brain = Dovan.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm);


        }

        static void updateStaglordDovanC()
        {

            var Dovan = library.Get<BlueprintUnit>("443d8093d172d5047b1b81ac320568fa");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            
            var pirahanastrike = library.Get<BlueprintFeature>("6a556375036ac8b4ebd80e74d308d108");
            var improvedunarmstrike = library.Get<BlueprintFeature>("7812ad3672a4b9a4fb894ea402095167");




            Dovan.Dexterity = 16;

            var rogueLevels = Dovan.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Dovan.ReplaceComponent(rogueLevels, newAddClassLevels);

            Dovan.AddFacts = Dovan.AddFacts.AddToArray(pirahanastrike);

            Dovan.AddFacts = Dovan.AddFacts.RemoveFromArray(improvedunarmstrike);

            var brain = Dovan.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm);


        }

        static void updateDovanHighLevel()
        {

            var Dovan = library.Get<BlueprintUnit>("d7cf42578e4f08e469ba5d1bc5678b2a");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var improvedunarmstrike = library.Get<BlueprintFeature>("7812ad3672a4b9a4fb894ea402095167");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");


            var rogueLevels = Dovan.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 5;

            Dovan.ReplaceComponent(rogueLevels, newAddClassLevels);

            Dovan.AddFacts = Dovan.AddFacts.AddToArray(dirtytrick);

            Dovan.AddFacts = Dovan.AddFacts.RemoveFromArray(improvedunarmstrike);

            var brain = Dovan.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblinddovan);


        }

        static void updateAuch()
        {

            var Auch = library.Get<BlueprintUnit>("a892528af321d4945a64c4e10af1d6e4");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var cleave = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");




            var fighterLevels = Auch.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            Auch.ReplaceComponent(fighterLevels, newAddClassLevels);

            Auch.AddFacts = Auch.AddFacts.AddToArray(cleave);



            var brain = Auch.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);


        }

        static void updatestaglordAuch()
        {

            var Auch = library.Get<BlueprintUnit>("75e613e0a8edf654387f072a06985403");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var cleave = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");




            var fighterLevels = Auch.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            Auch.ReplaceComponent(fighterLevels, newAddClassLevels);

            Auch.AddFacts = Auch.AddFacts.AddToArray(cleave);



            var brain = Auch.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);


        }

        static void updateNugrah()
        {

            var Nugrah = library.Get<BlueprintUnit>("f9d8cbf3340d7a24e96bb498732bf531");
            var naturalspell = library.Get<BlueprintFeature>("c806103e27cce6f429e5bf47067966cf");
            var calllightningability = library.Get<BlueprintAbility>("0bd54216d38852947930320f6269a9d7");
            var StoneFistBuffMedium = library.Get<BlueprintBuff>("af56c42a31a264648b42d725f362c18d");
            var druidClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var bullsstrength = library.Get<BlueprintAbility>("4c3d08935262b6544ae97599b3a9556d");
            var natarmor5 = library.Get<BlueprintUnitFact>("7661741dbb9604842a642457456fd0e4");
            

            Nugrah.AddFacts = Nugrah.AddFacts.AddToArray(naturalspell,StoneFistBuffMedium,natarmor5);
            Nugrah.AddFacts = Nugrah.AddFacts.RemoveFromArray(calllightningability);

            var druidLevels = Nugrah.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == druidClass);
            var newAddClassLevels = druidLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(bullsstrength);
            newAddClassLevels.MemorizeSpells = spell_list;
            Nugrah.ReplaceComponent(druidLevels, newAddClassLevels);

            Nugrah.AddFacts = Nugrah.AddFacts.AddToArray(quicken);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.bullsstrength);

            var brain = Nugrah.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usewildshapebear,AiActions.castbullsstrength);


        }


        //CHAPTER 2 Trolls

        static void updateCR3_BanditAlchemist()
        {

            var CR3_BanditAlchemist = library.Get<BlueprintUnit>("cc8ae19574fd7354a81374bd8b0353d1");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var BanditAlchemistSpellListLevel4 = library.Get<BlueprintFeature>("9daac666e6d017c48be9e83553095541");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var BanditAlchemistFeatureListLevel4 = library.Get<BlueprintFeature>("f59abbee17aa3614db41404ea6524edf");
            var ExplosiveBombsFeature = library.Get<BlueprintFeature>("1d0e812131f345742adca6431d5bc4fe");
            var ExplosiveBombsBuff = library.Get<BlueprintBuff>("63063a8ab91bcbc44a13294227580e84");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var mephitbluraiaction = library.Get<BlueprintAiCastSpell>("0c1367bfc61f76a4ca331ce53c6fc608");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");

            CR3_BanditAlchemist.AddFacts = CR3_BanditAlchemist.AddFacts.AddToArray(ExplosiveBombsFeature,blurbuff);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)CR3_BanditAlchemist.AddFacts[0], "CR3_BanditAlchemistFeatureNew", "ebfe793e2c6f46c6b0918cfc8f291a27");
            CR3_BanditAlchemist.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditAlchemistFeatureListLevel4.GetComponent<AddFacts>().Facts[0], "CR3_BanditAlchemistSpellListNew", "46e8ffaf7fb64dfda6da920a6d8ed874");
            BanditAlchemistFeatureListLevel4.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var CR3_BanditAlchemistFeatureNew = library.Get<BlueprintFeature>("ebfe793e2c6f46c6b0918cfc8f291a27");
            var CR3_BanditAlchemistSpellsNew = library.Get<BlueprintFeature>("46e8ffaf7fb64dfda6da920a6d8ed874");



            var alchemistLevels = CR3_BanditAlchemistFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste,blur);
            newAddClassLevels.MemorizeSpells = spell_list;
            CR3_BanditAlchemistFeatureNew.ReplaceComponent(alchemistLevels, newAddClassLevels);

            var alchemistLevels3 = CR3_BanditAlchemistFeatureNew.ComponentsArray
 .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels3 = alchemistLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(heroism);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            CR3_BanditAlchemistFeatureNew.ReplaceComponent(alchemistLevels3, newAddClassLevels3);

            var alchemistLevels4 = CR3_BanditAlchemistFeatureNew.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels4 = alchemistLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(displacement);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            CR3_BanditAlchemistFeatureNew.ReplaceComponent(alchemistLevels4, newAddClassLevels4);

            var AlchemistLevels2 = CR3_BanditAlchemistSpellsNew.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == alchemistClass);
            var newbardLevels2 = AlchemistLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(haste,blur);
            newbardLevels2.Spells = spell_list2;
            CR3_BanditAlchemistSpellsNew.ReplaceComponent(AlchemistLevels2, newbardLevels2);

            var alchemistLevels5 = CR3_BanditAlchemistFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels5 = alchemistLevels5.CreateCopy();
            newAddClassLevels5.Levels = 7;
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(haste, blur);
            newAddClassLevels5.SelectSpells = spell_list5;
            CR3_BanditAlchemistFeatureNew.ReplaceComponent(alchemistLevels5, newAddClassLevels5);



            var brain = CR3_BanditAlchemist.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste,AiActions.blurcast);


        }

        static void updateCR6_BanditTransmuter()
        {

            var CR6_BanditTransmuter = library.Get<BlueprintUnit>("865cf4ef10f04168a340eaf879f72a15");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var BanditTransmuterSpellListLevel7 = library.Get<BlueprintFeature>("82b3f9c8fbf3a6c42b12f363e579eef3");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var BanditTransmuterFeatureListLevel7 = library.Get<BlueprintFeature>("8bcac5e1bd4f254438fa8797337137a6");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var EnlargePersonMass = library.Get<BlueprintAbility>("66dc49bf154863148bd217287079245e");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var slowaiaction = library.Get<BlueprintAiAction>("d67858e438dd8834f9e61a1cb1c592a6");
            var bullsstrength = library.Get<BlueprintAbility>("4c3d08935262b6544ae97599b3a9556d");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var enlargeperson = library.Get<BlueprintAbility>("c60969e7f264e6d4b84a1499fdcf9039");
            var hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var AcidSplashAiAction = library.Get<BlueprintAiAction>("8cf4732cf870f8f4cbf760331c8f2696");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");


            CR6_BanditTransmuter.Dexterity = 16;

            CR6_BanditTransmuter.AddFacts = CR6_BanditTransmuter.AddFacts.AddToArray(blurbuff,quicken);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)CR6_BanditTransmuter.AddFacts[0], "CR6_BanditTransmuterFeatureNew", "84e1c48c976d420e8300238b0b04d43c");
            CR6_BanditTransmuter.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditTransmuterFeatureListLevel7.GetComponent<AddFacts>().Facts[1], "CR6_BanditTransmuterSpellListNew", "258bcc72946849d492999b041ac9f442");
            BanditTransmuterFeatureListLevel7.GetComponent<AddFacts>().Facts[1] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var CR6_BanditTransmuterFeatureNew = library.Get<BlueprintFeature>("84e1c48c976d420e8300238b0b04d43c");
            var CR6_BanditTransmuterSpellsNew = library.Get<BlueprintFeature>("258bcc72946849d492999b041ac9f442");



            var wizardLevels = CR6_BanditTransmuterFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(mirrorimage,hurricanebow,magicmissle, magicmissle, magicmissle);
            newAddClassLevels.MemorizeSpells = spell_list;
            CR6_BanditTransmuterFeatureNew.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels3 = CR6_BanditTransmuterFeatureNew.ComponentsArray
 .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels3 = wizardLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(bullsstrength);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            CR6_BanditTransmuterFeatureNew.ReplaceComponent(wizardLevels3, newAddClassLevels3);

            var wizardLevels4 = CR6_BanditTransmuterFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels4 = wizardLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(enlargeperson);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            CR6_BanditTransmuterFeatureNew.ReplaceComponent(wizardLevels4, newAddClassLevels4);

            var wizardLevels6 = CR6_BanditTransmuterFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels6 = wizardLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(enlargeperson);
            newAddClassLevels6.MemorizeSpells = spell_list4;
            CR6_BanditTransmuterFeatureNew.ReplaceComponent(wizardLevels6, newAddClassLevels6);


            var wizardLevels2 = CR6_BanditTransmuterSpellsNew.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == wizardClass);
            var newbardLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(haste, blur,hurricanebow,magicmissle);
            newbardLevels2.Spells = spell_list2;
            CR6_BanditTransmuterSpellsNew.ReplaceComponent(wizardLevels2, newbardLevels2);

            var wizardLevels5 = CR6_BanditTransmuterFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(mirrorimage,hurricanebow,magicmissle, magicmissle, magicmissle);
            newAddClassLevels5.SelectSpells = spell_list5;
            CR6_BanditTransmuterFeatureNew.ReplaceComponent(wizardLevels5, newAddClassLevels5);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.hurricanebow);

            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            CR6_BanditTransmuter.Brain.Actions = new_actions;


            var brain = CR6_BanditTransmuter.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.castenlargemass,
                                                    AiActions.castslow, AiActions.hurricanebowbandittransmuter,AiActions.casthaste,AiActions.castmagicmissletransmuter);

            CR6_BanditTransmuter.GetComponent<Experience>().CR = 6;


        }

        static void updatebanditroguemeleeRW()
        {

            var banditrogueRW = library.Get<BlueprintUnit>("8c4e5cdd770c4add814b2c0e3a765811");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var invisibilitybuff = library.Get<BlueprintBuff>("525f980cb29bc2240b93e953974cb325");



            banditrogueRW.AddFacts = banditrogueRW.AddFacts.AddToArray(invisibilitybuff);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditrogueRW.AddFacts[0], "banditroguemeleeRWfeature", "59caa6d922c84958a19e284332b611cb");
            banditrogueRW.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var banditrogueRWnew = library.Get<BlueprintFeature>("59caa6d922c84958a19e284332b611cb");



            var fighterLevels = banditrogueRWnew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            banditrogueRWnew.ReplaceComponent(fighterLevels, newAddClassLevels);






            var brain = banditrogueRW.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }

        static void updatebanditroguerangedRW()
        {

            var banditrogueRW = library.Get<BlueprintUnit>("d53d5ec6942848d1bf0a4b778ba08a83");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var invisibilitybuff = library.Get<BlueprintBuff>("525f980cb29bc2240b93e953974cb325");



            banditrogueRW.AddFacts = banditrogueRW.AddFacts.AddToArray(invisibilitybuff);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditrogueRW.AddFacts[0], "banditroguerangedRWfeature", "4e1591dbd19d4468aeb0b480dec0777f");
            banditrogueRW.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var banditrogueRWnew = library.Get<BlueprintFeature>("4e1591dbd19d4468aeb0b480dec0777f");



            var fighterLevels = banditrogueRWnew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            banditrogueRWnew.ReplaceComponent(fighterLevels, newAddClassLevels);






            var brain = banditrogueRW.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }

        static void updatebanditfighterRW()
        {

            var banditfighterRW = library.Get<BlueprintUnit>("057aaf8db6bc4bc2bf963bbe1a11e316");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");

            

            banditfighterRW.AddFacts = banditfighterRW.AddFacts.AddToArray(disarm);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditfighterRW.AddFacts[0], "banditfighterRWfeature", "fdd50427e27c424c92306fe7f1e5cbcf");
            banditfighterRW.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var banditfighterRWnew = library.Get<BlueprintFeature>("fdd50427e27c424c92306fe7f1e5cbcf");


            var fighterLevels = banditfighterRWnew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            banditfighterRWnew.ReplaceComponent(fighterLevels, newAddClassLevels);


            var brain = banditfighterRW.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm,AiActions.cleave);


        }

        static void updatebanditfighterLH()
        {

            var banditfighterLH = library.Get<BlueprintUnit>("c85030f5bd794e9e8878d364edc624e6");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");

            banditfighterLH.AddFacts = banditfighterLH.AddFacts.AddToArray(disarm);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditfighterLH.AddFacts[0], "banditfighterLHfeature", "a8f73e21beda4334b7cb201dab8a94aa");
            banditfighterLH.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var banditfighterLHnew = library.Get<BlueprintFeature>("a8f73e21beda4334b7cb201dab8a94aa");


            var fighterLevels = banditfighterLHnew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            banditfighterLHnew.ReplaceComponent(fighterLevels, newAddClassLevels);


            var brain = banditfighterLH.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm,AiActions.cleave);


        }

        static void updatebanditfighterRangedRW()
        {

            var banditfighterrangedRW = library.Get<BlueprintUnit>("b6eda239cb1d48d5935e9472a2a926a7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditfighterrangedRW.AddFacts[0], "banditfighterrangedRuinWatchfeature", "02c1171e1525412081dafbe2e8b25a8d");
            banditfighterrangedRW.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var banditfighterRWnew = library.Get<BlueprintFeature>("02c1171e1525412081dafbe2e8b25a8d");


            var fighterLevels = banditfighterRWnew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            banditfighterRWnew.ReplaceComponent(fighterLevels, newAddClassLevels);


            var brain = banditfighterrangedRW.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }

        static void updatebanditfighterRangedLH()
        {

            var banditfighterrangedLH = library.Get<BlueprintUnit>("cba50ae6db564bd5b128199e1833be3e");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditfighterrangedLH.AddFacts[0], "banditfighterrangedLHfeature", "daa658a370cf4c18a854836501f714d4");
            banditfighterrangedLH.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var banditfighterLHnew = library.Get<BlueprintFeature>("daa658a370cf4c18a854836501f714d4");


            var fighterLevels = banditfighterLHnew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            banditfighterLHnew.ReplaceComponent(fighterLevels, newAddClassLevels);


            var brain = banditfighterrangedLH.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }

        static void updatebanditconjurerLH()
        {

            var banditconjurerLH = library.Get<BlueprintUnit>("16a4df6a38a54280b4819703d255136b");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var BanditConjurationFeatureListLevel7 = library.Get<BlueprintFeature>("d10e5863b15db1b4f93da585e1d4a9fb");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var EnlargePersonMass = library.Get<BlueprintAbility>("66dc49bf154863148bd217287079245e");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var slowaiaction = library.Get<BlueprintAiAction>("d67858e438dd8834f9e61a1cb1c592a6");
            var bullsstrength = library.Get<BlueprintAbility>("4c3d08935262b6544ae97599b3a9556d");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var enlargeperson = library.Get<BlueprintAbility>("c60969e7f264e6d4b84a1499fdcf9039");
            var hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var AcidSplashAiAction = library.Get<BlueprintAiAction>("8cf4732cf870f8f4cbf760331c8f2696");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var summonmonsterIV = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            var summonelementalmedium = library.Get<BlueprintAbility>("e42b1dbff4262c6469a9ff0a6ce730e3");
            var summonmonsterIII = library.Get<BlueprintAbility>("5d61dde0020bbf54ba1521f7ca0229dc");
            var fireball = library.Get<BlueprintAbility>("2d81362af43aeac4387a3d4fced489c3");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var summonmonsterII = library.Get<BlueprintAbility>("1724061e89c667045a6891179ee2e8e7");
            var summonmonsterI = library.Get<BlueprintAbility>("8fd74eddd9b6c224693d9ab241f25e84");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");

            banditconjurerLH.Dexterity = 16;

            banditconjurerLH.AddFacts = banditconjurerLH.AddFacts.AddToArray(blurbuff, quicken,combatcasting);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditconjurerLH.AddFacts[0], "banditconjurerLHfeature", "2b0c420fa6654a27b0df27b6b7c44246");
            banditconjurerLH.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditConjurationFeatureListLevel7.GetComponent<AddFacts>().Facts[1], "banditconjurerLHfeatureListNew", "0c68b796efd1498f9979a1e9dd463587");
            BanditConjurationFeatureListLevel7.GetComponent<AddFacts>().Facts[1] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var banditconjurerLHFeatureNew = library.Get<BlueprintFeature>("2b0c420fa6654a27b0df27b6b7c44246");
            var banditconjurerLHSpellsNew = library.Get<BlueprintFeature>("0c68b796efd1498f9979a1e9dd463587");



            var wizardLevels = banditconjurerLHFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(mirrorimage, magicmissle, magicmissle, magicmissle, summonelementalmedium, summonmonsterIV,haste,fireball,acidarrow,acidarrow,snowball);
            newAddClassLevels.MemorizeSpells = spell_list;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels3 = banditconjurerLHFeatureNew.ComponentsArray
 .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels3 = wizardLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(summonmonsterIV);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels3, newAddClassLevels3);

            var wizardLevels6 = banditconjurerLHFeatureNew.ComponentsArray
           .OfType<AddClassLevels>()
           .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels6 = wizardLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(summonmonsterIII);
            newAddClassLevels6.MemorizeSpells = spell_list6;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels6, newAddClassLevels6);

            var wizardLevels7 = banditconjurerLHFeatureNew.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels7 = wizardLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(summonmonsterIII);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels7, newAddClassLevels7);

            var wizardLevels8 = banditconjurerLHFeatureNew.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels8 = wizardLevels7.CreateCopy();
            var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(summonmonsterII);
            newAddClassLevels8.MemorizeSpells = spell_list8;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels8, newAddClassLevels8);

            var wizardLevels9 = banditconjurerLHFeatureNew.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels9 = wizardLevels9.CreateCopy();
            var spell_list9 = newAddClassLevels9.MemorizeSpells.RemoveFromArray(summonmonsterII);
            newAddClassLevels9.MemorizeSpells = spell_list9;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels9, newAddClassLevels9);

            var wizardLevels10 = banditconjurerLHFeatureNew.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels10 = wizardLevels10.CreateCopy();
            var spell_list10 = newAddClassLevels10.MemorizeSpells.RemoveFromArray(summonmonsterI);
            newAddClassLevels10.MemorizeSpells = spell_list10;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels10, newAddClassLevels10);

            var wizardLevels4 = banditconjurerLHFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels4 = wizardLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(summonmonsterIV);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels4, newAddClassLevels4);

            var wizardLevels2 = banditconjurerLHSpellsNew.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == wizardClass);
            var newbardLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(haste, blur, magicmissle, summonelementalmedium, summonmonsterIV,fireball,acidarrow, snowball);
            newbardLevels2.Spells = spell_list2;
            banditconjurerLHSpellsNew.ReplaceComponent(wizardLevels2, newbardLevels2);

            var wizardLevels5 = banditconjurerLHFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(mirrorimage, magicmissle, magicmissle, magicmissle, summonelementalmedium, summonmonsterIV,haste,fireball,acidarrow,acidarrow,snowball);
            newAddClassLevels5.SelectSpells = spell_list5;
            banditconjurerLHFeatureNew.ReplaceComponent(wizardLevels5, newAddClassLevels5);




            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            banditconjurerLH.Brain.Actions = new_actions;


            var brain = banditconjurerLH.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.castsummonmonsterIV,
                                                     AiActions.casthaste, AiActions.castmagicmissletransmuter,AiActions.summonelementalmediumfire, AiActions.castfireball,AiActions.castsnowballwitch);


        }

        static void updatebanditarmoredleader()
        {

            var banditarmor = library.Get<BlueprintUnit>("ca7a15c017b96ae48839f08158aa3302");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            banditarmor.AddFacts = banditarmor.AddFacts.AddToArray(sunder);


            var fighterLevels = banditarmor.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            banditarmor.ReplaceComponent(fighterLevels, newAddClassLevels);


            var brain = banditarmor.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);


        }



        static void updateKoboldKeyKeeper()
        {

            var koboldkeykeeper = library.Get<BlueprintUnit>("787131e823d4c954cb7a156b69b17f03");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var natarmor1 = library.Get<BlueprintUnitFact>("10c7c5e3c5806bc4ca676e22d6fbf17e");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            var koboldfeature4 = library.Get<BlueprintFeature>("c23e5bc94a8eb674a82c3ff88af8ce85");
            var koboldfeature2 = library.Get<BlueprintFeature>("17ac7f44b2f29334e953db0bc5a9e1be");

            koboldkeykeeper.AddFacts = koboldkeykeeper.AddFacts.RemoveFromArray(natarmor1);
            koboldkeykeeper.AddFacts = koboldkeykeeper.AddFacts.RemoveFromArray(koboldfeature2);
            koboldkeykeeper.AddFacts = koboldkeykeeper.AddFacts.AddToArray(koboldfeature4, natarmor3, trip);

            koboldkeykeeper.Dexterity = 18;

            koboldkeykeeper.Prefab = new UnitViewLink() { AssetId = "0496c6ca245b6be4494eb337a162ec49" };


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)koboldkeykeeper.AddFacts[0], "koboldkeykeeperfeaturenew", "da3b7618967147f09bd24e663684e571");
            koboldkeykeeper.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            koboldkeykeeper.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{koboldkeykeeper.name}.name", "Kobold Blade"));


            var koboldkeykeeperfeaturenew = library.Get<BlueprintFeature>("da3b7618967147f09bd24e663684e571");



            var fighterLevels = koboldkeykeeperfeaturenew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            koboldkeykeeperfeaturenew.ReplaceComponent(fighterLevels, newAddClassLevels);


            koboldkeykeeper.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("455c6750aac8fa94f8ab19f385c73ae7");//masterwork shortsword
            koboldkeykeeper.Body.SecondaryHand = null;
            koboldkeykeeper.Body.SecondaryHand = library.Get<BlueprintItemShield>("a85d51d0fb905f940b951eec60388bac"); //Light Shield
            koboldkeykeeper.Body.Armor = library.Get<BlueprintItemArmor>("9809987cc12d94545a64ff20e6fdb216");


            var brain = koboldkeykeeper.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void updateKoboldBladeCR3()
        {

            var koboldbladeCR3 = library.Get<BlueprintUnit>("3b5011e421ea0f54f93695b26c43ce33");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var natarmor1 = library.Get<BlueprintUnitFact>("10c7c5e3c5806bc4ca676e22d6fbf17e");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            

            koboldbladeCR3.AddFacts = koboldbladeCR3.AddFacts.RemoveFromArray(natarmor1);
            koboldbladeCR3.AddFacts = koboldbladeCR3.AddFacts.AddToArray(natarmor3, trip);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)koboldbladeCR3.AddFacts[0], "koboldbladeCR3featurenew", "203cc38fcd9e43daa5ccae83a02a8c84");
            koboldbladeCR3.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var koboldbladeCR3new = library.Get<BlueprintFeature>("203cc38fcd9e43daa5ccae83a02a8c84");



            var fighterLevels = koboldbladeCR3new.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            koboldbladeCR3new.ReplaceComponent(fighterLevels, newAddClassLevels);






            var brain = koboldbladeCR3.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void updateKoboldBladeCR3B()
        {

            var koboldbladeCR3 = library.Get<BlueprintUnit>("9c5720dd841249eaa2627bca7326cd40");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var natarmor1 = library.Get<BlueprintUnitFact>("10c7c5e3c5806bc4ca676e22d6fbf17e");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            var koboldfeature4 = library.Get<BlueprintFeature>("c23e5bc94a8eb674a82c3ff88af8ce85");
            var koboldfeature2 = library.Get<BlueprintFeature>("17ac7f44b2f29334e953db0bc5a9e1be");

            koboldbladeCR3.AddFacts = koboldbladeCR3.AddFacts.RemoveFromArray(natarmor1);
            koboldbladeCR3.AddFacts = koboldbladeCR3.AddFacts.RemoveFromArray(koboldfeature2);
            koboldbladeCR3.AddFacts = koboldbladeCR3.AddFacts.AddToArray(koboldfeature4,natarmor3, trip);

            koboldbladeCR3.Dexterity = 18;

            koboldbladeCR3.Prefab = new UnitViewLink() { AssetId = "0496c6ca245b6be4494eb337a162ec49" };


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)koboldbladeCR3.AddFacts[0], "koboldbladeCR3featurenewB", "3d8b1fefe54e422ba589291b3160f9b9");
            koboldbladeCR3.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var koboldbladeCR3new = library.Get<BlueprintFeature>("3d8b1fefe54e422ba589291b3160f9b9");



            var fighterLevels = koboldbladeCR3new.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            koboldbladeCR3new.ReplaceComponent(fighterLevels, newAddClassLevels);


            koboldbladeCR3.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("455c6750aac8fa94f8ab19f385c73ae7");//masterwork shortsword
            koboldbladeCR3.Body.SecondaryHand = null;
            koboldbladeCR3.Body.SecondaryHand = library.Get<BlueprintItemShield>("a85d51d0fb905f940b951eec60388bac");
            koboldbladeCR3.Body.Armor = library.Get<BlueprintItemArmor>("9809987cc12d94545a64ff20e6fdb216");
            

            var brain = koboldbladeCR3.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void updateKoboldHunter()
        {

            var koboldarcher = library.Get<BlueprintUnit>("bd58fd5e18aa48d891045e42fe5f2afc");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var koboldfeaturearcher5 = library.Get<BlueprintFeature>("967acc8bcc56c424b88227a70be86579");
            var koboldfeaturearcher2 = library.Get<BlueprintFeature>("eb991372af2e14840a73c699ae4937fc");



            koboldarcher.AddFacts = koboldarcher.AddFacts.RemoveFromArray(koboldfeaturearcher2);
            koboldarcher.AddFacts = koboldarcher.AddFacts.AddToArray(koboldfeaturearcher5);


            


        }

        static void updateKoboldEvokerTrollbold()
        {

            var koboldevoker = library.Get<BlueprintUnit>("7c2e6cbfc0644d1c80a13c6f4d8aa294");
            var natarmor1 = library.Get<BlueprintUnitFact>("10c7c5e3c5806bc4ca676e22d6fbf17e");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var KoboldShamanFeatureListLevel5 = library.Get<BlueprintFeature>("451774fee21d0d14db1a9f10c1c886d9");
            var sorcerer = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var fireball = library.Get<BlueprintAbility>("2d81362af43aeac4387a3d4fced489c3");






            koboldevoker.AddFacts = koboldevoker.AddFacts.AddToArray(combatcasting,blurbuff);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)koboldevoker.AddFacts[0], "koboldevokertroboldfeature", "11d6fde1de9342eebec2b89cfd8121f5");
            koboldevoker.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)KoboldShamanFeatureListLevel5.GetComponent<AddFacts>().Facts[0], "KoboldEvokerSpellListnew", "1bd437b495544e0dbcf8c8e20dde406e");
            KoboldShamanFeatureListLevel5.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var koboldonmarchshamanfeature = library.Get<BlueprintFeature>("11d6fde1de9342eebec2b89cfd8121f5");
            var koboldonmarchshamanspelllist = library.Get<BlueprintFeature>("1bd437b495544e0dbcf8c8e20dde406e");

            var sorcererLevels = koboldonmarchshamanfeature.ComponentsArray
           .OfType<AddClassLevels>()
           .First(c => c.CharacterClass == sorcerer);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 6;

            koboldonmarchshamanfeature.ReplaceComponent(sorcererLevels, newAddClassLevels);



            var sorcererLevels2 = koboldonmarchshamanspelllist.ComponentsArray
     .OfType<LearnSpells>()
    .First(c => c.CharacterClass == sorcerer);
            var newsorcererLevels2 = sorcererLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.Spells.AddToArray(haste, fireball);
            newsorcererLevels2.Spells = spell_list2;
            koboldonmarchshamanspelllist.ReplaceComponent(sorcererLevels2, newsorcererLevels2);


            var brain = koboldevoker.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castfireball,AiActions.casthastegoblin,AiActions.mirrorimage,AiActions.scorchingraydelay);

        }

        static void updateKoboldOnMarchShaman()
        {

            var koboldonmarchshaman = library.Get<BlueprintUnit>("8d5c0bf59f438734aad7396dce8ab4a0");
            var natarmor1 = library.Get<BlueprintUnitFact>("10c7c5e3c5806bc4ca676e22d6fbf17e");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var KoboldShamanFeatureListLevel5 = library.Get<BlueprintFeature>("451774fee21d0d14db1a9f10c1c886d9");
            var sorcerer = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");





            koboldonmarchshaman.AddFacts = koboldonmarchshaman.AddFacts.RemoveFromArray(natarmor1);
            koboldonmarchshaman.AddFacts = koboldonmarchshaman.AddFacts.AddToArray(natarmor3, KoboldShamanFeatureListLevel5, combatcasting, blurbuff);
            koboldonmarchshaman.AddFacts = koboldonmarchshaman.AddFacts.AddToArray(combatcasting, blurbuff);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)koboldonmarchshaman.AddFacts[6], "koboldonmarchshamanfeature", "057a726f59574304a14523cd3cb6d80c");
            koboldonmarchshaman.AddFacts[6] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)KoboldShamanFeatureListLevel5.GetComponent<AddFacts>().Facts[0], "KoboldOnMarchSpellList", "fe2498ed843e4bdcb381959e031037e8");
            KoboldShamanFeatureListLevel5.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var koboldonmarchshamanfeature = library.Get<BlueprintFeature>("057a726f59574304a14523cd3cb6d80c");
            var koboldonmarchshamanspelllist = library.Get<BlueprintFeature>("fe2498ed843e4bdcb381959e031037e8");

            var sorcererLevels = koboldonmarchshamanfeature.ComponentsArray
           .OfType<AddClassLevels>()
           .First(c => c.CharacterClass == sorcerer);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 2;

            koboldonmarchshamanfeature.ReplaceComponent(sorcererLevels, newAddClassLevels);



            var sorcererLevels2 = koboldonmarchshamanspelllist.ComponentsArray
     .OfType<LearnSpells>()
    .First(c => c.CharacterClass == sorcerer);
            var newsorcererLevels2 = sorcererLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.Spells.AddToArray(haste, lightningbolt);
            newsorcererLevels2.Spells = spell_list2;
            koboldonmarchshamanspelllist.ReplaceComponent(sorcererLevels2, newsorcererLevels2);


            var brain = koboldonmarchshaman.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental, AiActions.casthastegoblin, AiActions.mirrorimage, AiActions.scorchingraydelay);

        }

        static void updateKoboldAlchemistCR4()
        {

            var koboldalchemistCR4 = library.Get<BlueprintUnit>("b6138a9526b951b4ba99de864627ae6a");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var natarmor1 = library.Get<BlueprintUnitFact>("10c7c5e3c5806bc4ca676e22d6fbf17e");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");

            

            koboldalchemistCR4.AddFacts = koboldalchemistCR4.AddFacts.RemoveFromArray(natarmor1);
            koboldalchemistCR4.AddFacts = koboldalchemistCR4.AddFacts.AddToArray(natarmor3);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)koboldalchemistCR4.AddFacts[0], "koboldalchemistCR4featurenew", "71de291a8701403597f133482a7ea8d8");
            koboldalchemistCR4.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var koboldalchemistCR4new = library.Get<BlueprintFeature>("71de291a8701403597f133482a7ea8d8");



            var alchemistLevels = koboldalchemistCR4new.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(precisebomb);

            }
            koboldalchemistCR4new.ReplaceComponent(alchemistLevels, newAddClassLevels);









        }

        static void updateKoboldBoomsayer()
        {

            var koboldboomsayer = library.Get<BlueprintUnit>("b1c33857b8359674681d8677036bdbf0");
            
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
            var extra_performance = library.Get<BlueprintFeature>("0d3651b2cb0d89448b112e23214e744e");






            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)koboldboomsayer.AddFacts[0], "koboldboomsayerfeaturenew", "712b335de7314004ad6bf859bebd36d6");
            koboldboomsayer.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            koboldboomsayer.AddFacts = koboldboomsayer.AddFacts.AddToArray(inspirecourage, extra_performance);

           
            var koboldboomsayerfeaturenew = library.Get<BlueprintFeature>("712b335de7314004ad6bf859bebd36d6");



            var bardLevels = koboldboomsayerfeaturenew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            koboldboomsayerfeaturenew.ReplaceComponent(bardLevels, newAddClassLevels);






          


        }

        static void updateJazon()
        {

            var rugga = library.Get<BlueprintUnit>("7a8b35a967fe3c447acd0f82f0d7724a");


            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var druidClass= library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
            var extra_performance = library.Get<BlueprintFeature>("0d3651b2cb0d89448b112e23214e744e");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var summonelementalmedium = library.Get<BlueprintAbility>("e42b1dbff4262c6469a9ff0a6ce730e3");
            var calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            var stonecall = library.Get<BlueprintAbility>("5181c2ed0190fc34b8a1162783af5bf4");
            var stonefist = library.Get<BlueprintAbility>("85067a04a97416949b5d1dbf986d93f3");
            






            rugga.AddFacts = rugga.AddFacts.AddToArray(inspirecourage,extra_performance,combatcasting);

            rugga.Wisdom = 18;



            var druidLevels = rugga.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = druidLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            newAddClassLevels.Levels = 7;
            rugga.ReplaceComponent(druidLevels, newAddClassLevels);

            var druidLevels2 = rugga.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == druidClass);
            var newAddClassLevels2 = druidLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(summonelementalmedium,calllightning,calllightning,stonecall,stonefist);
            newAddClassLevels2.MemorizeSpells = spell_list;
            rugga.ReplaceComponent(druidLevels2, newAddClassLevels2);

            var bardLevels = rugga.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels3 = bardLevels.CreateCopy();
            newAddClassLevels3.CharacterClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            newAddClassLevels3.Levels = 1;
            rugga.ReplaceComponent(bardLevels, newAddClassLevels3);









            

            var brain = rugga.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.summonelementalmediumearth,AiActions.stonecall,AiActions.calllightningthirdturn, AiActions.stonefist);


        }

        static void updateJazonEarly()
        {

            var rugga = library.Get<BlueprintUnit>("e4275533dfc132d49a73ac7070169a8c");


            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var druidClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
            var extra_performance = library.Get<BlueprintFeature>("0d3651b2cb0d89448b112e23214e744e");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var summonelementalmedium = library.Get<BlueprintAbility>("e42b1dbff4262c6469a9ff0a6ce730e3");
            var calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            var stonecall = library.Get<BlueprintAbility>("5181c2ed0190fc34b8a1162783af5bf4");
            var stonefist = library.Get<BlueprintAbility>("85067a04a97416949b5d1dbf986d93f3");







            rugga.AddFacts = rugga.AddFacts.AddToArray(inspirecourage, extra_performance, combatcasting);

            rugga.Wisdom = 18;



            var druidLevels = rugga.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = druidLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            newAddClassLevels.Levels = 7;
            rugga.ReplaceComponent(druidLevels, newAddClassLevels);

            var druidLevels2 = rugga.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == druidClass);
            var newAddClassLevels2 = druidLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(summonelementalmedium, calllightning, calllightning, stonecall, stonefist);
            newAddClassLevels2.MemorizeSpells = spell_list;
            rugga.ReplaceComponent(druidLevels2, newAddClassLevels2);

            var bardLevels = rugga.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels3 = bardLevels.CreateCopy();
            newAddClassLevels3.CharacterClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            newAddClassLevels3.Levels = 1;
            rugga.ReplaceComponent(bardLevels, newAddClassLevels3);











            var brain = rugga.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.summonelementalmediumearth, AiActions.stonecall, AiActions.calllightningthirdturn, AiActions.stonefist);




        }

        static void updateBoneShaman()
        {

            var boneshaman = library.Get<BlueprintUnit>("bb96b6fca3af55343a199dbbc14c4a72");
            var BoneShamanFeaturelist = library.Get<BlueprintFeature>("de7bee2497c718b4bbe623dfcc4fc78d");
            var sorcerer = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var web = library.Get<BlueprintAbility>("134cb6d492269aa4f8662700ef57449f");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var stinkycloud = library.Get<BlueprintAbility>("68a9e6d7256f1354289a39003a46d826");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");

            boneshaman.AddFacts = boneshaman.AddFacts.AddToArray(blurbuff,magearmorbuff);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)boneshaman.AddFacts[0], "BoneShamanFeature", "d35051cea94d474485ee57c0adeea011");
            boneshaman.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BoneShamanFeaturelist.GetComponent<AddFacts>().Facts[0], "BoneShamanSpellList", "4fc592a446354767ab827e45a160db25");
            BoneShamanFeaturelist.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var boneshamanfeature = library.Get<BlueprintFeature>("d35051cea94d474485ee57c0adeea011");
            var boneshamanspells = library.Get<BlueprintFeature>("4fc592a446354767ab827e45a160db25");

            var sorcererLevels = boneshamanfeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == sorcerer);
            var newsorcererLevels = sorcererLevels.CreateCopy();
            newsorcererLevels.Levels = 7;
            var spell_list = newsorcererLevels.SelectSpells.AddToArray(haste, slow, web,magicmissle);
            newsorcererLevels.SelectSpells = spell_list;
            boneshamanfeature.ReplaceComponent(sorcererLevels, newsorcererLevels);

            var sorcererLevels2 = boneshamanspells.ComponentsArray
                .OfType<LearnSpells>()
              .First(c => c.CharacterClass == sorcerer);
            var newsorcererLevels2 = sorcererLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.Spells.AddToArray(haste, slow, web,magicmissle);
            newsorcererLevels2.Spells = spell_list2;
            boneshamanspells.ReplaceComponent(sorcererLevels2, newsorcererLevels2);

           



            

            var brain = boneshaman.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthastetartuk, AiActions.castslow,AiActions.useweb,AiActions.castmagicmissletransmuter);

        }

        static void updateKoboldTeacher()
        {



            var KoboldTeacher = library.Get<BlueprintUnit>("5bffe8529599c954bab2670ab60a3c2e");
            var KoboldTeacherFeatureList = library.Get<BlueprintFeature>("c8d8812f991445d4a8dacef0390d49e0");
            var KoboldTeacherOldSpells = library.Get<BlueprintFeature>("803625d14a6afcb47bd8cc59c3b5558b");
            var sorcerer = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");






            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)KoboldTeacher.AddFacts[0], "KoboldTeacherFeature", "aed7b8c113c640f38fe4251c44fde493");
            KoboldTeacher.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            // var clone3 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)KoboldTeacher.Brain, "KoboldTeacherBrain", "e24f617a85274b209ec72ae2bd51bd8b");
            //KoboldTeacher.Brain = clone3;
            //clone3.ComponentsArray = clone3.ComponentsArray
            //    .Select(c => c.CreateCopy())
            //   .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)KoboldTeacherFeatureList.GetComponent<AddFacts>().Facts[0], "KoboldTeacherSpellList", "2778c85f85e84808a76d06bcc9a2d476");
            KoboldTeacherFeatureList.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var KoboldTeacherFeature = library.Get<BlueprintFeature>("aed7b8c113c640f38fe4251c44fde493");
            var KoboldTeacherSpellList = library.Get<BlueprintFeature>("2778c85f85e84808a76d06bcc9a2d476");
            //var KoboldTeacherBrain= library.Get<BlueprintBrain>("e24f617a85274b209ec72ae2bd51bd8b");



            var sorcererLevels = KoboldTeacherFeature.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == sorcerer);
            var newsorcererLevels = sorcererLevels.CreateCopy();
            newsorcererLevels.Levels = 7;
            var spell_list = newsorcererLevels.SelectSpells.AddToArray(haste, acidarrow, displacement);
            newsorcererLevels.SelectSpells = spell_list;
            KoboldTeacherFeature.ReplaceComponent(sorcererLevels, newsorcererLevels);

            var sorcererLevels2 = KoboldTeacherSpellList.ComponentsArray
                 .OfType<LearnSpells>()
                .First(c => c.CharacterClass == sorcerer);
            var newsorcererLevels2 = sorcererLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.Spells.AddToArray(haste, acidarrow, displacement);
            newsorcererLevels2.Spells = spell_list2;
            KoboldTeacherSpellList.ReplaceComponent(sorcererLevels2, newsorcererLevels2);

        //var sorcererLevels4 = KoboldTeacherFeature.ComponentsArray
        //   .OfType<AddClassLevels>()
        //  .First(c => c.CharacterClass == sorcerer);
        // var newsorcererLevels4 = sorcererLevels4.CreateCopy();
        //var spell_list4 = newsorcererLevels4.SelectSpells.RemoveFromArray(magicmissle);
        //newsorcererLevels4.SelectSpells = spell_list4;
        //KoboldTeacherFeature.ReplaceComponent(sorcererLevels4, newsorcererLevels4);

        //  var sorcererLevels3 = KoboldTeacherSpellList.ComponentsArray
        //  .OfType<LearnSpells>()
        //    .First(c => c.CharacterClass == sorcerer);
        // var newsorcererLevels3 = sorcererLevels2.CreateCopy();
        // var spell_list3 = newsorcererLevels3.Spells.RemoveFromArray(magicmissle);
        //  newsorcererLevels3.Spells = spell_list3;
        //  KoboldTeacherSpellList.ReplaceComponent(sorcererLevels3, newsorcererLevels3);




            var rival_brain = library.Get<BlueprintBrain>("3791a8b63cf257d46a8097c7d6902e9e");

            var new_actions = rival_brain.Actions;

            KoboldTeacher.Brain.Actions = new_actions;


            var rivalmagicmissleaiaction = library.CopyAndAdd<BlueprintAiCastSpell>("7e3aa1efcd3b39a48a97b578ee719b1b", "RivalMagicMissleAi", "");
            var ai_action2 = library.CopyAndAdd<BlueprintAiCastSpell>("c52c9c1d503180e44aebf198445d1845", "HasteAiAction", "");
            //var ai_action3 = library.CopyAndAdd<BlueprintAiCastSpell>("f081ec0ba52b30d41be591e5b1455421", "BlurAiAction", "");



            var brain = KoboldTeacher.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(rivalmagicmissleaiaction);
            brain.Actions = brain.Actions.AddToArray(AiActions.displacement_first,AiActions.magicmissledelay, ai_action2, AiActions.acidarrowdelay);



        }

        static void updateNagrundi()
        {

            var nagrundi = library.Get<BlueprintUnit>("7845110d2507b3848987d1eb172af6b4");
            var rangerClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var magicfang = library.Get<BlueprintBuff>("e7646b1dfdd22ce4ab340f295938ab8e");
            var sensevitals = library.Get<BlueprintAbility>("82962a820ebc0e7408b8582fdc3f4c0c"); 

            nagrundi.AddFacts = nagrundi.AddFacts.AddToArray(magicfang);


            var rangerLevels = nagrundi.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels = rangerLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(sensevitals);
            newAddClassLevels.MemorizeSpells = spell_list;
            nagrundi.ReplaceComponent(rangerLevels, newAddClassLevels);



            var ai_action = library.CopyAndAdd<BlueprintAiCastSpell>("d08cef5eda23b804dafc42b417eca858", "GaetaneSenseVitalsAiAction", "");
            var brain = nagrundi.Brain;
            brain.Actions = brain.Actions.AddToArray(ai_action);


        }

        static void updateNagrundiTrollHound()
        {

            var nagrunditrollhound = library.Get<BlueprintUnit>("9dddd1d587b6a7e4fa4c22fcd2ec25bf");
            var magicalbeastclass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var Trollhoundhowl = library.Get<BlueprintAbility>("78e79b09c2d724447a5c432e54ce4294");
            

            nagrunditrollhound.Strength = 26;

            nagrunditrollhound.Dexterity = 15;

            nagrunditrollhound.Constitution = 23;

            nagrunditrollhound.AddFacts = nagrunditrollhound.AddFacts.AddToArray(Trollhoundhowl);

            var magicalbeastLevels = nagrunditrollhound.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == magicalbeastclass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 12;
            nagrunditrollhound.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


            nagrunditrollhound.AddFacts = new Kingmaker.Blueprints.Facts.BlueprintUnitFact[] {

                library.Get<BlueprintUnitFact>("2efb47f3cc42a2a45a8a85d2a87cffe9"), //sizelarge
                library.Get<BlueprintFeature>("13c87ac5985cc85498ef9d1ac8b78923"), //tripdefensefourlegs
                library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c"), //weaponfocusbite
                library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e"), //lightningreflexes
                library.Get<BlueprintFeature>("8388e2e50bb779840adc8129b3d63bf1"), //improvedcriticalbite
                library.Get<BlueprintFeature>("2d115ee0e1881dd488feedc7292f1dbd") //TrollhoundInfectiousBite
          

            };
        }

        static void fixTartuk()
        {

            var tartuk = library.Get<BlueprintUnit>("f2d11f187f76f6a4eb23f0ec1395f888");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var rivalholdpersonai = library.Get<BlueprintAiCastSpell>("5f6f4119ea089a748a80b6f3f7a38f9b");


            var add_class_levels = tartuk.GetComponent<AddAbilityToCharacterComponent>();

            var ability_list = add_class_levels.Abilities.AddToArray(displacement);

            add_class_levels.Abilities = ability_list;




            var brain = tartuk.Brain;
            var ai_action = library.CopyAndAdd<BlueprintAiCastSpell>("9d914a324b2b60a4daa6c620f21f7ae5", "RivalFireballAI", "");
            var ai_action2 = library.CopyAndAdd<BlueprintAiCastSpell>("6ceb83f4e85a70f4ebf5398ea7645fc7", "RivalScorchingRayAI", "");
            brain.Actions = brain.Actions.RemoveFromArray(rivalholdpersonai);

            brain.Actions = brain.Actions.AddToArray(AiActions.displacement_first, AiActions.holdpersontartuk, ai_action, ai_action2);


        }

        static void fixHargulka()
        {

            var hargulka = library.Get<BlueprintUnit>("e83f8b843d2bbb24ea9cc13094e817c1");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");

            hargulka.Strength = 24;
            hargulka.Constitution = 26;


            hargulka.Skills.Diplomacy = 5;

            hargulka.AddFacts = hargulka.AddFacts.AddToArray(cornugon);


            var brain = hargulka.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }



        //CHAPTER 2 Season of Bloom

        //Swamp

        static void updateSwampWitch()
        {



            var SwampWitch = library.Get<BlueprintUnit>("8a8040cb628dbfe4c97b4d4e19898de3");
            var SwampWitchFeatureList = library.Get<BlueprintFeature>("cdc61df598aef7a4db2bfa911367be32");
            var SwampWitchOldSpells = library.Get<BlueprintFeature>("d4678d07c09f4804c8d342fe5454bd34");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var blindness = library.Get<BlueprintAbility>("46fd02ad56c35224c9c91c88cd457791");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var phantasmalweb = library.Get<BlueprintAbility>("12fb4a4c22549c74d949e2916a2f0b6a");
            var balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var ZombieFearAIAction = library.Get<BlueprintAiAction>("7cff1a10bbe680f4b835017c4671704a");
            var CephalMirrorImageAI = library.Get<BlueprintAiAction>("92aa06fa558317741aaa49ef312508cc");
            var SlowAiAction = library.Get<BlueprintAiAction>("d67858e438dd8834f9e61a1cb1c592a6");
            var RivalBlindnessAI = library.Get<BlueprintAiAction>("5ddad52f0ff6a6e4bb6c824ea62aa227");



        var wizardLevels = SwampWitchFeatureList.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.Levels = 10;
            var spell_list = newwizardLevels.MemorizeSpells.AddToArray(haste, displacement,phantasmalweb,mirrorimage,balefulpolymorph,snowball,snowball,snowball,snowball,boneshaker,boneshaker);
            newwizardLevels.MemorizeSpells = spell_list;
            SwampWitchFeatureList.ReplaceComponent(wizardLevels, newwizardLevels);

            var wizardLevels3 = SwampWitchFeatureList.ComponentsArray
        .OfType<AddClassLevels>()
        .First(c => c.CharacterClass == wizardClass);
            var newwizardLevels3 = wizardLevels3.CreateCopy();
            var spell_list3 = newwizardLevels3.MemorizeSpells.RemoveFromArray(blindness);
            newwizardLevels3.MemorizeSpells = spell_list3;
            SwampWitchFeatureList.ReplaceComponent(wizardLevels3, newwizardLevels3);

            var wizardLevels4 = SwampWitchFeatureList.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newwizardLevels4 = wizardLevels4.CreateCopy();
            var spell_list4 = newwizardLevels4.MemorizeSpells.RemoveFromArray(blindness);
            newwizardLevels4.MemorizeSpells = spell_list4;
            SwampWitchFeatureList.ReplaceComponent(wizardLevels4, newwizardLevels4);


            var wizardLevels5 = SwampWitchFeatureList.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newwizardLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newwizardLevels5.MemorizeSpells.RemoveFromArray(blindness);
            newwizardLevels5.MemorizeSpells = spell_list5;
            SwampWitchFeatureList.ReplaceComponent(wizardLevels5, newwizardLevels5);

            var wizardLevels6 = SwampWitchFeatureList.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newwizardLevels6 = wizardLevels6.CreateCopy();
            var spell_list6 = newwizardLevels6.MemorizeSpells.RemoveFromArray(blindness);
            newwizardLevels6.MemorizeSpells = spell_list6;
            SwampWitchFeatureList.ReplaceComponent(wizardLevels6, newwizardLevels6);

     

            var wizardLevels2 = SwampWitchOldSpells.ComponentsArray
                 .OfType<LearnSpells>()
                .First(c => c.CharacterClass == wizardClass);
            var newwizardLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newwizardLevels2.Spells.AddToArray(haste, displacement,phantasmalweb,mirrorimage,balefulpolymorph, snowball, boneshaker);
            newwizardLevels2.Spells = spell_list2;
            SwampWitchOldSpells.ReplaceComponent(wizardLevels2, newwizardLevels2);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            SwampWitch.AddFacts = SwampWitch.AddFacts.AddToArray(quicken);

            var brain = SwampWitch.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(ZombieFearAIAction);
            brain.Actions = brain.Actions.RemoveFromArray(CephalMirrorImageAI);
            brain.Actions = brain.Actions.RemoveFromArray(SlowAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(RivalBlindnessAI);
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai,AiActions.usephantasmalwebwitch,
                                                     AiActions.castslowvordakai,AiActions.castbalefulpolymorphwitch,
                                                     AiActions.castslow,AiActions.mirrorimage,AiActions.castblindnesswitch,AiActions.castfearwitch,AiActions.castsnowballwitch,AiActions.castboneshaker);



        }

        static void changeSwampWerewolf()
        {
            var SwampWerewolf = library.Get<BlueprintUnit>("59d1d038c06d81248b0cb453f39eaed3");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");


            SwampWerewolf.AddFacts = SwampWerewolf.AddFacts.AddToArray(cornugon);

            SwampWerewolf.Skills.Diplomacy = 8;



            var fighterLevels = SwampWerewolf.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 9;

            SwampWerewolf.ReplaceComponent(fighterLevels, newAddClassLevels);




            var brain = SwampWerewolf.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);



        }

        static void changeLonelyGhoul()
        {
            var LonelyGhoul = library.Get<BlueprintUnit>("7f283b7e1a9275c43854b1d78654de5f");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var LonelyGhoulFeature = library.Get<BlueprintFeature>("6abb5d86a51793045ae32fcd96127e5e");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var greatfort = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var summonundeadfriends = library.Get<BlueprintAbility>("119a6fc4756c45a7a329859f030836c2");

            LonelyGhoul.AddFacts = LonelyGhoul.AddFacts.AddToArray(summonundeadfriends);


            var fighterLevels = LonelyGhoulFeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(sunder,greatfort,cornugon);

            }
            LonelyGhoulFeature.ReplaceComponent(fighterLevels, newAddClassLevels);
            

            LonelyGhoul.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2618c8c4e4be9bc48acdbcc7d92d6dc1"); //Handaxe +1
            LonelyGhoul.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); //heavy shield +1

            var brain = LonelyGhoul.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb,AiActions.usesummonundeadfriends);



        }

        static void changeNarlmarshscythetree()
        {
            var Narlmarshscythetree = library.Get<BlueprintUnit>("4071046a044c91d4fa60300d90d52012");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            Narlmarshscythetree.Strength = 30;

            Narlmarshscythetree.MaxHP = 80;
            Narlmarshscythetree.AddFacts = Narlmarshscythetree.AddFacts.AddToArray(toughness);

            var cyclopbrain = library.Get<BlueprintBrain>("f87e097ef7ce1804a95dd6b9ba5fb77e");

            var new_actions = cyclopbrain.Actions;

            Narlmarshscythetree.Brain.Actions = new_actions;

            var brain = Narlmarshscythetree.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);



        }

        static void updateGhostPriest()

        {


            var Priestghost = library.Get<BlueprintUnit>("5b75febc11656504d9737dce197acb73");
            var clericclass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var slayliving = library.Get<BlueprintAbility>("4fbd47525382517419c66fb548fe9a67");
            var bane = library.Get<BlueprintAbility>("8bc64d869456b004b9db255cdd1ea734");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("093e88ae36b09d941aee8c1d4d628156");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var Resistenergycommunal = library.Get<BlueprintAbility>("7bb0c402f7f789d4d9fae8ca87b4c7e2");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var rayofsickening = library.Get<BlueprintAbility>("fa3078b9976a5b24caf92e20ee9c0f54");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var channelnegativeenergyfeature = library.Get<BlueprintFeature>("3adb2c906e031ee41a01bfc1d5fb7eea");
            var channelnegativeenergy = library.Get<BlueprintAbility>("89df18039ef22174b81052e2e419c728");
            var weaponfinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            
            var summonghosts2 = library.Get<BlueprintAbility>("2cbda65cde8f462baf8994af02854d4e");
            


        Priestghost.AddFacts = Priestghost.AddFacts.AddToArray(quicken,channelnegativeenergyfeature,combatcasting,summonghosts2);

            Priestghost.Dexterity = 26;

            Priestghost.Strength = 20;

            var fighterLevels = Priestghost.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 2;
            Priestghost.ReplaceComponent(fighterLevels, newAddClassLevels);



            var wizardLevels = Priestghost.GetComponent<AddClassLevels>();
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.CharacterClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            newwizardLevels.Levels = 10;
            Priestghost.AddComponent(newwizardLevels);



            var wizardLevels5 = Priestghost.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericclass);
            var newsorcererLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newsorcererLevels5.MemorizeSpells.AddToArray(boneshaker, boneshaker, slayliving, slayliving, bane, divinepower, dispel, dispel);
            newsorcererLevels5.MemorizeSpells = spell_list5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(weaponfinesse);

            }
            Priestghost.ReplaceComponent(wizardLevels5, newsorcererLevels5);


            Priestghost.Body.DisableHands = false;

            Priestghost.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("5fe90cd1d77d8f446ac955dec7c8759f"); //dagger +1



            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var brain = Priestghost.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castbane, AiActions.castslayliving, AiActions.divine_power_first,
                                                     AiActions.castresistfirecommunal, AiActions.castboneshaker, AiActions.dispel, AiActions.castrayofsickening,
                                                     AiActions.holdpersonzombiecleric,AiActions.castnegativeenergyghostcleric,
                                                     AiActions.usesummonghosts2);

        }

        static void updateGhostStandard()

        {


            var standardghost = library.Get<BlueprintUnit>("655ac57b330918c4aadc78a00fb2ccaf");
            
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var weaponfinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var unholygrace = library.Get<BlueprintFeature>("2334cca051360914d970839e81b1f7d9");

            standardghost.Dexterity = 22;

            standardghost.Strength = 18;


            {

                var wizardLevels = standardghost.GetComponent<AddClassLevels>();
                var newwizardLevels = wizardLevels.CreateCopy();
                newwizardLevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
                newwizardLevels.Levels = 1;
                standardghost.AddComponent(newwizardLevels);





                standardghost.AddFacts = standardghost.AddFacts.AddToArray(weaponfinesse);
                standardghost.AddFacts = standardghost.AddFacts.RemoveFromArray(unholygrace);


                standardghost.Body.DisableHands = false;

                standardghost.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1
                



                var brain = standardghost.Brain;
                brain.Actions = brain.Actions.AddToArray();


            }
        }


        //Lonely Barrow

        static void changeEasyBanditArcher()
        {
            var EasyArcher = library.Get<BlueprintUnit>("1c606a085e0d5d640b19ec180ab88ac2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var WeaponFocusHeavyCrossbow  = library.Get<BlueprintFeature>("6cbf2c8b9e642874e8146900f4e1db6e");
            

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)EasyArcher.AddFacts[0], "EasyArcherFeature", "4dd378fada6f4fc194302bd32201df3a");
            EasyArcher.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            EasyArcher.AddFacts = EasyArcher.AddFacts.AddToArray(WeaponFocusHeavyCrossbow);

            var EasyArcherfeature = library.Get<BlueprintFeature>("4dd378fada6f4fc194302bd32201df3a");

            

            var fighterLevels = EasyArcherfeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            EasyArcherfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            EasyArcher.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e8aa3f5ca26027b4b846de538b01ee50"); // Heavy Crossbow +1

            EasyArcher.GetComponent<Experience>().CR = 6;

            var brain = EasyArcher.Brain;
            brain.Actions = brain.Actions.AddToArray();



        }

        static void changeEasyBanditMelee()
        {
            var EasyFighter = library.Get<BlueprintUnit>("1c606a085e0d5d640b19ec180ab88ac2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var armortraining = library.Get<BlueprintFeature>("3c380607706f209499d951b29d3c44f3");

            EasyFighter.AddFacts = EasyFighter.AddFacts.AddToArray(disarm,armortraining);

            EasyFighter.MaxHP = 20;


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)EasyFighter.AddFacts[0], "EasyFighterFeature", "42687f0bebf3414d8c02ac55b9bd4333");
            EasyFighter.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var EasyFighterfeature = library.Get<BlueprintFeature>("42687f0bebf3414d8c02ac55b9bd4333");



            var fighterLevels = EasyFighterfeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            EasyFighterfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            EasyFighter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1
            EasyFighter.Body.Armor = library.Get<BlueprintItemArmor>("1638fa11f5af1814191cf6c05cdcf2b6"); //Banded Armor

            EasyFighter.GetComponent<Experience>().CR = 6;


            var brain = EasyFighter.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave,AiActions.usedisarm);



        }

        static void changeHardBanditMelee()
        {
            var HardFighter = library.Get<BlueprintUnit>("25ad4b197154ee142a866fc6621eda58");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var banditclericfeature = library.Get<BlueprintFeature>("7e05ee6b9875c354aa88985490e64baf");
            var banditfeatureold = library.Get<BlueprintFeature>("0796e3cb41397014fa31f0f7b4089273");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var summonmonsterIV = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            var summonmonsterIII = library.Get<BlueprintAbility>("5d61dde0020bbf54ba1521f7ca0229dc");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            
            

        HardFighter.AddFacts = HardFighter.AddFacts.RemoveFromArray(banditfeatureold);

            HardFighter.AddFacts = HardFighter.AddFacts.AddToArray(banditclericfeature,quicken,combatcasting);


            HardFighter.Wisdom = 17;
            HardFighter.Strength = 13;


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)HardFighter.AddFacts[0], "HardFighterFeature", "b3155989de1140548464d049a5f19ef1");
            HardFighter.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)banditclericfeature.GetComponent<AddFacts>().Facts[0], "banditclericSpellListnew", "eaa1e770e4954579b05ebc51bcf0a3a2");
            banditclericfeature.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            HardFighter.GetComponent<Experience>().CR = 6;


            var HardFighterFeature = library.Get<BlueprintFeature>("b3155989de1140548464d049a5f19ef1");

            var HardFighterSpelllist = library.Get<BlueprintFeature>("eaa1e770e4954579b05ebc51bcf0a3a2");


            var clericLevels = HardFighterFeature.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            HardFighterFeature.ReplaceComponent(clericLevels, newAddClassLevels);

            var clericLevels2 = HardFighterFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(divinepower,searing_light,searing_light,searing_light,shieldoffaith);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            HardFighterFeature.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var clericLevels3 = HardFighterFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(summonmonsterIV);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            HardFighterFeature.ReplaceComponent(clericLevels3, newAddClassLevels3);

            var clericLevels6 = HardFighterFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(summonmonsterIV);
            newAddClassLevels6.MemorizeSpells = spell_list6;
            HardFighterFeature.ReplaceComponent(clericLevels6, newAddClassLevels6);

            var clericLevels5 = HardFighterFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.MemorizeSpells.RemoveFromArray(summonmonsterIII);
            newAddClassLevels5.MemorizeSpells = spell_list5;
            HardFighterFeature.ReplaceComponent(clericLevels5, newAddClassLevels5);

            var clericLevels7 = HardFighterFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(summonmonsterIII);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            HardFighterFeature.ReplaceComponent(clericLevels7, newAddClassLevels7);



            var clericLevels4 = HardFighterSpelllist.ComponentsArray
.OfType<LearnSpells>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.Spells.AddToArray(searing_light);
            newAddClassLevels4.Spells = spell_list4;
            HardFighterSpelllist.ReplaceComponent(clericLevels4, newAddClassLevels4);



            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            HardFighter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("86d5d758c2dd24747bad1c7b1f32e9df"); //Heavy Mace +1


            var brain = HardFighter.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.divine_power_first, AiActions.prayergoblinshaman,AiActions.castsearinglight,
                                                    AiActions.blesscast,AiActions.holdpersondelaybanditcleric,AiActions.castshieldoffaith, AiActions.castsummonmonsterIV,
                                                    AiActions.castchannelpositivecleric);



        }

        static void changeHardBanditRanged()
        {
            var HardRanged = library.Get<BlueprintUnit>("340ebab8143070446b9d9ae4177868e1");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var banditfeatureold = library.Get<BlueprintFeature>("90326b88260d3a347b19aa0dbe86c757");
            var BanditIllusionistFeatureListLevel7 = library.Get<BlueprintFeature>("79dedb8dc3602654d883d9581a821627");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var slowaiaction = library.Get<BlueprintAiAction>("d67858e438dd8834f9e61a1cb1c592a6");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var fireball = library.Get<BlueprintAbility>("2d81362af43aeac4387a3d4fced489c3");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var WeaponFocusHeavyCrossbow = library.Get<BlueprintFeature>("6cbf2c8b9e642874e8146900f4e1db6e");




            HardRanged.AddFacts = HardRanged.AddFacts.RemoveFromArray(banditfeatureold);
            HardRanged.AddFacts = HardRanged.AddFacts.RemoveFromArray(WeaponFocusHeavyCrossbow);

            HardRanged.AddFacts = HardRanged.AddFacts.AddToArray(BanditIllusionistFeatureListLevel7, quicken, combatcasting);


            HardRanged.Intelligence= 17;
            HardRanged.Strength = 11;


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)HardRanged.AddFacts[0], "HardRangedFeature", "7ca17dd1f0c6410ab156670a7051c143");
            HardRanged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();





            var HardRangedFeature = library.Get<BlueprintFeature>("7ca17dd1f0c6410ab156670a7051c143");




            var wizardLevels = HardRangedFeature.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            HardRangedFeature.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels2 = HardRangedFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(haste,mirrorimage,lightningbolt,lightningbolt);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            HardRangedFeature.ReplaceComponent(wizardLevels2, newAddClassLevels2);

            var clericLevels3 = HardRangedFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.SelectSpells.AddToArray(haste,lightningbolt);
            newAddClassLevels3.SelectSpells = spell_list3;
            HardRangedFeature.ReplaceComponent(clericLevels3, newAddClassLevels3);



            var clericLevels5 = HardRangedFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.MemorizeSpells.RemoveFromArray(displacement);
            newAddClassLevels5.MemorizeSpells = spell_list5;
            HardRangedFeature.ReplaceComponent(clericLevels5, newAddClassLevels5);


            HardRanged.GetComponent<Experience>().CR = 6;



            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            HardRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f5528acb89757ab4fb9350f45cc4f3b4"); //LightCrossbow +1
            HardRanged.Body.Armor = null;

            var brain = HardRanged.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltfourturns,AiActions.displacementvordakai,AiActions.mirrorimage,
                                                     AiActions.scorchingraydelay,AiActions.magicmissledelay,AiActions.castphantasmalkiller,AiActions.castinvisibilitygreater,AiActions.casthaste);



        }

        static void changeGraveRobber()
        {
            var GraveRobberLead = library.Get<BlueprintUnit>("40d09f58188b10c46882ca40584086a7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var inquisitorClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var fester = library.Get<BlueprintAbility>("2dbe271c979d9104c8e2e6b42e208e32");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var aid = library.Get<BlueprintAbility>("03a9630394d10164a9410882d31572f0");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var HasteScroll = library.Get<BlueprintItemEquipmentUsable>("6b3f04dd5eb9675499f815d5086fe018");
            var AidBuffCL20 = library.Get<BlueprintBuff>("b2cc506571b5b91449851738f8a51e14");
            var ProtectionJudgementBuff = library.Get<BlueprintBuff>("99345ce7c0f8001438fee23db660d039");
            var JusticeJudgementBuff = library.Get<BlueprintBuff>("fc246eb29c8f95c449fd156759f421e9");
            var Natarmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var WeaponTrainingHeavyBlades = library.Get<BlueprintFeature>("2a0ce0186af38ed419f47fce16f93c2a");
            var WeaponSpecializationGreatsword = library.Get<BlueprintFeature>("e08b448686657bc4887584a9a47ea8f7");
            var WeaponFocusGreatsword = library.Get<BlueprintFeature>("1fe672a404d821144bdbdfdf5c244137");
            var PreciseStrike = library.Get<BlueprintFeature>("5662d1b793db90c4b9ba68037fd2a768");
            var ShakeItOff = library.Get<BlueprintFeature>("6337b37f2a7c11b4ab0831d6780bce2a");
            var ShieldWall = library.Get<BlueprintFeature>("8976de442862f82488a4b138a0a89907");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");

            var banefeature = library.Get<BlueprintFeature>("a0571cc93916dcf498bcea611e9d5573");

            




            GraveRobberLead.AddFacts = GraveRobberLead.AddFacts.RemoveFromArray(WeaponTrainingHeavyBlades);
            GraveRobberLead.AddFacts = GraveRobberLead.AddFacts.RemoveFromArray(WeaponSpecializationGreatsword);
            GraveRobberLead.AddFacts = GraveRobberLead.AddFacts.RemoveFromArray(WeaponFocusGreatsword);


            var add_class_levels = GraveRobberLead.GetComponent<AddAbilityToCharacterComponent>();

            var ability_list = add_class_levels.Abilities.RemoveFromArray(haste);

            add_class_levels.Abilities = ability_list;



            GraveRobberLead.AddFacts = GraveRobberLead.AddFacts.AddToArray(StoneskinBuffCL11,quicken,AidBuffCL20,
                                       ProtectionJudgementBuff,JusticeJudgementBuff,Natarmor2,PreciseStrike,ShakeItOff,ShieldWall,toughness,combatcasting,dodge,banefeature);

            GraveRobberLead.Strength = 16;
            GraveRobberLead.Dexterity = 13;
            GraveRobberLead.Wisdom = 16;


            var inquisitorLevels = GraveRobberLead.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = inquisitorLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            newAddClassLevels.Levels = 11;
            GraveRobberLead.ReplaceComponent(inquisitorLevels, newAddClassLevels);

            GraveRobberLead.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("0a09740e6ab28984a8cd0e39a63dd161"); //Corrosive Rapier +2
            GraveRobberLead.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1
            GraveRobberLead.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); // Heavy Shield +1
            

            GraveRobberLead.StartingInventory = GraveRobberLead.StartingInventory.RemoveFromArray(HasteScroll);

            var wizardLevels2 = GraveRobberLead.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == inquisitorClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(heroism, fester, dispel, aid, shieldoffaith);
            newAddClassLevels2.SelectSpells = spell_list2;
            GraveRobberLead.ReplaceComponent(wizardLevels2, newAddClassLevels2);

            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            GraveRobberLead.Brain.Actions = new_actions;

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.heroism);

            GraveRobberLead.GetComponent<Experience>().CR = 8;

            var brain = GraveRobberLead.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castheroism,AiActions.dispel,AiActions.castshieldoffaith,AiActions.castfester, AiActions.divine_power_first);



        }

        static void changeLonelyBarrowSkeletonCR3()
        {
            var CR3_SkeletalChampion = library.Get<BlueprintUnit>("6f0122a6ec507dc49b217b75c42c5296");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleave = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");

            CR3_SkeletalChampion.AddFacts = CR3_SkeletalChampion.AddFacts.AddToArray(cleave);

            var fighterLevels = CR3_SkeletalChampion.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            CR3_SkeletalChampion.ReplaceComponent(fighterLevels, newAddClassLevels);

            var undeadLevels = CR3_SkeletalChampion.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 2;
            CR3_SkeletalChampion.ReplaceComponent(undeadLevels, newAddClassLevels2);


            var brain = CR3_SkeletalChampion.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);

            CR3_SkeletalChampion.GetComponent<AddTags>().UseInRandomEncounter = false;



        }

        static void changeLonelyBarrowSkeletonCR2()
        {
            var CR2_SkeletalChampion = library.Get<BlueprintUnit>("f2917899f6976fc4ebc16724a592d0b7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleave = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");

            

            CR2_SkeletalChampion.AddFacts = CR2_SkeletalChampion.AddFacts.AddToArray(cleave);

            var fighterLevels = CR2_SkeletalChampion.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            CR2_SkeletalChampion.ReplaceComponent(fighterLevels, newAddClassLevels);

            var undeadLevels = CR2_SkeletalChampion.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 2;
            CR2_SkeletalChampion.ReplaceComponent(undeadLevels, newAddClassLevels2);


            var brain = CR2_SkeletalChampion.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);


            CR2_SkeletalChampion.GetComponent<AddTags>().UseInRandomEncounter = false;

        }

        static void changeLonelyBarrowskeletal()
        {
            var holloweyearchers = library.Get<BlueprintUnit>("0518c22039c4495288dd46de248a9f96");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");






            var fighterLevels = holloweyearchers.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            holloweyearchers.ReplaceComponent(fighterLevels, newAddClassLevels);

            holloweyearchers.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2753a0159681be94da3a5eeabc8c8d1a"); //Composite Bow +1

            holloweyearchers.GetComponent<Experience>().CR = 8;




        }

        static void changeLoneWarrior()
        {
            var LoneWarrior = library.Get<BlueprintUnit>("39ace3bd77efd5546ad85b9e9947a311");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var swiftfoot = library.Get<BlueprintFeature>("7df32d4e9bd2cdc48b0f69b03a57754a");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var InspireFerocityFeature = library.Get<BlueprintFeature>("32c4d277007aed74c905779cd04a6fed");

            LoneWarrior.AddFacts = LoneWarrior.AddFacts.AddToArray(cornugon,toughness,InspireFerocityFeature);

            


            var barbarianLevels = LoneWarrior.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(swiftfoot);

            }
            LoneWarrior.ReplaceComponent(barbarianLevels, newAddClassLevels);

            LoneWarrior.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("b0545291dc59cd44083e22e06448762a"); //Greatsword frost +2

            LoneWarrior.GetComponent<Experience>().CR = 15;


            var brain = LoneWarrior.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);



        }

        //Lizardfolks


        static void changeKingVesket()
        {
            var Kingvesket = library.Get<BlueprintUnit>("5eb33299047235146936bb18a38a0af4");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var renewedvigor = library.Get<BlueprintFeature>("aad496a7c9bee224cbd01a3cf8e42061");
            var recklesstance = library.Get<BlueprintFeature>("cb502c65dab407b4e928f5d8355cafc9");
            var InspireFerocityFeature = library.Get<BlueprintFeature>("32c4d277007aed74c905779cd04a6fed");

            Kingvesket.AddFacts = Kingvesket.AddFacts.AddToArray(recklesstance, InspireFerocityFeature);
            Kingvesket.AddFacts = Kingvesket.AddFacts.RemoveFromArray(renewedvigor);



            var barbarianLevels = Kingvesket.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            Kingvesket.ReplaceComponent(barbarianLevels, newAddClassLevels);







        }

        static void changeLizardRattler()
        {
            var LizardRattler = library.Get<BlueprintUnit>("dda36438b8ffc9843b832d01d040b773");
            var clericclass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var summonmonsterIV = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            var summonmonsterIII = library.Get<BlueprintAbility>("5d61dde0020bbf54ba1521f7ca0229dc");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");

            LizardRattler.AddFacts = LizardRattler.AddFacts.AddToArray(combatcasting,quicken);

            LizardRattler.Wisdom = 19;




            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)LizardRattler.AddFacts[0], "LizardRattlerFeatureNew", "14ad70e90b2045e4ad9b4af57da0235e");
            LizardRattler.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();



            var LizardRattlerFeature = library.Get<BlueprintFeature>("14ad70e90b2045e4ad9b4af57da0235e");

            var clericLevels = LizardRattlerFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericclass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            LizardRattlerFeature.ReplaceComponent(clericLevels, newAddClassLevels);

            var clericLevels2 = LizardRattlerFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericclass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(divinepower, searing_light, searing_light);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            LizardRattlerFeature.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var clericLevels6 = LizardRattlerFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericclass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(summonmonsterIV);
            newAddClassLevels6.MemorizeSpells = spell_list6;
            LizardRattlerFeature.ReplaceComponent(clericLevels6, newAddClassLevels6);

            var clericLevels5 = LizardRattlerFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericclass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.MemorizeSpells.RemoveFromArray(summonmonsterIII);
            newAddClassLevels5.MemorizeSpells = spell_list5;
            LizardRattlerFeature.ReplaceComponent(clericLevels5, newAddClassLevels5);

            var clericLevels7 = LizardRattlerFeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericclass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(summonmonsterIII);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            LizardRattlerFeature.ReplaceComponent(clericLevels7, newAddClassLevels7);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);




            var brain = LizardRattler.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.divine_power_first, AiActions.prayergoblinshaman, AiActions.castsearinglight,
                                                    AiActions.blesscast, AiActions.holdpersondelaybanditcleric, AiActions.castshieldoffaith,
                                                    AiActions.castchannelpositivecleric);



        }

        static void changeLizardMeleeHard()
        {
            var LizardMeleeHard = library.Get<BlueprintUnit>("4d98f6f765a999f40b587ef22f79db95");
            var ChargeAbility = library.Get<BlueprintAbility>("c78506dd0e14f7c45a599990e4e65038");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");

            LizardMeleeHard.AddFacts = LizardMeleeHard.AddFacts.AddToArray(ChargeAbility);




            var fighterLevels = LizardMeleeHard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            LizardMeleeHard.ReplaceComponent(fighterLevels, newAddClassLevels);

            var brain = LizardMeleeHard.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig, AiActions.bullrush, AiActions.charge);


        }

        static void changeLizardRangedHard()
        {
            var LizardRangedHard = library.Get<BlueprintUnit>("360e49982bff21d45938e0df51f807eb");
            var ChargeAbility = library.Get<BlueprintAbility>("c78506dd0e14f7c45a599990e4e65038");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");



            LizardRangedHard.AddFacts = LizardRangedHard.AddFacts.AddToArray(ChargeAbility);




            var fighterLevels = LizardRangedHard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            LizardRangedHard.ReplaceComponent(fighterLevels, newAddClassLevels);

            var brain = LizardRangedHard.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig, AiActions.bullrush, AiActions.charge);


        }


        //Silverstep

        static void updatesilverstepfrogs()
        {

            var silverstepfrogs = library.Get<BlueprintUnit>("70266f804573468285cea8ae27437a8e");
            var AnimalClass = library.Get<BlueprintCharacterClass>("4cd1757a0eea7694ba5c933729a53920");
            
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var natrmor5 = library.Get<BlueprintUnitFact>("7661741dbb9604842a642457456fd0e4");
            var natrmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");



            silverstepfrogs.AddFacts = silverstepfrogs.AddFacts.RemoveFromArray(natrmor5);
            silverstepfrogs.AddFacts = silverstepfrogs.AddFacts.AddToArray(dodge, toughness, natrmor8);

            var dragonLevels = silverstepfrogs.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == AnimalClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            silverstepfrogs.ReplaceComponent(dragonLevels, newAddClassLevels);


            silverstepfrogs.GetComponent<Experience>().CR = 5;


        }

        static void updatesilverstepsmalltatzylwyrm()
        {

            var silverstepsmalltatzylwyrm = library.Get<BlueprintUnit>("b1027467a67844e2914ab07f109035da");
            var dragonClass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");

            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var natrmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var natrmor4 = library.Get<BlueprintUnitFact>("16fc201a83edcde4cbd64c291ebe0d07");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("9c20ebc9f7b701743944b1c76d4bf598");
            var bite1d8 = library.Get<BlueprintItemWeapon>("c988aa874d11ff84d873508ddc9b928f");
            var Claw1d6 = library.Get<BlueprintItemWeapon>("c76f72a862d168d44838206524366e1c");
            var quicklingfeature = library.Get<BlueprintFeature>("78ae3b88fd3a434489fa0731ba2eab42");
            var Claw1d4 = library.Get<BlueprintItemWeapon>("118fdd03e569a66459ab01a20af6811a");

            silverstepsmalltatzylwyrm.Strength = 18;
            silverstepsmalltatzylwyrm.Dexterity = 16;
            silverstepsmalltatzylwyrm.Constitution = 16;
            silverstepsmalltatzylwyrm.Intelligence = 10;
            silverstepsmalltatzylwyrm.Wisdom = 17;
            silverstepsmalltatzylwyrm.Charisma = 15;





            silverstepsmalltatzylwyrm.AddFacts = silverstepsmalltatzylwyrm.AddFacts.RemoveFromArray(natrmor3);
            silverstepsmalltatzylwyrm.AddFacts = silverstepsmalltatzylwyrm.AddFacts.AddToArray(dodge,natrmor4, toughness,quicklingfeature);

            var dragonLevels = silverstepsmalltatzylwyrm.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == dragonClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            silverstepsmalltatzylwyrm.ReplaceComponent(dragonLevels, newAddClassLevels);

            silverstepsmalltatzylwyrm.Body.AdditionalLimbs = silverstepsmalltatzylwyrm.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            silverstepsmalltatzylwyrm.Body.AdditionalLimbs = silverstepsmalltatzylwyrm.Body.AdditionalLimbs.RemoveFromArray(Claw1d4);
            silverstepsmalltatzylwyrm.Body.AdditionalLimbs = silverstepsmalltatzylwyrm.Body.AdditionalLimbs.RemoveFromArray(Claw1d4);
            silverstepsmalltatzylwyrm.Body.AdditionalLimbs = silverstepsmalltatzylwyrm.Body.AdditionalLimbs.AddToArray(bite2d6, Claw1d6, Claw1d6);



            silverstepsmalltatzylwyrm.GetComponent<Experience>().CR = 9;


        }

        static void updateLargeTatzlwyrm()
        {

            var Largetatzylwyrm = library.Get<BlueprintUnit>("7e9ff4d6b96af5a45846159bc249f50d");
            var dragonClass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");

            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");

            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");







            Largetatzylwyrm.AddFacts = Largetatzylwyrm.AddFacts.AddToArray(dodge, toughness);

            Largetatzylwyrm.MaxHP = 15;

            var dragonLevels = Largetatzylwyrm.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == dragonClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            Largetatzylwyrm.ReplaceComponent(dragonLevels, newAddClassLevels);




            Largetatzylwyrm.GetComponent<Experience>().CR = 8;


        }

        static void changesilverstepbanditleader()
        {
            var SilverstepLeader = library.Get<BlueprintUnit>("0fa332cc117c9034b9cf3657e9f30587");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var BanditNecromancerFeatureListLevel7 = library.Get<BlueprintFeature>("984e04d78ad20d14a965f7aabccb8900");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var fear = library.Get<BlueprintAbility>("d2aeac47450c76347aebbc02e4f463e0");
            var blindness = library.Get<BlueprintAbility>("46fd02ad56c35224c9c91c88cd457791");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var blindnessaiaction = library.Get<BlueprintAiAction>("8919ec26e5eec864cbfdc8fa018f7b2e");
            var CauseFearAiAction = library.Get<BlueprintAiAction>("650e0cf00f552744e841bf9cc578ba34");


            SilverstepLeader.AddFacts = SilverstepLeader.AddFacts.AddToArray(quicken);



            SilverstepLeader.Intelligence = 20;


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)SilverstepLeader.AddFacts[0], "SilverstepLeaderFeature", "54f053b2f4c2483fad6423d4255f2d40");
            SilverstepLeader.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditNecromancerFeatureListLevel7.GetComponent<AddFacts>().Facts[1], "SilverstepLeaderSpellListnew", "d6037b584a8d46ce93541cf671029994");
            BanditNecromancerFeatureListLevel7.GetComponent<AddFacts>().Facts[1] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var SilverstepLeaderfeature = library.Get<BlueprintFeature>("54f053b2f4c2483fad6423d4255f2d40");
            var SilverstepLeaderspells = library.Get<BlueprintFeature>("d6037b584a8d46ce93541cf671029994");


            var wizardLevels = SilverstepLeaderfeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            SilverstepLeaderfeature.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels2 = SilverstepLeaderfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(coneofcold,haste, mirrorimage, displacement,boneshatter,fear,holdperson,holdperson,boneshaker,magicmissle,magicmissle);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            SilverstepLeaderfeature.ReplaceComponent(wizardLevels2, newAddClassLevels2);

            var clericLevels3 = SilverstepLeaderfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.SelectSpells.AddToArray(coneofcold,haste,displacement,boneshatter,fear,holdperson,holdperson,mirrorimage, boneshaker,magicmissle,magicmissle);
            newAddClassLevels3.SelectSpells = spell_list3;
            SilverstepLeaderfeature.ReplaceComponent(clericLevels3, newAddClassLevels3);

            var clericLevels4 = SilverstepLeaderfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(vampirictouch);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            SilverstepLeaderfeature.ReplaceComponent(clericLevels4, newAddClassLevels4);

            var clericLevels7 = SilverstepLeaderfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(blindness);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            SilverstepLeaderfeature.ReplaceComponent(clericLevels7, newAddClassLevels7);

            var clericLevelsA = SilverstepLeaderfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevelsA = clericLevelsA.CreateCopy();
            var spell_listA = newAddClassLevels7.MemorizeSpells.RemoveFromArray(blindness);
            newAddClassLevelsA.MemorizeSpells = spell_listA;
            SilverstepLeaderfeature.ReplaceComponent(clericLevelsA, newAddClassLevelsA);

            var clericLevels8 = SilverstepLeaderfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels8 = clericLevels8.CreateCopy();
            var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(enervation);
            newAddClassLevels8.MemorizeSpells = spell_list8;
            SilverstepLeaderfeature.ReplaceComponent(clericLevels8, newAddClassLevels8);

            var clericLevels9 = SilverstepLeaderfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels9 = clericLevels9.CreateCopy();
            var spell_list9 = newAddClassLevels9.MemorizeSpells.RemoveFromArray(enervation);
            newAddClassLevels9.MemorizeSpells = spell_list9;
            SilverstepLeaderfeature.ReplaceComponent(clericLevels9, newAddClassLevels9);



            var clericLevels5 = SilverstepLeaderspells.ComponentsArray
.OfType<LearnSpells>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.Spells.RemoveFromArray(enervation);
            newAddClassLevels5.Spells = spell_list5;
            SilverstepLeaderspells.ReplaceComponent(clericLevels5, newAddClassLevels5);

            var clericLevels6 = SilverstepLeaderspells.ComponentsArray
.OfType<LearnSpells>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.Spells.AddToArray(haste,displacement,mirrorimage,coneofcold,boneshaker,magicmissle);
            newAddClassLevels6.Spells = spell_list6;
            SilverstepLeaderspells.ReplaceComponent(clericLevels6, newAddClassLevels6);

            SilverstepLeader.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f5528acb89757ab4fb9350f45cc4f3b4"); // Light Crossbow +1

            SilverstepLeader.GetComponent<Experience>().CR = 8;


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var brain = SilverstepLeader.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(blindnessaiaction);
            brain.Actions = brain.Actions.RemoveFromArray(CauseFearAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldelderwater,AiActions.displacementvordakai,
                                                     AiActions.casthastetartuk,AiActions.magicmissledelay,
                                                     AiActions.castboneshaker,AiActions.castboneshatter,
                                                     AiActions.mirrorimage,AiActions.castfearwitch,AiActions.castblindness,AiActions.castcausefeardelay);



        }

        static void updatesilverstepbanditmelee()
        {

            var Silverstepbanditmelee = library.Get<BlueprintUnit>("b3028bf95b5886c43af34e5ad3067b55");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            Silverstepbanditmelee.AddFacts = Silverstepbanditmelee.AddFacts.AddToArray(disarm);

            Silverstepbanditmelee.Constitution = 16;


            Silverstepbanditmelee.MaxHP = 15;

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)Silverstepbanditmelee.AddFacts[0], "SilverstepmeleeFeature", "f1a14bfae1554591b37d601f4eb3b58b");
            Silverstepbanditmelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var Silverstepbanditmeleefeature = library.Get<BlueprintFeature>("f1a14bfae1554591b37d601f4eb3b58b");



            var fighterLevels = Silverstepbanditmeleefeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            Silverstepbanditmeleefeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            Silverstepbanditmelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1
            Silverstepbanditmelee.Body.Armor = library.Get<BlueprintItemArmor>("1638fa11f5af1814191cf6c05cdcf2b6"); //Banded Armor

            




            var brain = Silverstepbanditmelee.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave, AiActions.usedisarm);







        }

        static void changesilverstepbanditArcher()
        {
            var silverstepbanditArcher = library.Get<BlueprintUnit>("fc8f89cb21d70204bb1ba117a2701c04");


            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");

            var BanditRogueMeleeFeatureListLevel7 = library.Get<BlueprintFeature>("7e236e0a3ed53114bb30e4bd2c3c8505");
            var BanditFighterRangedFeatureListLevel5 = library.Get<BlueprintFeature>("2ce098266434c6947b9840b8a987cdc6");


            silverstepbanditArcher.AddFacts = silverstepbanditArcher.AddFacts.RemoveFromArray(BanditFighterRangedFeatureListLevel5);

            silverstepbanditArcher.AddFacts = silverstepbanditArcher.AddFacts.AddToArray(BanditRogueMeleeFeatureListLevel7);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)silverstepbanditArcher.AddFacts[0], "silverstepbanditroguenewFeature", "9f70e18aa2934b8abad02e222f7ce9fb");
            silverstepbanditArcher.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var silverstepbanditroguenewFeature = library.Get<BlueprintFeature>("9f70e18aa2934b8abad02e222f7ce9fb");



            var rogueLevels = silverstepbanditroguenewFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            silverstepbanditroguenewFeature.ReplaceComponent(rogueLevels, newAddClassLevels);

            silverstepbanditArcher.AddFacts = silverstepbanditArcher.AddFacts.AddToArray(dirtytrick);


            silverstepbanditArcher.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //Dagger +1

            silverstepbanditArcher.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //Dagger +1


            var brain = silverstepbanditArcher.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);


            



        }

        static void changesilverstepbanditRogue()
        {

            var silverstepbanditrogue = library.Get<BlueprintUnit>("e6f8bba279a316d4eafe74cebb4eee1d");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var BanditRogueRangedFeatureListLevel4 = library.Get<BlueprintFeature>("518a732c7e32bbd46b90fc297120e004");
            var BanditFighterRangedFeatureListLevel5 = library.Get<BlueprintFeature>("2ce098266434c6947b9840b8a987cdc6");

           

            silverstepbanditrogue.AddFacts = silverstepbanditrogue.AddFacts.RemoveFromArray(BanditRogueRangedFeatureListLevel4);

            silverstepbanditrogue.AddFacts = silverstepbanditrogue.AddFacts.AddToArray(BanditFighterRangedFeatureListLevel5);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)silverstepbanditrogue.AddFacts[0], "silverstepbanditnewarcherFeature", "5fed418fb9e34f89a987115596af951f");
            silverstepbanditrogue.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var silverstepbanditnewarcherFeature = library.Get<BlueprintFeature>("5fed418fb9e34f89a987115596af951f");


            var fighterLevels = silverstepbanditnewarcherFeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            silverstepbanditnewarcherFeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            silverstepbanditrogue.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4de4658c0e9b0d146b9a08ed6f030f8a"); //Masterwork Composite Longbow

            silverstepbanditrogue.GetComponent<Experience>().CR = 5;

            var brain = silverstepbanditrogue.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }

        static void changeSilverstepWerewolf()
        {
            var SilverstepWerewolf = library.Get<BlueprintUnit>("e79c357492dac0549b9546e1e4c6dd9b");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var armorfocuschainmail = library.Get<BlueprintFeature>("adb1548368313094ba608788befff12c");




            SilverstepWerewolf.AddFacts = SilverstepWerewolf.AddFacts.AddToArray(cornugon,armorfocuschainmail);

            SilverstepWerewolf.Constitution = 20;

            SilverstepWerewolf.Skills.Diplomacy = 10;


            SilverstepWerewolf.MaxHP = 15;


            var fighterLevels = SilverstepWerewolf.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            SilverstepWerewolf.ReplaceComponent(fighterLevels, newAddClassLevels);




            var brain = SilverstepWerewolf.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);



        }



        //Miscellaneous Season of Bloom


        static void updatefakestaglord()
        {

            var fakestaglord = library.Get<BlueprintUnit>("bf94afd79f4284e42b8116f9a478aae3");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var fakestaglordfeaturelist = library.Get<BlueprintFeature>("2b77a7aef84c68c478ddc69fa1d2c30d");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)fakestaglord.AddFacts[1], "fakestaglordfeaturenewlist", "432945dec0824604b4f637b95dd21a28");
            fakestaglord.AddFacts[1] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)fakestaglordfeaturelist.GetComponent<AddFacts>().Facts[0], "fakestaglordSpellListNew", "81c92e7614d04fb28498dacad3903d45");
            fakestaglordfeaturelist.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var fakestaglordfeaturenewlist = library.Get<BlueprintFeature>("432945dec0824604b4f637b95dd21a28");
            var fakestaglordSpellListNew = library.Get<BlueprintFeature>("81c92e7614d04fb28498dacad3903d45");

            var bardLevels = fakestaglordfeaturenewlist.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage,shout,displacement);
            newAddClassLevels.SelectSpells = spell_list;
            fakestaglordfeaturenewlist.ReplaceComponent(bardLevels, newAddClassLevels);

            var bardLevels2 = fakestaglordSpellListNew.ComponentsArray
            .OfType<LearnSpells>()
            .First(c => c.CharacterClass == bardClass);
            var newbardLevels2 = bardLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(mirrorimage, shout, displacement);
            newbardLevels2.Spells = spell_list2;
            fakestaglordSpellListNew.ReplaceComponent(bardLevels, newAddClassLevels);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);


            fakestaglord.AddFacts = fakestaglord.AddFacts.AddToArray(quicken);


            var brain = fakestaglord.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(hideouslaughterai);
            brain.Actions = brain.Actions.RemoveFromArray(slowai);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.casthaste, AiActions.hideouslaughternixie,AiActions.castslow);

        }

        static void updatecraglinnorm()
        {

            var craglinnorm = library.Get<BlueprintUnit>("b71529e55d080a04690287a31b0a6d47");
            var dragonClass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");



            var dragonLevels = craglinnorm.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == dragonClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            craglinnorm.ReplaceComponent(dragonLevels, newAddClassLevels);



            craglinnorm.GetComponent<Experience>().CR = 16;

        }

        static void fixLizardWilloWispBoss()
        {

            var LizardWilloWispBoss = library.Get<BlueprintUnit>("7f80d26947430aa47af6f1458c3d7305");
            var blur = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var abberationClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            var summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");


            var sorcererLevels = LizardWilloWispBoss.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == abberationClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            newAddClassLevels.Levels = 9;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(slow, mirrorimage);
            newAddClassLevels.SelectSpells = spell_list;
            LizardWilloWispBoss.ReplaceComponent(sorcererLevels, newAddClassLevels);


            var abberationLevels = LizardWilloWispBoss.GetComponent<AddClassLevels>();
            var newabberationLevels = abberationLevels.CreateCopy();
            newabberationLevels.CharacterClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            newabberationLevels.Levels = 8;
            LizardWilloWispBoss.AddComponent(newabberationLevels);



            LizardWilloWispBoss.AddFacts = LizardWilloWispBoss.AddFacts.AddToArray(blur, quicken);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            var brain = LizardWilloWispBoss.Brain;

            brain.Actions = brain.Actions.RemoveFromArray(oldmagicmissleswift);
            brain.Actions = brain.Actions.AddToArray(AiActions.summonmonsterVI, AiActions.dragonsbreath, AiActions.magicmissleswift, AiActions.castslow, AiActions.mirrorimage);


        }

        static void fixnereidstandard()
        {

            var nereidstandard = library.Get<BlueprintUnit>("7eef9336acefc764a8d8d16437193d5d");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var icestorm = library.Get<BlueprintAbility>("fcb028205a71ee64d98175ff39a0abf9");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");



            var sorcererLevels = nereidstandard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            newAddClassLevels.Levels = 10;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(icestorm,dragonsbreathsilver,stoneskincommunal,mirrorimage,lightningbolt,haste,displacement);
            newAddClassLevels.SelectSpells = spell_list;
            nereidstandard.ReplaceComponent(sorcererLevels, newAddClassLevels);


            var abberationLevels = nereidstandard.GetComponent<AddClassLevels>();
            var newabberationLevels = abberationLevels.CreateCopy();
            newabberationLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            newabberationLevels.Levels = 3;
            nereidstandard.AddComponent(newabberationLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);


            nereidstandard.AddFacts = nereidstandard.AddFacts.AddToArray(quicken);


            var brain = nereidstandard.Brain;

            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal, AiActions.icestorm,AiActions.dragonsbreathsilver, AiActions.mirrorimage, AiActions.lightningboltfourturns,AiActions.casthaste,AiActions.castdisplacementgoblin);

        }

        static void fixnixieprankster()
        {

            var nixiestandard = library.Get<BlueprintUnit>("7fd2ae7369b28e3489861407df3984ae");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var NixieInvisibilityGreaterAiAction = library.Get<BlueprintAiCastSpell>("9c3313c9d018695409caa9e7fba21276");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


            nixiestandard.AddFacts = nixiestandard.AddFacts.AddToArray(quicken);

            var sorcererLevels = nixiestandard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(haste,burningarc);
            newAddClassLevels.SelectSpells = spell_list;
            nixiestandard.ReplaceComponent(sorcererLevels, newAddClassLevels);




            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);



            var brain = nixiestandard.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(hideouslaughterai);
            brain.Actions = brain.Actions.RemoveFromArray(NixieInvisibilityGreaterAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.hideouslaughternixie, AiActions.burninarcnixie, AiActions.castinvisibilitygreater,AiActions.casthaste);

        }

        static void fixCandlemereWilloWispBoss()
        {

            var candlemereboss = library.Get<BlueprintUnit>("084c85929580f6a4f97caae34fab564e");
            var blur = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var abberationClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            var summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var dragonsbreathblue = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


            var sorcererLevels = candlemereboss.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == abberationClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            newAddClassLevels.Levels = 12;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(summonmonsterVI,dragonsbreathblue,slow,mirrorimage);
            newAddClassLevels.SelectSpells = spell_list;
            candlemereboss.ReplaceComponent(sorcererLevels, newAddClassLevels);


            var abberationLevels = candlemereboss.GetComponent<AddClassLevels>();
            var newabberationLevels = abberationLevels.CreateCopy();
            newabberationLevels.CharacterClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            newabberationLevels.Levels = 8;
            candlemereboss.AddComponent(newabberationLevels);



            candlemereboss.AddFacts = candlemereboss.AddFacts.AddToArray(blur,augmentsummon,superiorsummmoning,quicken);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            var brain = candlemereboss.Brain;

            brain.Actions = brain.Actions.RemoveFromArray(oldmagicmissleswift);
            brain.Actions = brain.Actions.AddToArray(AiActions.summonmonsterVI,AiActions.dragonsbreath,AiActions.magicmissleswift,AiActions.castslow, AiActions.mirrorimage);


        }

        static void fixCandlemerePriest()
        {

            var CandlemerePriest = library.Get<BlueprintUnit>("94e420a47d8297149af91310c2b1ac5b");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var summongreatair = library.Get<BlueprintAbility>("766ec978fa993034f86a372c8eb1fc10");
            var dispelgreater = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var constrictcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var superiorsummoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var SummonMonsterV = library.Get<BlueprintAbility>("0964bf88b582bed41b74e79596c4f6d9");
            var SummonMonsterVd3 = library.Get<BlueprintAbility>("715f208d545be2f4aa2d3693e6347a5a");
            var selectivechannel = library.Get<BlueprintFeature>("fd30c69417b434d47b6b03b9c1f568ff");
            var divinepowerai = library.Get<BlueprintAiCastSpell>("09de02db1b07d364795f412abb557de3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var serenity = library.Get<BlueprintAbility>("d316d3d94d20c674db2c24d7de96f6a7");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var bless = library.Get<BlueprintAbility>("90e59f4a4ada87243b7b3535a06d0638");

            CandlemerePriest.AddFacts = CandlemerePriest.AddFacts.RemoveFromArray(SummonMonsterV);
            CandlemerePriest.AddFacts = CandlemerePriest.AddFacts.RemoveFromArray(SummonMonsterVd3);
            CandlemerePriest.AddFacts = CandlemerePriest.AddFacts.RemoveFromArray(prayer);

            CandlemerePriest.AddFacts = CandlemerePriest.AddFacts.AddToArray(quicken,combatcasting);

            CandlemerePriest.Wisdom = 19;

            var clericLevels = CandlemerePriest.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 12;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(summongreatair, serenity, dispelgreater, flamestrike, righteousmight, constrictcoils, constrictcoils, divinepower, prayer,shieldoffaith,bless);
            newAddClassLevels.MemorizeSpells = spell_list;
            CandlemerePriest.ReplaceComponent(clericLevels, newAddClassLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);


            CandlemerePriest.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e8aa3f5ca26027b4b846de538b01ee50"); //HeavyCrossbow +1

            

            var brain = CandlemerePriest.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(divinepowerai);
            brain.Actions = brain.Actions.AddToArray(AiActions.summonelementalhugeair, AiActions.castserenity,
                                                     AiActions.divine_power_first, AiActions.righteousmightgoblinshaman, 
                                                     AiActions.prayergoblinshaman, AiActions.constrictingcoils, AiActions.flamestrikegoblinshaman, AiActions.greaterdispel,AiActions.castshieldoffaith,AiActions.blesscast);




        }

        //Beasts

        static void updatehuntedhydra()
        {

            var huntedcryohydra = library.Get<BlueprintUnit>("96ee2234876249df872a4fae05cac478");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var PoisonousHydraBreathWeapon = library.Get<BlueprintAbility>("1f788b54e93751d43923596b8e09035d");
            var PoisonousHydraBreathWeaponCloud = library.Get<BlueprintAbility>("cd8bff58dabcc2f48b049c89af3a3a8f");
            var HasteBuff  = library.Get<BlueprintBuff>("03464790f40c3c24aa684b57155f3280");
            var BlurBuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var DRColdIronAndMagic10 = library.Get<BlueprintFeature>("b9a197673ec62dd49b15461d61bd2937");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("45e0813484581514fbfcf49939ee050d");
            var freezefeaturelarge = library.Get<BlueprintFeature>("74218a69c8bed1c4c863361916637bcf");
            var HydraHead = library.Get<BlueprintItemNote>("390017c7d2770ef4ab705e37f070ccad");
            



            huntedcryohydra.AddFacts = huntedcryohydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeapon);
            huntedcryohydra.AddFacts = huntedcryohydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeaponCloud);

            huntedcryohydra.AddFacts = huntedcryohydra.AddFacts.AddToArray(HasteBuff,dodge,BlurBuff,DRColdIronAndMagic10,dragonsbreathsilver,freezefeaturelarge);

            var dragonLevels = huntedcryohydra.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            huntedcryohydra.ReplaceComponent(dragonLevels, newAddClassLevels);


            huntedcryohydra.GetComponent<Experience>().CR = 14;

            huntedcryohydra.StartingInventory = huntedcryohydra.StartingInventory.AddToArray(HydraHead);


            var brain = huntedcryohydra.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathsilverhydra);
        }

        static void updatecapitalhydra()
        {

            var capitalpyrohydra = library.Get<BlueprintUnit>("76706df8414046b59951e407666779f6");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var PoisonousHydraBreathWeapon = library.Get<BlueprintAbility>("1f788b54e93751d43923596b8e09035d");
            var PoisonousHydraBreathWeaponCloud = library.Get<BlueprintAbility>("cd8bff58dabcc2f48b049c89af3a3a8f");
            var HasteBuff = library.Get<BlueprintBuff>("03464790f40c3c24aa684b57155f3280");
            var BlurBuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var DRColdIronAndMagic10 = library.Get<BlueprintFeature>("b9a197673ec62dd49b15461d61bd2937");
            var dragonsbreathgold = library.Get<BlueprintAbility>("e6f5453df86bd714fa33b14c994739f3");
            var burnfeaturelarge = library.Get<BlueprintFeature>("3b423b497934aeb48a3676cca64b5b55");





            capitalpyrohydra.AddFacts = capitalpyrohydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeapon);
            capitalpyrohydra.AddFacts = capitalpyrohydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeaponCloud);

            capitalpyrohydra.AddFacts = capitalpyrohydra.AddFacts.AddToArray(HasteBuff, dodge, BlurBuff, DRColdIronAndMagic10, dragonsbreathgold, burnfeaturelarge);

            var dragonLevels = capitalpyrohydra.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            capitalpyrohydra.ReplaceComponent(dragonLevels, newAddClassLevels);


            capitalpyrohydra.GetComponent<Experience>().CR = 12;

            var brain = capitalpyrohydra.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathgoldhydra);
        }

        static void updateCR12PoisonousHydra()
        {

            var CR12PoisonousHydra = library.Get<BlueprintUnit>("101c479b6cd567b4497ce4283c6d5b3b");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var PoisonousHydraBreathWeapon = library.Get<BlueprintAbility>("1f788b54e93751d43923596b8e09035d");
            var PoisonousHydraBreathWeaponCloud = library.Get<BlueprintAbility>("cd8bff58dabcc2f48b049c89af3a3a8f");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var poisonbite = library.Get<BlueprintFeature>("094714bb08f4e1943a8e9d2384ebe573");





            CR12PoisonousHydra.AddFacts = CR12PoisonousHydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeapon);
            CR12PoisonousHydra.AddFacts = CR12PoisonousHydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeaponCloud);

            CR12PoisonousHydra.AddFacts = CR12PoisonousHydra.AddFacts.AddToArray(dodge, poisonbite, dragonsbreathgreen);

            var dragonLevels = CR12PoisonousHydra.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            CR12PoisonousHydra.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = CR12PoisonousHydra.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathgreenhydra);
        }

        static void updateCR14PoisonousHydra()
        {

            var CR14PoisonousHydra = library.Get<BlueprintUnit>("429b14ab29dd24548abf16506100fc83");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var PoisonousHydraBreathWeapon = library.Get<BlueprintAbility>("1f788b54e93751d43923596b8e09035d");
            var PoisonousHydraBreathWeaponCloud = library.Get<BlueprintAbility>("cd8bff58dabcc2f48b049c89af3a3a8f");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var poisonbite = library.Get<BlueprintFeature>("094714bb08f4e1943a8e9d2384ebe573");





            CR14PoisonousHydra.AddFacts = CR14PoisonousHydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeapon);
            CR14PoisonousHydra.AddFacts = CR14PoisonousHydra.AddFacts.RemoveFromArray(PoisonousHydraBreathWeaponCloud);

            CR14PoisonousHydra.AddFacts = CR14PoisonousHydra.AddFacts.AddToArray(dodge, poisonbite, dragonsbreathgreen);

            var dragonLevels = CR14PoisonousHydra.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 16;
            CR14PoisonousHydra.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = CR14PoisonousHydra.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathgreenhydra);
        }

        static void updateHydrabloom()
        {

            var Hydrabloom = library.Get<BlueprintUnit>("ac214470685b0884dada8d845de08137");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var bite2d6 = library.Get<BlueprintItemWeapon>("48647a4517e6512419e937f7a617ea5c");
            var bite1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");

            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydrabloom.Body.AdditionalLimbs = Hydrabloom.Body.AdditionalLimbs.AddToArray(bite2d6);



            Hydrabloom.AddFacts = Hydrabloom.AddFacts.AddToArray(dodge);

            var dragonLevels = Hydrabloom.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 12;
            Hydrabloom.ReplaceComponent(dragonLevels, newAddClassLevels);


        }

        static void updateHydraStandard()
        {

            var HydraStandard = library.Get<BlueprintUnit>("68e28734693629841a336655091c4de4");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");




            HydraStandard.AddFacts = HydraStandard.AddFacts.AddToArray(dodge);

            var dragonLevels = HydraStandard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            HydraStandard.ReplaceComponent(dragonLevels, newAddClassLevels);


        }

        static void updateHydraAdvanced()
        {

            var HydraAdvanced = library.Get<BlueprintUnit>("00a10a2129fc7de45889a7f10e06ea92");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");




            HydraAdvanced.AddFacts = HydraAdvanced.AddFacts.AddToArray(dodge);

            var dragonLevels = HydraAdvanced.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            HydraAdvanced.ReplaceComponent(dragonLevels, newAddClassLevels);


        }

        static void updateHydraAdvancedCR7()
        {

            var HydraAdvanced = library.Get<BlueprintUnit>("e135463f804adb541b402bae3f657af4");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var bite2d6 = library.Get<BlueprintItemWeapon>("48647a4517e6512419e937f7a617ea5c");
            var bite1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");




            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.AddToArray(bite2d6);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.AddToArray(bite2d6);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.AddToArray(bite2d6);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.AddToArray(bite2d6);
            HydraAdvanced.Body.AdditionalLimbs = HydraAdvanced.Body.AdditionalLimbs.AddToArray(bite2d6);

            HydraAdvanced.AddFacts = HydraAdvanced.AddFacts.AddToArray(dodge);

            var dragonLevels = HydraAdvanced.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 12;
            HydraAdvanced.ReplaceComponent(dragonLevels, newAddClassLevels);


            HydraAdvanced.GetComponent<Experience>().CR = 8;



        }

        static void updateHydraquickling()
        {

            var Hydraquickling = library.Get<BlueprintUnit>("5930c69867e498d45bdac0a51fa90094");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var bite2d6 = library.Get<BlueprintItemWeapon>("48647a4517e6512419e937f7a617ea5c");
            var bite1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");


            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydraquickling.Body.AdditionalLimbs = Hydraquickling.Body.AdditionalLimbs.AddToArray(bite2d6);

            Hydraquickling.Strength = 18;

            Hydraquickling.AddFacts = Hydraquickling.AddFacts.AddToArray(dodge);

            var dragonLevels = Hydraquickling.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            Hydraquickling.ReplaceComponent(dragonLevels, newAddClassLevels);

            Hydraquickling.GetComponent<Experience>().CR = 7;
        }

        static void updateHydravenom()
        {

            var Hydravenom = library.Get<BlueprintUnit>("be58ef2cd41e73843a14895acf9eddcb");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var bite2d6 = library.Get<BlueprintItemWeapon>("48647a4517e6512419e937f7a617ea5c");
            var bite1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");


            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.RemoveFromArray(bite1d8);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.AddToArray(bite2d6);
            Hydravenom.Body.AdditionalLimbs = Hydravenom.Body.AdditionalLimbs.AddToArray(bite2d6);

            Hydravenom.Strength = 18;

            Hydravenom.AddFacts = Hydravenom.AddFacts.AddToArray(dodge);

            var dragonLevels = Hydravenom.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            Hydravenom.ReplaceComponent(dragonLevels, newAddClassLevels);

            Hydravenom.GetComponent<Experience>().CR = 7;
        }

        static void updateOwlbearnecro()
        {

            var Owlbearnecro = library.Get<BlueprintUnit>("7ae461f01f1b1684884e784341c0b36c");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");

            Owlbearnecro.AddFacts = Owlbearnecro.AddFacts.AddToArray(vampirictouch,combatcasting,auraofdoom);

            var brain = Owlbearnecro.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castvampirictouchowlbear,AiActions.castauraofdoom);


        }

        static void updateOwlbearillusion()
        {

            var Owlbearillusion = library.Get<BlueprintUnit>("5889e9c222127a44a88a12903b6e0256");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");


            Owlbearillusion.AddFacts = Owlbearillusion.AddFacts.AddToArray(mirrorimage, combatcasting);

            var brain = Owlbearillusion.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimageowlbear);


        }

        static void updateStrongOwlbearevocation()
        {

            var strongowlbearevocation = library.Get<BlueprintUnit>("ba6dc1b987e06a1499e5ec68f38619ef");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var burningaiaction = library.Get<BlueprintAiCastSpell>("5dfe6689bf271874ab07a86e7946a61c");
            

            strongowlbearevocation.AddFacts = strongowlbearevocation.AddFacts.AddToArray(firesnake, combatcasting);

            var brain = strongowlbearevocation.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(burningaiaction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castfiresnakeowlbear);


        }

        static void updateStrongOwlbearnecro()
        {

            var strongowlbearnecro = library.Get<BlueprintUnit>("f9307a67be2d29c4a86edb03a9615463");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var ThanadaemonEnergyDrainFeature = library.Get<BlueprintFeature>("f25bec0517daa9647998764862ddb3a4");
            


            strongowlbearnecro.AddFacts = strongowlbearnecro.AddFacts.AddToArray(vampirictouch, combatcasting, ThanadaemonEnergyDrainFeature,auraofdoom);

            var brain = strongowlbearnecro.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castvampirictouchowlbear,AiActions.castauraofdoom);




        }

        static void updateStrongOwlbeartreant()
        {

            var strongowlbeartreant = library.Get<BlueprintUnit>("466189c5dd11fa3459024da71d140143");
            var stunningblowaiaction = library.Get<BlueprintAiCastSpell>("b2428bdc1e519104f8eb08e2fd06eb02");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var natarmor11 = library.Get<BlueprintUnitFact>("fe38367139432294e8c229edc066e4ac");
            var RegenerationColdIronOrFire5 = library.Get<BlueprintBuff>("da6b266204fe2ac4d89786bf66dbe3a9");
            var bite2d6 = library.Get<BlueprintItemWeapon>("48647a4517e6512419e937f7a617ea5c");
            var ClawHuge2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");
            var BiteLarge1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");
            var ClawLarge1d6 = library.Get<BlueprintItemWeapon>("c76f72a862d168d44838206524366e1c");



            strongowlbeartreant.Strength = 36;
            strongowlbeartreant.Dexterity = 12;
            strongowlbeartreant.Constitution = 36;
            strongowlbeartreant.Intelligence = 6;
            strongowlbeartreant.Wisdom = 16;
            strongowlbeartreant.Charisma = 14;


            strongowlbeartreant.Body.AdditionalLimbs = strongowlbeartreant.Body.AdditionalLimbs.RemoveFromArray(BiteLarge1d8);
            strongowlbeartreant.Body.AdditionalLimbs = strongowlbeartreant.Body.AdditionalLimbs.RemoveFromArray(ClawLarge1d6);
            strongowlbeartreant.Body.AdditionalLimbs = strongowlbeartreant.Body.AdditionalLimbs.RemoveFromArray(ClawLarge1d6);

            strongowlbeartreant.Body.AdditionalLimbs = strongowlbeartreant.Body.AdditionalLimbs.AddToArray(bite2d6);
            strongowlbeartreant.Body.AdditionalLimbs = strongowlbeartreant.Body.AdditionalLimbs.AddToArray(ClawHuge2d6);
            strongowlbeartreant.Body.AdditionalLimbs = strongowlbeartreant.Body.AdditionalLimbs.AddToArray(ClawHuge2d6);


            strongowlbeartreant.AddFacts = strongowlbeartreant.AddFacts.RemoveFromArray(natarmor11);
            strongowlbeartreant.AddFacts = strongowlbeartreant.AddFacts.AddToArray(natarmor14,RegenerationColdIronOrFire5);


            var brain = strongowlbeartreant.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(stunningblowaiaction);


        }

        static void updateSecretOwlbear()
        {

            var secretowlbear = library.Get<BlueprintUnit>("f7a107522d386a247ae5d7e2cdf88ef0");
            var stunningblowaiaction = library.Get<BlueprintAiCastSpell>("b2428bdc1e519104f8eb08e2fd06eb02");




            var brain = secretowlbear.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(stunningblowaiaction);


        }

        static void updateenragedowlbeartreant()
        {

            var enragedowlbeartreant = library.Get<BlueprintUnit>("502fa574f3c15f94ab5e03460870235f");
            var stunningblowaiaction = library.Get<BlueprintAiCastSpell>("b2428bdc1e519104f8eb08e2fd06eb02");




            var brain = enragedowlbeartreant.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(stunningblowaiaction);


        }

        static void updateBloominfusedspider()
        {

            var Bloominfusedspider = library.Get<BlueprintUnit>("a813d907bc55e734584d99a038c9211e");
            var vermin = library.Get<BlueprintCharacterClass>("d1a15612d1a96334d94edf5f1d3b8d29");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var natarmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var natarmor11 = library.Get<BlueprintUnitFact>("fe38367139432294e8c229edc066e4ac");

            Bloominfusedspider.AddFacts = Bloominfusedspider.AddFacts.RemoveFromArray(natarmor8);
            Bloominfusedspider.AddFacts = Bloominfusedspider.AddFacts.AddToArray(natarmor11);

            var verminLevels = Bloominfusedspider.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == vermin);
            var newverminLevels = verminLevels.CreateCopy();
            newverminLevels.Levels = 12;
            Bloominfusedspider.ReplaceComponent(verminLevels, newverminLevels);

            Bloominfusedspider.Body.AdditionalLimbs = Bloominfusedspider.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            Bloominfusedspider.Body.AdditionalLimbs = Bloominfusedspider.Body.AdditionalLimbs.AddToArray(bite3d6);


        }

        static void updatequicklingspider()
        {

            var quicklingspider = library.Get<BlueprintUnit>("07467e9a29a215346ab66fec7963eb62");
            var magicalbeast = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");

            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var natarmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");

            quicklingspider.AddFacts = quicklingspider.AddFacts.RemoveFromArray(natarmor6);
            quicklingspider.AddFacts = quicklingspider.AddFacts.AddToArray(natarmor9);





            var verminLevels = quicklingspider.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == magicalbeast);
            var newverminLevels = verminLevels.CreateCopy();
            newverminLevels.Levels = 10;
            quicklingspider.ReplaceComponent(verminLevels, newverminLevels);

            quicklingspider.Body.AdditionalLimbs = quicklingspider.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            quicklingspider.Body.AdditionalLimbs = quicklingspider.Body.AdditionalLimbs.AddToArray(bite3d6);


        }

        static void updatedoomspider()
        {

            var doomspider = library.Get<BlueprintUnit>("51c66b0783a748c4b9538f0f0678c4d7");
            var magicalbeast = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var web = library.Get<BlueprintAbility>("134cb6d492269aa4f8662700ef57449f");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var natarmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");




            

            doomspider.AddFacts = doomspider.AddFacts.RemoveFromArray(natarmor6);
            doomspider.AddFacts = doomspider.AddFacts.AddToArray(natarmor9,web);





            var verminLevels = doomspider.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == magicalbeast);
            var newverminLevels = verminLevels.CreateCopy();
            newverminLevels.Levels = 10;
            doomspider.ReplaceComponent(verminLevels, newverminLevels);

            doomspider.Body.AdditionalLimbs = doomspider.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            doomspider.Body.AdditionalLimbs = doomspider.Body.AdditionalLimbs.AddToArray(bite3d6);

            var brain = doomspider.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.useweb);

        }

        static void updatespidermatriarch()
        {

            var spidermatriarch = library.Get<BlueprintUnit>("63897b4df57da2f4396ca8a6f34723e7");
            var magicalbeast = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var web = library.Get<BlueprintAbility>("134cb6d492269aa4f8662700ef57449f");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");






            spidermatriarch.AddFacts = spidermatriarch.AddFacts.RemoveFromArray(natarmor10);
            spidermatriarch.AddFacts = spidermatriarch.AddFacts.AddToArray(natarmor14, web);





            var verminLevels = spidermatriarch.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == magicalbeast);
            var newverminLevels = verminLevels.CreateCopy();
            newverminLevels.Levels = 15;
            spidermatriarch.ReplaceComponent(verminLevels, newverminLevels);

            spidermatriarch.Body.AdditionalLimbs = spidermatriarch.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            spidermatriarch.Body.AdditionalLimbs = spidermatriarch.Body.AdditionalLimbs.AddToArray(bite3d6);

            var brain = spidermatriarch.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.useweb);

        }

        static void updatestandardwyvern()
        {

            var standardwyvern = library.Get<BlueprintUnit>("ada72e12e8cd3014b80eb2162fbc7802");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");


            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor12 = library.Get<BlueprintUnitFact>("0b2d92c6aac8093489dfdadf1e448280");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");





            standardwyvern.AddFacts = standardwyvern.AddFacts.RemoveFromArray(natarmor9);
            standardwyvern.AddFacts = standardwyvern.AddFacts.AddToArray(natarmor12,toughness);



            var dragonLevels = standardwyvern.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 9;
            standardwyvern.ReplaceComponent(dragonLevels, newverminLevels);




        }

        static void updateadvancedwyvern()
        {

            var advancedwyvern = library.Get<BlueprintUnit>("218d6bd8e05c9da4ea04599714ba088d");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var natarmor11 = library.Get<BlueprintUnitFact>("fe38367139432294e8c229edc066e4ac");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");


            advancedwyvern.AddFacts = advancedwyvern.AddFacts.RemoveFromArray(natarmor11);
            advancedwyvern.AddFacts = advancedwyvern.AddFacts.AddToArray(natarmor14, toughness);

            advancedwyvern.Body.AdditionalLimbs = advancedwyvern.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            advancedwyvern.Body.AdditionalLimbs = advancedwyvern.Body.AdditionalLimbs.AddToArray(bite3d6);



            var dragonLevels = advancedwyvern.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 11;
            advancedwyvern.ReplaceComponent(dragonLevels, newverminLevels);

            advancedwyvern.GetComponent<Experience>().CR = 8;


        }

        static void updateenchantmentwyvern()
        {

            var enchantmentwyvern = library.Get<BlueprintUnit>("b5191d52e3e8b4249be444acb4925ed2");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");


            enchantmentwyvern.AddFacts = enchantmentwyvern.AddFacts.RemoveFromArray(natarmor9);
            enchantmentwyvern.AddFacts = enchantmentwyvern.AddFacts.AddToArray(natarmor14, toughness,crushingdespair);

            enchantmentwyvern.Body.AdditionalLimbs = enchantmentwyvern.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            enchantmentwyvern.Body.AdditionalLimbs = enchantmentwyvern.Body.AdditionalLimbs.AddToArray(bite3d6);



            var dragonLevels = enchantmentwyvern.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 11;
            enchantmentwyvern.ReplaceComponent(dragonLevels, newverminLevels);

            enchantmentwyvern.GetComponent<Experience>().CR = 9;

            var brain = enchantmentwyvern.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castcrushingdespairwyvern);
        }


        static void updateevocationwyvern()
        {

            var evocationwyvern = library.Get<BlueprintUnit>("f0b8589972d12d448983aab972bcdcef");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var burningaiaction = library.Get<BlueprintAiCastSpell>("5dfe6689bf271874ab07a86e7946a61c");


            evocationwyvern.AddFacts = evocationwyvern.AddFacts.AddToArray(controlledfireball, combatcasting);




            evocationwyvern.AddFacts = evocationwyvern.AddFacts.RemoveFromArray(natarmor9);
            evocationwyvern.AddFacts = evocationwyvern.AddFacts.AddToArray(natarmor14, toughness, controlledfireball);

            evocationwyvern.Body.AdditionalLimbs = evocationwyvern.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            evocationwyvern.Body.AdditionalLimbs = evocationwyvern.Body.AdditionalLimbs.AddToArray(bite3d6);



            var dragonLevels = evocationwyvern.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 11;
            evocationwyvern.ReplaceComponent(dragonLevels, newverminLevels);

            evocationwyvern.GetComponent<Experience>().CR = 9;

            var brain = evocationwyvern.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(burningaiaction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castcontrolledfireballwyvern);
        }

        static void updatestrongenchantmentwyvern()
        {

            var strongenchantmentwyvern = library.Get<BlueprintUnit>("65b9f397b53ff0d48b9ea6f33e2f1d28");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            


            strongenchantmentwyvern.AddFacts = strongenchantmentwyvern.AddFacts.RemoveFromArray(natarmor9);
            strongenchantmentwyvern.AddFacts = strongenchantmentwyvern.AddFacts.AddToArray(natarmor14, toughness);

            strongenchantmentwyvern.Body.AdditionalLimbs = strongenchantmentwyvern.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            strongenchantmentwyvern.Body.AdditionalLimbs = strongenchantmentwyvern.Body.AdditionalLimbs.AddToArray(bite3d6);

            var dragonLevels = strongenchantmentwyvern.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 21;
            strongenchantmentwyvern.ReplaceComponent(dragonLevels, newverminLevels);



        }

        static void updatetransmutationwyvern()
        {

            var strongtransmutationwyvern = library.Get<BlueprintUnit>("c311734cc87b0f045aca5c282e9d0cd4");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var confusion = library.Get<BlueprintAbility>("cf6c901fb7acc904e85c63b342e9c949");


        var dragonLevels = strongtransmutationwyvern.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 21;
            strongtransmutationwyvern.ReplaceComponent(dragonLevels, newverminLevels);

            strongtransmutationwyvern.AddFacts = strongtransmutationwyvern.AddFacts.RemoveFromArray(natarmor9);
            strongtransmutationwyvern.AddFacts = strongtransmutationwyvern.AddFacts.AddToArray(natarmor14, toughness);

            strongtransmutationwyvern.Body.AdditionalLimbs = strongtransmutationwyvern.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            strongtransmutationwyvern.Body.AdditionalLimbs = strongtransmutationwyvern.Body.AdditionalLimbs.AddToArray(bite3d6);




        }

        static void updatetreantwyvern()
        {

            var treantwyvern = library.Get<BlueprintUnit>("04153cb656ce4844c8f71d5db1f87d4e");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var RegenerationColdIronOrFire5 = library.Get<BlueprintBuff>("da6b266204fe2ac4d89786bf66dbe3a9");
            var stunningblowaiaction = library.Get<BlueprintAiCastSpell>("b2428bdc1e519104f8eb08e2fd06eb02");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");

            treantwyvern.Strength = 26;
            treantwyvern.Dexterity = 12;
            treantwyvern.Constitution = 30;
            treantwyvern.Intelligence = 6;
            treantwyvern.Wisdom = 16;
            treantwyvern.Charisma = 14;

            treantwyvern.AddFacts = treantwyvern.AddFacts.RemoveFromArray(natarmor9);
            treantwyvern.AddFacts = treantwyvern.AddFacts.AddToArray(natarmor14, toughness, RegenerationColdIronOrFire5,dragonsbreathgreen);

            treantwyvern.Body.AdditionalLimbs = treantwyvern.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            treantwyvern.Body.AdditionalLimbs = treantwyvern.Body.AdditionalLimbs.AddToArray(bite3d6);

            var dragonLevels = treantwyvern.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 21;
            treantwyvern.ReplaceComponent(dragonLevels, newverminLevels);

            var brain = treantwyvern.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(stunningblowaiaction);
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathgreenwyvern);

           
        }

        static void updatewyvernforked()
        {

            var forkedwyvern = library.Get<BlueprintUnit>("18e4f92f356983240b99b938c9a6b7fc");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var dragonsbreathgold = library.Get<BlueprintAbility>("e6f5453df86bd714fa33b14c994739f3");


            forkedwyvern.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{forkedwyvern.name}.name", "Giant Fork-Tailed Wyvern"));


            forkedwyvern.AddFacts = forkedwyvern.AddFacts.AddToArray(toughness, combatcasting,dragonsbreathgold);

            forkedwyvern.Body.AdditionalLimbs = forkedwyvern.Body.AdditionalLimbs.RemoveFromArray(bite2d6);
            forkedwyvern.Body.AdditionalLimbs = forkedwyvern.Body.AdditionalLimbs.AddToArray(bite3d6);

            var dragonLevels = forkedwyvern.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == dragonclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 18;
            forkedwyvern.ReplaceComponent(dragonLevels, newverminLevels);


            var brain = forkedwyvern.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castcontrolledfireballwyvern,AiActions.dragonsbreathgoldwyvern);
        }

        static void updateManticoreStandard()
        {

            var manticoreStandard = library.Get<BlueprintUnit>("da807351572c540478b703957d863e68");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");



            var dragonLevels = manticoreStandard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            manticoreStandard.ReplaceComponent(dragonLevels, newAddClassLevels);


        }

        static void updateManticoreAdvanced()
        {

            var manticoreStandard = library.Get<BlueprintUnit>("37f79d70c8914324e909dbccb227704e");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");



            var dragonLevels = manticoreStandard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            manticoreStandard.ReplaceComponent(dragonLevels, newAddClassLevels);


        }

        static void updateManticoreEnchantment()
        {

            var manticoreenchantment = library.Get<BlueprintUnit>("01f37ed680df5be4ba30a79b89f98072");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var BiteLarge1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var overwhelminggrief = library.Get<BlueprintAbility>("dd2918e4a77c50044acba1ac93494c36");



        manticoreenchantment.AddFacts = manticoreenchantment.AddFacts.RemoveFromArray(natarmor6);
            manticoreenchantment.AddFacts = manticoreenchantment.AddFacts.AddToArray(natarmor9,overwhelminggrief);



            manticoreenchantment.Body.AdditionalLimbs = manticoreenchantment.Body.AdditionalLimbs.RemoveFromArray(BiteLarge1d8);
            manticoreenchantment.Body.AdditionalLimbs = manticoreenchantment.Body.AdditionalLimbs.AddToArray(bite2d6);

            var magicalbeastLevels = manticoreenchantment.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            manticoreenchantment.ReplaceComponent(magicalbeastLevels, newAddClassLevels);

            var brain = manticoreenchantment.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castoverwhelminggriefmanticore);

        }

        static void updateManticoreTransmutation()
        {

            var manticoretransmutation = library.Get<BlueprintUnit>("397aaf105780aaf479c3b49c3bc64027");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var BiteLarge1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");




            manticoretransmutation.AddFacts = manticoretransmutation.AddFacts.RemoveFromArray(natarmor6);
            manticoretransmutation.AddFacts = manticoretransmutation.AddFacts.AddToArray(natarmor9 );



            manticoretransmutation.Body.AdditionalLimbs = manticoretransmutation.Body.AdditionalLimbs.RemoveFromArray(BiteLarge1d8);
            manticoretransmutation.Body.AdditionalLimbs = manticoretransmutation.Body.AdditionalLimbs.AddToArray(bite2d6);

            var magicalbeastLevels = manticoretransmutation.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            manticoretransmutation.ReplaceComponent(magicalbeastLevels, newAddClassLevels);



        }

        static void updateManticoreVenom()
        {

            var manticorevenom = library.Get<BlueprintUnit>("d1e924177f4a9284e8c43a30719820e2");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var natarmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var natarmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var BiteLarge1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");




            manticorevenom.AddFacts = manticorevenom.AddFacts.RemoveFromArray(natarmor6);
            manticorevenom.AddFacts = manticorevenom.AddFacts.AddToArray(natarmor9);



            manticorevenom.Body.AdditionalLimbs = manticorevenom.Body.AdditionalLimbs.RemoveFromArray(BiteLarge1d8);
            manticorevenom.Body.AdditionalLimbs = manticorevenom.Body.AdditionalLimbs.AddToArray(bite2d6);

            var magicalbeastLevels = manticorevenom.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            manticorevenom.ReplaceComponent(magicalbeastLevels, newAddClassLevels);



        }

        static void updateManticoreMature()
        {

            var manticoreMature = library.Get<BlueprintUnit>("667749d27f772ff4ba6d9d03d5afed63");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var natarmor13= library.Get<BlueprintUnitFact>("97c198634abbea847982600593ea43ed");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var BiteLarge1d8 = library.Get<BlueprintItemWeapon>("ec35ef997ed5a984280e1a6d87ae80a8");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");




            manticoreMature.AddFacts = manticoreMature.AddFacts.RemoveFromArray(natarmor10);
            manticoreMature.AddFacts = manticoreMature.AddFacts.AddToArray(natarmor13);



            manticoreMature.Body.AdditionalLimbs = manticoreMature.Body.AdditionalLimbs.RemoveFromArray(BiteLarge1d8);
            manticoreMature.Body.AdditionalLimbs = manticoreMature.Body.AdditionalLimbs.AddToArray(bite2d6);

            var magicalbeastLevels = manticoreMature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 13;
            manticoreMature.ReplaceComponent(magicalbeastLevels, newAddClassLevels);



        }

        static void updateManticorebloominfused()
        {

            var manticorebloom = library.Get<BlueprintUnit>("8347f8e5bd919514f8629b2c92b5c249");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var natarmor13 = library.Get<BlueprintUnitFact>("97c198634abbea847982600593ea43ed");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var ClawLarge1d6 = library.Get<BlueprintItemWeapon>("c76f72a862d168d44838206524366e1c");
            var ClawLarge2d4 = library.Get<BlueprintItemWeapon>("8afc47748d00b3e4a8aff2787d9ee350");




            manticorebloom.AddFacts = manticorebloom.AddFacts.RemoveFromArray(natarmor10);
            manticorebloom.AddFacts = manticorebloom.AddFacts.AddToArray(natarmor13);



            manticorebloom.Body.AdditionalLimbs = manticorebloom.Body.AdditionalLimbs.RemoveFromArray(ClawLarge1d6);
            manticorebloom.Body.AdditionalLimbs = manticorebloom.Body.AdditionalLimbs.RemoveFromArray(ClawLarge1d6);
            manticorebloom.Body.AdditionalLimbs = manticorebloom.Body.AdditionalLimbs.AddToArray(ClawLarge2d4);
            manticorebloom.Body.AdditionalLimbs = manticorebloom.Body.AdditionalLimbs.AddToArray(ClawLarge2d4);

            var magicalbeastLevels = manticorebloom.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 16;
            manticorebloom.ReplaceComponent(magicalbeastLevels, newAddClassLevels);



        }

        static void updateFlyTrapStandard()
        {

            var FlyTrapStandard = library.Get<BlueprintUnit>("fb824352b7968fb4d8103ac439644633");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var natarmor13 = library.Get<BlueprintUnitFact>("97c198634abbea847982600593ea43ed");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");





            FlyTrapStandard.AddFacts = FlyTrapStandard.AddFacts.RemoveFromArray(natarmor10);
            FlyTrapStandard.AddFacts = FlyTrapStandard.AddFacts.AddToArray(natarmor13);





            var magicalbeastLevels = FlyTrapStandard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            FlyTrapStandard.ReplaceComponent(magicalbeastLevels, newAddClassLevels);



        }

        static void updateFlyTrapadvanced()
        {

            var FlyTrapadvanced = library.Get<BlueprintUnit>("7640c8bb97e8e7b409c4dc42f64fbcc7");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var natarmor15 = library.Get<BlueprintUnitFact>("72c294dca841e3944869fb087bacf272");
            var natarmor12 = library.Get<BlueprintUnitFact>("0b2d92c6aac8093489dfdadf1e448280");





            FlyTrapadvanced.AddFacts = FlyTrapadvanced.AddFacts.RemoveFromArray(natarmor12);
            FlyTrapadvanced.AddFacts = FlyTrapadvanced.AddFacts.AddToArray(natarmor15);





            var magicalbeastLevels = FlyTrapadvanced.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 19;
            FlyTrapadvanced.ReplaceComponent(magicalbeastLevels, newAddClassLevels);



        }

        static void updateFlyTrapbloominfused()
        {

            var FlyTrapadvanced = library.Get<BlueprintUnit>("9d2eb62e29d9ba943ab933898dd18882");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");






            var magicalbeastLevels = FlyTrapadvanced.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            FlyTrapadvanced.ReplaceComponent(magicalbeastLevels, newAddClassLevels);



        }

        //Talon Peak

        static void updateAncientRoc()
        {

            var ancientroc = library.Get<BlueprintUnit>("5c419d152e1a8ee47b53923cd4edda6e");
            var animalclass = library.Get<BlueprintCharacterClass>("4cd1757a0eea7694ba5c933729a53920");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");



            ancientroc.AddFacts = ancientroc.AddFacts.AddToArray(toughness,greatershout);



            var dragonLevels = ancientroc.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == animalclass);
            var newverminLevels = dragonLevels.CreateCopy();
            newverminLevels.Levels = 26;
            ancientroc.ReplaceComponent(dragonLevels, newverminLevels);

            var brain = ancientroc.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutbird);


        }

        static void updateTalonPeakAlchemist()
        {

            var TalonPeakAlchemist = library.Get<BlueprintUnit>("e41c61db59e0f8a40bf8610d25e24897");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var BanditAlchemistFeatureListLevel9 = library.Get<BlueprintFeature>("1d0f38d8f1f16b04784450a57e563ee6");
            var ExplosiveBombsFeature = library.Get<BlueprintFeature>("1d0e812131f345742adca6431d5bc4fe");
            var ExplosiveBombsBuff = library.Get<BlueprintBuff>("63063a8ab91bcbc44a13294227580e84");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            var Cogintell = library.Get<BlueprintAbility>("14230cf35ac2b5b45a93b13cfe478585");
            var Cogintellbuff = library.Get<BlueprintBuff>("20e740104092b5e49bfb167f1670a9de");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


            TalonPeakAlchemist.AddFacts = TalonPeakAlchemist.AddFacts.AddToArray(ExplosiveBombsFeature,fastbombbuff,chokebomb,Cogintell,Cogintellbuff,StoneskinBuffCL11,extrabomb,quicken);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)TalonPeakAlchemist.AddFacts[0], "TalonPeakAlchemistFeatureNew", "a85b6efb3cb84f138f67092dfeaf6733");
            TalonPeakAlchemist.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditAlchemistFeatureListLevel9.GetComponent<AddFacts>().Facts[0], "TalonPeakAlchemistSpellListNew", "6f5105e7cba445048559c2d12807a85d");
            BanditAlchemistFeatureListLevel9.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var TalonPeakAlchemistFeatureNew = library.Get<BlueprintFeature>("a85b6efb3cb84f138f67092dfeaf6733");
            var TalonPeakAlchemistSpellsNew = library.Get<BlueprintFeature>("6f5105e7cba445048559c2d12807a85d");



            var alchemistLevels = TalonPeakAlchemistFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste, InvisibilityGreater);
            newAddClassLevels.MemorizeSpells = spell_list;
            TalonPeakAlchemistFeatureNew.ReplaceComponent(alchemistLevels, newAddClassLevels);



            var AlchemistLevels2 = TalonPeakAlchemistSpellsNew.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == alchemistClass);
            var newbardLevels2 = AlchemistLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(haste, InvisibilityGreater);
            newbardLevels2.Spells = spell_list2;
            TalonPeakAlchemistSpellsNew.ReplaceComponent(AlchemistLevels2, newbardLevels2);

            var alchemistLevels5 = TalonPeakAlchemistFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels5 = alchemistLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(haste, InvisibilityGreater);
            newAddClassLevels5.SelectSpells = spell_list5;
            TalonPeakAlchemistFeatureNew.ReplaceComponent(alchemistLevels5, newAddClassLevels5);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            TalonPeakAlchemist.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f5528acb89757ab4fb9350f45cc4f3b4"); //Lightcrossbow +1

            


            var brain = TalonPeakAlchemist.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste,AiActions.castdisplacementgoblin,AiActions.throwchokebomb,AiActions.castinvisibilitygreater);


        }

        static void updateTalonPeakFighter()
        {

            var TalonPeakFighter = library.Get<BlueprintUnit>("3dbdc77212b405f448d863906d0c8366");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var armortraining = library.Get<BlueprintFeature>("3c380607706f209499d951b29d3c44f3");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            TalonPeakFighter.Strength = 20;
            TalonPeakFighter.Dexterity = 16;

            TalonPeakFighter.AddFacts = TalonPeakFighter.AddFacts.AddToArray(sunder,armortraining);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)TalonPeakFighter.AddFacts[0], "TalonPeakFighter", "b19ffe51cb2f41dfa3cc809925708416");
            TalonPeakFighter.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var TalonPeakFighterFeatureNew = library.Get<BlueprintFeature>("b19ffe51cb2f41dfa3cc809925708416");
            


            var alchemistLevels = TalonPeakFighterFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            TalonPeakFighterFeatureNew.ReplaceComponent(alchemistLevels, newAddClassLevels);

            TalonPeakFighter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1

            TalonPeakFighter.Body.Armor = library.Get<BlueprintItemArmor>("ed6bbd7ecd050c04690fe11d4c3b3f7d"); // Half plate

            TalonPeakFighter.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); // Heavy Shield +1



            var brain = TalonPeakFighter.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);


        }

        static void updateTalonPeakRogue()
        {
            var TalonPeakRogue = library.Get<BlueprintUnit>("abe4997494bf44b4bb01de42a9a9b038");

            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var slowreaction = library.Get<BlueprintFeature>("7787030571e87704d9177401c595408e");


            TalonPeakRogue.Strength = 15;
            TalonPeakRogue.Dexterity = 20;

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)TalonPeakRogue.AddFacts[0], "TalonPeakRoguenewFeature", "03eb8a6b33b6425db4406540a1475b2c");
            TalonPeakRogue.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var TalonPeakRoguenewFeature = library.Get<BlueprintFeature>("03eb8a6b33b6425db4406540a1475b2c");



            var rogueLevels = TalonPeakRoguenewFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            TalonPeakRoguenewFeature.ReplaceComponent(rogueLevels, newAddClassLevels);

            TalonPeakRogue.AddFacts = TalonPeakRogue.AddFacts.AddToArray(dirtytrick, oppurtunist,slowreaction);


            TalonPeakRogue.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //Dagger +1

            TalonPeakRogue.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //Dagger +1


            var brain = TalonPeakRogue.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);






        }

        //Goblins

        static void fixGoblinDogcutter()
        {

            var goblinDogcutter = library.Get<BlueprintUnit>("9223046d50e815942a9f7338eafb88e9");

            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            goblinDogcutter.AddFacts = goblinDogcutter.AddFacts.AddToArray(trip);


            var brain = goblinDogcutter.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void fixGoblinGuardNeutral()
        {

            var goblinHorseslayer = library.Get<BlueprintUnit>("884d2d62ba4503e488204784ce1b2f7a");

            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            goblinHorseslayer.AddFacts = goblinHorseslayer.AddFacts.AddToArray(trip);


            var brain = goblinHorseslayer.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void fixGoblinHorseslayer()
        {

            var goblinHorseslayer = library.Get<BlueprintUnit>("b5a1c87ef17913d4c879a56af738c56c");

            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            goblinHorseslayer.AddFacts = goblinHorseslayer.AddFacts.AddToArray(trip);


            var brain = goblinHorseslayer.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void fixGoblinHorseslayerb()
        {

            var goblinHorseslayerb = library.Get<BlueprintUnit>("304d6ab456ad11e4ebeef6460b4bcf0e");

            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            goblinHorseslayerb.AddFacts = goblinHorseslayerb.AddFacts.AddToArray(trip);


            var brain = goblinHorseslayerb.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void fixGoblinCommando()
        {

            var goblinCommando = library.Get<BlueprintUnit>("0713685858b39bf4c9775669b8c3b2b1");

            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            goblinCommando.AddFacts = goblinCommando.AddFacts.AddToArray(trip);


            var brain = goblinCommando.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void fixGoblinCommandob()
        {

            var goblinCommandob = library.Get<BlueprintUnit>("60166a7c8a78b2844973549e60877566");

            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            goblinCommandob.AddFacts = goblinCommandob.AddFacts.AddToArray(trip);


            var brain = goblinCommandob.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void fixGoblinSentry()
        {

            var goblinsentry = library.Get<BlueprintUnit>("8f0f0b0bfaae479e9a70860e33be4961");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            goblinsentry.AddFacts = goblinsentry.AddFacts.AddToArray(trip);

            goblinsentry.Dexterity = 16;



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinsentry.AddFacts[0], "goblinsentryfeature", "64e701a8d9e442eabb8e888488db643b");
            goblinsentry.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var goblinsentryfeature = library.Get<BlueprintFeature>("64e701a8d9e442eabb8e888488db643b");



            var fighterLevels = goblinsentryfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            goblinsentryfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            goblinsentry.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("455c6750aac8fa94f8ab19f385c73ae7");//masterwork shortsword
            goblinsentry.Body.SecondaryHand = library.Get<BlueprintItemShield>("a85d51d0fb905f940b951eec60388bac"); 
            
            var brain = goblinsentry.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }


        static void fixGoblinRogueCR7()
        {

            var goblinrogueCR7 = library.Get<BlueprintUnit>("81c76d70bc4e03948b140973bc52bc67");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");





            var rogueLevels = goblinrogueCR7.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            goblinrogueCR7.ReplaceComponent(rogueLevels, newAddClassLevels);

            goblinrogueCR7.AddFacts = goblinrogueCR7.AddFacts.AddToArray(dirtytrick);


            var brain = goblinrogueCR7.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);


        }

        static void fixGoblinRogueCR9()
        {

            var goblinrogueCR9 = library.Get<BlueprintUnit>("131dd387827482d45882ebb2aeb2af8c");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");





            var rogueLevels = goblinrogueCR9.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            goblinrogueCR9.ReplaceComponent(rogueLevels, newAddClassLevels);

            goblinrogueCR9.AddFacts = goblinrogueCR9.AddFacts.AddToArray(dirtytrick);


            var brain = goblinrogueCR9.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);


        }

        static void fixGoblinRogueCR7Ambush()
        {

            var goblinrogueCR7Ambush = library.Get<BlueprintUnit>("7b6dabd480b7b0c4189800693daa31dd");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");





            var rogueLevels = goblinrogueCR7Ambush.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            goblinrogueCR7Ambush.ReplaceComponent(rogueLevels, newAddClassLevels);

            goblinrogueCR7Ambush.AddFacts = goblinrogueCR7Ambush.AddFacts.AddToArray(dirtytrick);


            var brain = goblinrogueCR7Ambush.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);


        }

        static void fixGoblinRogueCR9Ambush()
        {

            var goblinrogueCR9Ambush = library.Get<BlueprintUnit>("4b1ce5f9cafbd7145b4b66c632712a23");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");





            var rogueLevels = goblinrogueCR9Ambush.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            goblinrogueCR9Ambush.ReplaceComponent(rogueLevels, newAddClassLevels);

            goblinrogueCR9Ambush.AddFacts = goblinrogueCR9Ambush.AddFacts.AddToArray(dirtytrick);


            var brain = goblinrogueCR9Ambush.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);


        }


        static void fixGoblinDeathEye()
        {

            var goblinDeathEye = library.Get<BlueprintUnit>("aadfcc46082641d46ae547c12a3a21b8");
            var Featurelevel10 = library.Get<BlueprintFeature>("1aa7e35c2c9d97a43831ea67268d8ef2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            goblinDeathEye.AddFacts = goblinDeathEye.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            goblinDeathEye.Dexterity = 18;

            var fighterLevels = Featurelevel10.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Featurelevel10.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinDeadEye()
        {

            var goblinDeadEye = library.Get<BlueprintUnit>("1a1179e00db35394ea6474a8e28d2c21");
            var Featurelevel9 = library.Get<BlueprintFeature>("c6f9d9a2987778e4cb2f5931a5b1f804");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            goblinDeadEye.AddFacts = goblinDeadEye.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            goblinDeadEye.Dexterity = 18;

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinDeadEye.AddFacts[0], "goblinDeadEyefeature", "48d4f5068dbe4b72a07ec2a4b396ff8a");
            goblinDeadEye.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var goblinDeadEyefeature = library.Get<BlueprintFeature>("48d4f5068dbe4b72a07ec2a4b396ff8a");

            var fighterLevels = goblinDeadEyefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            goblinDeadEyefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinEagleEye()
        {

            var GoblinEagleEye = library.Get<BlueprintUnit>("5816727d3277024469dec37adea3204c");
            var Featurelevel8 = library.Get<BlueprintFeature>("283fb4dc19edb11468eebcf159e8aa0b");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            GoblinEagleEye.AddFacts = GoblinEagleEye.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            GoblinEagleEye.Dexterity = 18;

            var fighterLevels = Featurelevel8.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Featurelevel8.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinEagleEyeB()
        {

            var GoblinEagleEyeB = library.Get<BlueprintUnit>("132627ad9ea002e4aa6a16314cb3cf07");
            var Featurelevel7 = library.Get<BlueprintFeature>("8194ce5f060ddef48812948507f9da3b");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            GoblinEagleEyeB.AddFacts = GoblinEagleEyeB.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            GoblinEagleEyeB.Dexterity = 18;

            var fighterLevels = Featurelevel7.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Featurelevel7.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinLynxEye()
        {

            var GoblinLynxEye = library.Get<BlueprintUnit>("5816727d3277024469dec37adea3204c");
            var Featurelevel6 = library.Get<BlueprintFeature>("f3192e0f1c22dfb478d2cd6e66a0c17a");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            GoblinLynxEye.AddFacts = GoblinLynxEye.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            GoblinLynxEye.Dexterity = 18;

            var fighterLevels = Featurelevel6.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Featurelevel6.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinLynxEyeB()
        {

            var GoblinLynxEyeB = library.Get<BlueprintUnit>("7380afa2e42bd8e49acaf30d98afa66c");
            var Featurelevel5 = library.Get<BlueprintFeature>("0ee067ba2feab4a4fa212e04de52fd9b");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            GoblinLynxEyeB.AddFacts = GoblinLynxEyeB.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            GoblinLynxEyeB.Dexterity = 18;

            var fighterLevels = Featurelevel5.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Featurelevel5.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinLynxEyeC()
        {

            var GoblinLynxEyeC = library.Get<BlueprintUnit>("f0b3188922bf71b47ab54e1425192fce");
            var Featurelevel4 = library.Get<BlueprintFeature>("819b7115ad4aac844807f296919baf27");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            GoblinLynxEyeC.AddFacts = GoblinLynxEyeC.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            GoblinLynxEyeC.Dexterity = 18;

            var fighterLevels = Featurelevel4.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            Featurelevel4.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinSlyEye()
        {

            var goblinsentry = library.Get<BlueprintUnit>("8df02cfd6b0b4e9998c1dc1031dbaa34");
            var eagleeyefeaturelist = library.Get<BlueprintFeature>("283fb4dc19edb11468eebcf159e8aa0b");
            var slyeyefeaturelist = library.Get<BlueprintFeature>("7b4a72175700b5f47b6db3549bfa60f8");

            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");

           

            goblinsentry.AddFacts = goblinsentry.AddFacts.RemoveFromArray(slyeyefeaturelist);
            goblinsentry.AddFacts = goblinsentry.AddFacts.AddToArray(eagleeyefeaturelist, rapidshot, rapidshotbuff);

            goblinsentry.Dexterity = 18;


        }

        static void fixGoblinArcherCR9Ambush()
        {

            var goblinDeadEye = library.Get<BlueprintUnit>("47d18fdca0dd23e49908582ff721e0c2");
            var Featurelevel9 = library.Get<BlueprintFeature>("c6f9d9a2987778e4cb2f5931a5b1f804");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            goblinDeadEye.AddFacts = goblinDeadEye.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            goblinDeadEye.Dexterity = 18;

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinDeadEye.AddFacts[0], "GoblinArcherCR9Ambushfeature", "d442edb5e9e24c2d9b1661a012b1034d");
            goblinDeadEye.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var goblinDeadEyefeature = library.Get<BlueprintFeature>("d442edb5e9e24c2d9b1661a012b1034d");

            var fighterLevels = goblinDeadEyefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            goblinDeadEyefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinArcherCR7Ambush()
        {

            var goblinDeadEye = library.Get<BlueprintUnit>("d65e481d3b473fc4b9a7219b4d78b2c3");
            var Featurelevel9 = library.Get<BlueprintFeature>("c6f9d9a2987778e4cb2f5931a5b1f804");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");


            goblinDeadEye.AddFacts = goblinDeadEye.AddFacts.AddToArray(rapidshot, rapidshotbuff);

            goblinDeadEye.Dexterity = 18;

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinDeadEye.AddFacts[0], "GoblinArcherCR7Ambushfeature", "022e27f5ef994217a1e57a23f9eb7f43");
            goblinDeadEye.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var goblinDeadEyefeature = library.Get<BlueprintFeature>("022e27f5ef994217a1e57a23f9eb7f43");

            var fighterLevels = goblinDeadEyefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            goblinDeadEyefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


        }

        static void fixGoblinGuardAlchemit()
        {

            var goblinalchemistCR7 = library.Get<BlueprintUnit>("8cb0a2f6aa79b374ab8a94bf2e5e1437");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var blindbomb = library.Get<BlueprintFeature>("c3da68b2222768b4f9352fefd29ad15c");
            var AlchemistExplosiveBombAiAction = library.Get<BlueprintAiCastSpell>("b1e2b5351065e5042b12b1b4b9a7665e");
            var AlchemistBombAiAction = library.Get<BlueprintAiCastSpell>("da693ef36da820a4c938bb13a5ded163");

            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var GoblinAlchemistSpellListLevel7 = library.Get<BlueprintFeature>("23c87a062d96cd84abca665241de933c");
            var ReducepersonselfAiAction = library.Get<BlueprintAiCastSpell>("a8a89f28eeb5c5147b31c960bf518011");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");




            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinalchemistCR7.AddFacts[0], "goblinguardalchemistCR7feature", "8681ba04f9c44b11b920544472cd4cc6");
            goblinalchemistCR7.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var goblinalchemistCR7feature = library.Get<BlueprintFeature>("8681ba04f9c44b11b920544472cd4cc6");



            var alchemistLevels = goblinalchemistCR7feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(precisebomb, fastbomb, blindbomb);

            }
            goblinalchemistCR7feature.ReplaceComponent(alchemistLevels, newAddClassLevels);

            var alchemistlevels2 = goblinalchemistCR7feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels2 = alchemistlevels2.CreateCopy();
            var spell_list5 = newalchemistlevels2.MemorizeSpells.AddToArray(haste);
            newalchemistlevels2.MemorizeSpells = spell_list5;
            goblinalchemistCR7feature.ReplaceComponent(alchemistlevels2, newalchemistlevels2);

            var alchemistlevels4 = goblinalchemistCR7feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels4 = alchemistlevels4.CreateCopy();
            var spell_list = newalchemistlevels4.SelectSpells.AddToArray(haste);
            newalchemistlevels4.SelectSpells = spell_list;
            goblinalchemistCR7feature.ReplaceComponent(alchemistlevels4, newalchemistlevels4);


            var alchemistlevels3 = GoblinAlchemistSpellListLevel7.ComponentsArray
            .OfType<LearnSpells>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels3 = alchemistlevels3.CreateCopy();
            var spell_list6 = newalchemistlevels3.Spells.AddToArray(displacement, haste);
            newalchemistlevels3.Spells = spell_list6;
            GoblinAlchemistSpellListLevel7.ReplaceComponent(alchemistlevels3, newalchemistlevels3);



            goblinalchemistCR7.AddFacts = goblinalchemistCR7.AddFacts.AddToArray(fastbombbuff, quicken);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            var brain = goblinalchemistCR7.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistExplosiveBombAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistBombAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castshieldgoblin, AiActions.castreducepersongoblin, AiActions.throwblindbombgoblin,
                AiActions.throwexplosivebombgoblin, AiActions.castdisplacementgoblin, AiActions.casthastegoblin);


        }

        static void fixGoblinAlchemistCR7()
        {

            var goblinalchemistCR7 = library.Get<BlueprintUnit>("7ae7e5868e33fa84084a15c8a94193a2");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var blindbomb = library.Get<BlueprintFeature>("c3da68b2222768b4f9352fefd29ad15c");
            var AlchemistExplosiveBombAiAction = library.Get<BlueprintAiCastSpell>("b1e2b5351065e5042b12b1b4b9a7665e");
            var AlchemistBombAiAction = library.Get<BlueprintAiCastSpell>("da693ef36da820a4c938bb13a5ded163");

            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var GoblinAlchemistSpellListLevel7 = library.Get<BlueprintFeature>("23c87a062d96cd84abca665241de933c");
            var ReducepersonselfAiAction = library.Get<BlueprintAiCastSpell>("a8a89f28eeb5c5147b31c960bf518011");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinalchemistCR7.AddFacts[0], "goblinalchemistCR7feature", "f7b3e1188d8549d78240140bdd80523a");
            goblinalchemistCR7.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var goblinalchemistCR7feature = library.Get<BlueprintFeature>("f7b3e1188d8549d78240140bdd80523a");



            var alchemistLevels = goblinalchemistCR7feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(precisebomb,fastbomb,blindbomb);

            }
            goblinalchemistCR7feature.ReplaceComponent(alchemistLevels, newAddClassLevels);

            var alchemistlevels2 = goblinalchemistCR7feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels2 = alchemistlevels2.CreateCopy();
            var spell_list5 = newalchemistlevels2.MemorizeSpells.AddToArray(haste);
            newalchemistlevels2.MemorizeSpells = spell_list5;
            goblinalchemistCR7feature.ReplaceComponent(alchemistlevels2, newalchemistlevels2);

            var alchemistlevels4 = goblinalchemistCR7feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels4 = alchemistlevels4.CreateCopy();
            var spell_list = newalchemistlevels4.SelectSpells.AddToArray( haste);
            newalchemistlevels4.SelectSpells = spell_list;
            goblinalchemistCR7feature.ReplaceComponent(alchemistlevels4, newalchemistlevels4);


            var alchemistlevels3 = GoblinAlchemistSpellListLevel7.ComponentsArray
            .OfType<LearnSpells>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels3 = alchemistlevels3.CreateCopy();
            var spell_list6 = newalchemistlevels3.Spells.AddToArray(displacement,  haste);
            newalchemistlevels3.Spells = spell_list6;
            GoblinAlchemistSpellListLevel7.ReplaceComponent(alchemistlevels3, newalchemistlevels3);



            goblinalchemistCR7.AddFacts = goblinalchemistCR7.AddFacts.AddToArray(fastbombbuff,quicken);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            var brain = goblinalchemistCR7.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistExplosiveBombAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistBombAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castshieldgoblin,AiActions.castreducepersongoblin,AiActions.throwblindbombgoblin,
                AiActions.throwexplosivebombgoblin,AiActions.castdisplacementgoblin,AiActions.casthastegoblin);


        }

        static void fixGoblinAlchemistCR6()
        {

            var goblinalchemistCR6 = library.Get<BlueprintUnit>("a361c9772f1175b479c0e2b27afec373");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var blindbomb = library.Get<BlueprintFeature>("c3da68b2222768b4f9352fefd29ad15c");
            var AlchemistExplosiveBombAiAction = library.Get<BlueprintAiCastSpell>("b1e2b5351065e5042b12b1b4b9a7665e");
            var AlchemistBombAiAction = library.Get<BlueprintAiCastSpell>("da693ef36da820a4c938bb13a5ded163");

            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var GoblinAlchemistSpellListLevel7 = library.Get<BlueprintFeature>("ca9c54f183310834fb5c348ce926ed20");
            var ReducepersonselfAiAction = library.Get<BlueprintAiCastSpell>("a8a89f28eeb5c5147b31c960bf518011");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");




            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinalchemistCR6.AddFacts[0], "goblinalchemistCR6feature", "06ac76503ab24e7a8ae8193157252e32");
            goblinalchemistCR6.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var goblinalchemistCR6feature = library.Get<BlueprintFeature>("06ac76503ab24e7a8ae8193157252e32");



            var alchemistLevels = goblinalchemistCR6feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(precisebomb, fastbomb, blindbomb);

            }
            goblinalchemistCR6feature.ReplaceComponent(alchemistLevels, newAddClassLevels);

            var alchemistlevels2 = goblinalchemistCR6feature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels2 = alchemistlevels2.CreateCopy();
            var spell_list5 = newalchemistlevels2.MemorizeSpells.AddToArray(displacement,haste);
            newalchemistlevels2.MemorizeSpells = spell_list5;
            goblinalchemistCR6feature.ReplaceComponent(alchemistlevels2, newalchemistlevels2);

            var alchemistlevels4 = goblinalchemistCR6feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels4 = alchemistlevels4.CreateCopy();
            var spell_list = newalchemistlevels4.SelectSpells.AddToArray(displacement,haste);
            newalchemistlevels4.SelectSpells = spell_list;
            goblinalchemistCR6feature.ReplaceComponent(alchemistlevels4, newalchemistlevels4);


            var alchemistlevels3 = GoblinAlchemistSpellListLevel7.ComponentsArray
            .OfType<LearnSpells>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels3 = alchemistlevels3.CreateCopy();
            var spell_list6 = newalchemistlevels3.Spells.AddToArray(displacement, haste);
            newalchemistlevels3.Spells = spell_list6;
            GoblinAlchemistSpellListLevel7.ReplaceComponent(alchemistlevels3, newalchemistlevels3);



            goblinalchemistCR6.AddFacts = goblinalchemistCR6.AddFacts.AddToArray(fastbombbuff, quicken);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            var brain = goblinalchemistCR6.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistExplosiveBombAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistBombAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castshieldgoblin, AiActions.castreducepersongoblin, AiActions.throwblindbombgoblin,
                AiActions.throwexplosivebombgoblin, AiActions.castdisplacementgoblin, AiActions.casthastegoblin);


        }

        static void fixGoblinAlchemistCR5()
        {

            var goblinalchemistCR5 = library.Get<BlueprintUnit>("bea48b5a19b2c344ba85c3e6224b7c78");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var blindbomb = library.Get<BlueprintFeature>("c3da68b2222768b4f9352fefd29ad15c");
            var AlchemistExplosiveBombAiAction = library.Get<BlueprintAiCastSpell>("b1e2b5351065e5042b12b1b4b9a7665e");
            var AlchemistBombAiAction = library.Get<BlueprintAiCastSpell>("da693ef36da820a4c938bb13a5ded163");

            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var GoblinAlchemistSpellListLevel7 = library.Get<BlueprintFeature>("23c87a062d96cd84abca665241de933c");
            var ReducepersonselfAiAction = library.Get<BlueprintAiCastSpell>("a8a89f28eeb5c5147b31c960bf518011");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");





            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinalchemistCR5.AddFacts[0], "goblinalchemistCR5feature", "b07656d827d94070bc7f899d105bf80a");
            goblinalchemistCR5.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var goblinalchemistCR5feature = library.Get<BlueprintFeature>("b07656d827d94070bc7f899d105bf80a");



            var alchemistLevels = goblinalchemistCR5feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(precisebomb, fastbomb);

            }
            goblinalchemistCR5feature.ReplaceComponent(alchemistLevels, newAddClassLevels);

            var alchemistlevels2 = goblinalchemistCR5feature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels2 = alchemistlevels2.CreateCopy();
            var spell_list5 = newalchemistlevels2.MemorizeSpells.AddToArray(displacement, haste);
            newalchemistlevels2.MemorizeSpells = spell_list5;
            goblinalchemistCR5feature.ReplaceComponent(alchemistlevels2, newalchemistlevels2);

            var alchemistlevels4 = goblinalchemistCR5feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newalchemistlevels4 = alchemistlevels4.CreateCopy();
            var spell_list = newalchemistlevels4.SelectSpells.AddToArray(displacement, haste);
            newalchemistlevels4.SelectSpells = spell_list;
            goblinalchemistCR5feature.ReplaceComponent(alchemistlevels4, newalchemistlevels4);






            goblinalchemistCR5.AddFacts = goblinalchemistCR5.AddFacts.AddToArray(fastbombbuff, quicken);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            var brain = goblinalchemistCR5.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistExplosiveBombAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistBombAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castshieldgoblin, AiActions.castreducepersongoblin, AiActions.throwblindbombgoblin,
                AiActions.throwexplosivebombgoblin, AiActions.castdisplacementgoblin, AiActions.casthastegoblin);





        }

        static void fixGoblinAlchemistCR4()
        {

            var goblinalchemistCR4 = library.Get<BlueprintUnit>("ee847b1e8f55c5f4b8eb23bbca23baa7");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var blindbomb = library.Get<BlueprintFeature>("c3da68b2222768b4f9352fefd29ad15c");
            var AlchemistExplosiveBombAiAction = library.Get<BlueprintAiCastSpell>("b1e2b5351065e5042b12b1b4b9a7665e");
            var AlchemistBombAiAction = library.Get<BlueprintAiCastSpell>("da693ef36da820a4c938bb13a5ded163");

            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var GoblinAlchemistSpellListLevel7 = library.Get<BlueprintFeature>("23c87a062d96cd84abca665241de933c");
            var ReducepersonselfAiAction = library.Get<BlueprintAiCastSpell>("a8a89f28eeb5c5147b31c960bf518011");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");






            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinalchemistCR4.AddFacts[0], "goblinalchemistCR4feature", "f7f4cb43cb6a4ed09315a98e4959b42c");
            goblinalchemistCR4.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var goblinalchemistCR4feature = library.Get<BlueprintFeature>("f7f4cb43cb6a4ed09315a98e4959b42c");



            var alchemistLevels = goblinalchemistCR4feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(precisebomb);

            }
            goblinalchemistCR4feature.ReplaceComponent(alchemistLevels, newAddClassLevels);



            goblinalchemistCR4.AddFacts = goblinalchemistCR4.AddFacts.AddToArray( quicken,blurbuff);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shield);


            var brain = goblinalchemistCR4.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistExplosiveBombAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistBombAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castshieldgoblin, AiActions.castreducepersongoblin, 
                AiActions.throwexplosivebombgoblin);






        }

        static void fixGoblinAlchemistCR1()
        {

            var goblinalchemistCR1 = library.Get<BlueprintUnit>("710af85d0d25b4e448a776b7b501f685");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var blindbomb = library.Get<BlueprintFeature>("c3da68b2222768b4f9352fefd29ad15c");
            var AlchemistExplosiveBombAiAction = library.Get<BlueprintAiCastSpell>("b1e2b5351065e5042b12b1b4b9a7665e");
            var AlchemistBombAiAction = library.Get<BlueprintAiCastSpell>("da693ef36da820a4c938bb13a5ded163");

            var ReducepersonselfAiAction = library.Get<BlueprintAiCastSpell>("a8a89f28eeb5c5147b31c960bf518011");







            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinalchemistCR1.AddFacts[0], "goblinalchemistCR1feature", "cd5a95e3d97c4405b8f53e6ddf84042e");
            goblinalchemistCR1.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var goblinalchemistCR1feature = library.Get<BlueprintFeature>("cd5a95e3d97c4405b8f53e6ddf84042e");



            var alchemistLevels = goblinalchemistCR1feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 4;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(precisebomb);

            }
            goblinalchemistCR1feature.ReplaceComponent(alchemistLevels, newAddClassLevels);

            goblinalchemistCR1.AddFacts = goblinalchemistCR1.AddFacts.AddToArray(blurbuff);




            var brain = goblinalchemistCR1.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistExplosiveBombAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(AlchemistBombAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castshieldgoblin, AiActions.castreducepersongoblin,
                AiActions.throwexplosivebombgoblin);








        }

        static void fixGoblinKing()
        {

            var goblinking = library.Get<BlueprintUnit>("c6f2f6fd86ec921479b730da6c664632");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var rangerClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var longbowspec = library.Get<BlueprintFeature>("63f67a2a2e10f024281f0d6cb196d421");
            var longbowfocus = library.Get<BlueprintFeature>("f641e7c569328614c87e0270ac5325dd");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var entangle = library.Get<BlueprintAbility>("0fd00984a2c0e0a429cf1a911b4ec5ca");
            var hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var natarmor4 = library.Get<BlueprintUnitFact>("16fc201a83edcde4cbd64c291ebe0d07");
            


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)goblinking.AddFacts[0], "goblinkingfeature", "cac7391f8147449d98ebe05c81731f4a");
            goblinking.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();





            var goblinkingfeature = library.Get<BlueprintFeature>("cac7391f8147449d98ebe05c81731f4a");

            var clericLevels = goblinkingfeature.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            newAddClassLevels.Levels = 14;
            goblinkingfeature.ReplaceComponent(clericLevels, newAddClassLevels);


            var clericLevels2 = goblinkingfeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(entangle,barkskin,hurricanebow);
            newAddClassLevels2.MemorizeSpells = spell_list;
            goblinkingfeature.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var rangerLevels3 = goblinkingfeature.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels3 = rangerLevels3.CreateCopy();
            foreach (var selection in newAddClassLevels3.Selections)
            {
                selection.Features = selection.Features.AddToArray(pointblank, preciseshot, manyshot, rapidshot, longbowspec, longbowfocus, toughness, deadlyaim);

            }
            goblinkingfeature.ReplaceComponent(rangerLevels3, newAddClassLevels3);

            goblinking.AddFacts = goblinking.AddFacts.AddToArray(rapidshotbuff, deadlyaimbuff, natarmor4);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.hurricanebow);

            goblinking.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1f546ab76bb0e77478ad08248795f7d7"); //whirlwind bow
            goblinking.Body.SecondaryHand = null;

            goblinking.GetComponent<Experience>().CR = 12;


            var brain = goblinking.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.entangle, AiActions.barkskingoblinking, AiActions.hurricanebowgoblinking);

        }

        static void fixGoblinShaman()
        {

            var goblinshaman = library.Get<BlueprintUnit>("8421b6137d7765947958973526b5249b");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var summongreatrock = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var dispelgreater = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var bladebarrier = library.Get<BlueprintAbility>("36c8971e91f1745418cc3ffdfac17b74");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var constrictcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var superiorsummoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var SummonMonsterVIId4plus1 = library.Get<BlueprintAbility>("6e805a9e3ff445146a6386f5a704d4bc");
            var SummonMonsterVId4plus1 = library.Get<BlueprintAbility>("59d28e07b948d4e45a7477ec0065ccb3");
            var selectivechannel = library.Get<BlueprintFeature>("fd30c69417b434d47b6b03b9c1f568ff");
            var divinepowerai = library.Get<BlueprintAiCastSpell>("09de02db1b07d364795f412abb557de3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


            goblinshaman.Wisdom = 24;


            goblinshaman.AddFacts = goblinshaman.AddFacts.RemoveFromArray(superiorsummoning);
            goblinshaman.AddFacts = goblinshaman.AddFacts.RemoveFromArray(divinepower);
            goblinshaman.AddFacts = goblinshaman.AddFacts.RemoveFromArray(SummonMonsterVId4plus1);
            goblinshaman.AddFacts = goblinshaman.AddFacts.RemoveFromArray(SummonMonsterVIId4plus1);
            goblinshaman.AddFacts = goblinshaman.AddFacts.AddToArray(selectivechannel,quicken);


            var clericLevels = goblinshaman.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(summongreatrock, coldicestrike, coldicestrike, heal, dispelgreater, righteousmight, constrictcoils, flamestrike,flamestrike, divinepower, prayer);
            newAddClassLevels.MemorizeSpells = spell_list;
            goblinshaman.ReplaceComponent(clericLevels, newAddClassLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var brain = goblinshaman.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(divinepowerai);
            brain.Actions = brain.Actions.AddToArray(AiActions.summonelementalgreatearth, AiActions.coldicestrike,AiActions.healspell,
                                                     AiActions.divine_power_first,AiActions.righteousmightgoblinshaman,AiActions.prayergoblinshaman,AiActions.constrictingcoils,AiActions.flamestrikegoblinshaman,AiActions.greaterdispel);


        }







        //CHAPTER 3

        static void changesprigganrogueranged()
        {
            var sprigganrogueranged = library.Get<BlueprintUnit>("9eac9269bf679d34fa4fcc9f4eff6be5");

            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var scorchingray = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");


        var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
        var shieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");

           


            sprigganrogueranged.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{sprigganrogueranged.name}.name", "Spriggan Sorcerer"));

            var sorcererLevels = sprigganrogueranged.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            newAddClassLevels.Levels = 10;
            sprigganrogueranged.ReplaceComponent(sorcererLevels, newAddClassLevels);



            var sorcererLevels3 = sprigganrogueranged.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels3 = sorcererLevels3.CreateCopy();
            var spell_list = newAddClassLevels3.SelectSpells.AddToArray(stoneskincommunal, mirrorimage,dragonsbreathgreen,magearmor,controlledfireball,haste,slow,displacement,shield,scorchingray,acidarrow);
            newAddClassLevels3.SelectSpells = spell_list;
            sprigganrogueranged.ReplaceComponent(sorcererLevels3, newAddClassLevels3);

            var humanoidLevels = sprigganrogueranged.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganrogueranged.ReplaceComponent(humanoidLevels, newAddClassLevels2);

            sprigganrogueranged.Body.Armor = null;

            sprigganrogueranged.AddFacts = sprigganrogueranged.AddFacts.AddToArray(quicken,magearmorbuff,shieldbuff);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);


            

            var brain = sprigganrogueranged.Brain;

            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal,AiActions.mirrorimage,AiActions.dragonsbreathgreen,
                AiActions.castmagearmorsprig,AiActions.castcontrolledfireball, 
                AiActions.casthaste, AiActions.castslowsprig,AiActions.displacementvordakai,AiActions.castshieldsprig,AiActions.acidarrowdelay,AiActions.scorchingraydelay);


        }

        static void changesprigganmeleefighter()
        {
            var sprigganfightermelee = library.Get<BlueprintUnit>("736c6a1275bfc54448119d695730b7a6");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var ChargeAbility = library.Get<BlueprintAbility>("c78506dd0e14f7c45a599990e4e65038");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");


            sprigganfightermelee.AddFacts = sprigganfightermelee.AddFacts.AddToArray(ChargeAbility);

            sprigganfightermelee.Skills.Diplomacy = 10;



            var fighterLevels = sprigganfightermelee.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(cornugon, improvedinitiative);

            }
            sprigganfightermelee.ReplaceComponent(fighterLevels, newAddClassLevels);





            var humanoidLevels = sprigganfightermelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganfightermelee.ReplaceComponent(humanoidLevels, newAddClassLevels2);







            var brain = sprigganfightermelee.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig,AiActions.bullrush,AiActions.charge);



        }

        static void changesprigganmeleefighterCR4()
        {
            var sprigganfightermelee = library.Get<BlueprintUnit>("3eaa52ef40292824393ccad2ac00cdfa");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var chargeability = library.Get<BlueprintAbility>("c78506dd0e14f7c45a599990e4e65038");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");



            sprigganfightermelee.Skills.Diplomacy = 10;



            var fighterLevels = sprigganfightermelee.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            sprigganfightermelee.ReplaceComponent(fighterLevels, newAddClassLevels);





            var humanoidLevels = sprigganfightermelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganfightermelee.ReplaceComponent(humanoidLevels, newAddClassLevels2);







            var brain = sprigganfightermelee.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig, AiActions.charge);



        }
        
        static void changesprigganmeleerogue()
        {
            var sprigganroguemelee = library.Get<BlueprintUnit>("f5a3ea6aa0be1a64f970b4dcb42b10a5");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            



            var rogueLevels = sprigganroguemelee.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(improvedinitiative,disarmfeat);

            }
            sprigganroguemelee.ReplaceComponent(rogueLevels, newAddClassLevels);



            sprigganroguemelee.AddFacts = sprigganroguemelee.AddFacts.AddToArray(disarm,doubledamage);


            var humanoidLevels = sprigganroguemelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganroguemelee.ReplaceComponent(humanoidLevels, newAddClassLevels2);







            var brain = sprigganroguemelee.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm);



        }

        static void changesprigganmeleerogueCR6()
        {
            var sprigganroguemelee = library.Get<BlueprintUnit>("c90e6e523ac6d0245bc1871d4426c7d3");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");




            var rogueLevels = sprigganroguemelee.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = rogueLevels.CreateCopy();
            newAddClassLevels.Levels = 6;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(disarmfeat);

            }
            sprigganroguemelee.ReplaceComponent(rogueLevels, newAddClassLevels);



            sprigganroguemelee.AddFacts = sprigganroguemelee.AddFacts.AddToArray(disarm);


            var humanoidLevels = sprigganroguemelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganroguemelee.ReplaceComponent(humanoidLevels, newAddClassLevels2);







            var brain = sprigganroguemelee.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarm);



        }

        static void changesprigganmeleebarb()
        {
            var sprigganbarbmelee = library.Get<BlueprintUnit>("3c5423ba291b6854aae084a55b96898f");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            
            

          

            var barbarianLevels = sprigganbarbmelee.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            sprigganbarbmelee.ReplaceComponent(barbarianLevels, newAddClassLevels);





            var humanoidLevels = sprigganbarbmelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganbarbmelee.ReplaceComponent(humanoidLevels, newAddClassLevels2);







            var brain = sprigganbarbmelee.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);



        }

        static void changesprigganrangedfighter()
        {
            var sprigganrangedfighter = library.Get<BlueprintUnit>("b6eebf0dd9dc0074aad6b95c4adf5f81");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var crossbowweapontraining = library.Get<BlueprintFeature>("9cdfc2a236ee6d349ad6d8a2170477d5");
            var crossbowweapontraining2 = library.Get<BlueprintFeature>("9cdfc2a236ee6d349ad6d8a2170477d5");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var weapontrainingrankupselect = library.Get<BlueprintFeatureSelection>("5f3cc7b9a46b880448275763fe70c0b0");
            var weapontrainingselect = library.Get<BlueprintFeatureSelection>("b8cecf4e5e464ad41b79d5b42b76b399");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");




            sprigganrangedfighter.AddFacts = sprigganrangedfighter.AddFacts.RemoveFromArray(crossbowweapontraining);




            var fighterLevels = sprigganrangedfighter.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(improvedinitiative );
                selection.Features = selection.Features.RemoveFromArray(deadlyaim);
            }
            sprigganrangedfighter.ReplaceComponent(fighterLevels, newAddClassLevels);



            var fighterLevels3 = sprigganrangedfighter.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels3 = fighterLevels3.CreateCopy();
            foreach (var selection in newAddClassLevels3.Selections)
            {
                weapontrainingrankupselect.Features = weapontrainingrankupselect.Features.AddToArray(crossbowweapontraining);

            }
            sprigganrangedfighter.ReplaceComponent(fighterLevels3, newAddClassLevels3);



            var humanoidLevels = sprigganrangedfighter.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganrangedfighter.ReplaceComponent(humanoidLevels, newAddClassLevels2);


            sprigganrangedfighter.Body.PrimaryHand = null;
            sprigganrangedfighter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("01067a23c0cd2c54eb2d41f139f7fde7"); //whirlwind bow


            var brain = sprigganrangedfighter.Brain;
            brain.Actions = brain.Actions.AddToArray();



        }

        static void changesprigganboss()
        {
            var sprigganbarboss = library.Get<BlueprintUnit>("c819bc7aaf8f7eb428c5d3c75cda2d42");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");





            var barbarianLevels = sprigganbarboss.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 13;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(cornugon);

            }
            sprigganbarboss.ReplaceComponent(barbarianLevels, newAddClassLevels);





            var humanoidLevels = sprigganbarboss.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == humanoidClass);
            var newAddClassLevels2 = humanoidLevels.CreateCopy();
            newAddClassLevels2.Levels = 3;
            sprigganbarboss.ReplaceComponent(humanoidLevels, newAddClassLevels2);







            var brain = sprigganbarboss.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);



        }






        static void updateVordakaiWillasGundarson()

        {


            var VordakaiWillasGundarson = library.Get<BlueprintUnit>("5dbafe899da6c2f4e924988118f52f3d");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var disorientedability = library.Get<BlueprintBuff>("6339eac5bdcef1747ac46885d2cf4e25");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var bewilderingability = library.Get<BlueprintActivatableAbility>("c74a63e0d2fd08149bfcfff8ded43313");
            var summonghosts = library.Get<BlueprintAbility>("a8ba7017d97345969db2567eb7c249b7");
            var doubledebiliation = library.Get<BlueprintFeature>("dd699394df0ef8847abba26038333f02");
            var weaponfinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var finessedagger = library.Get<BlueprintFeature>("50c7baae70624e24089d32d090e9cdb6");
            var finesseselection = library.Get<BlueprintFeatureSelection>("b78d146cea711a84598f0acef69462ea");
            

            {

                var undeadLevels = VordakaiWillasGundarson.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == rogueClass);
                var newAddClassLevels2 = undeadLevels.CreateCopy();
                newAddClassLevels2.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
                newAddClassLevels2.Levels = 3;
                VordakaiWillasGundarson.ReplaceComponent(undeadLevels, newAddClassLevels2);



                var rogueLevels = VordakaiWillasGundarson.ComponentsArray
                     .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == undeadClass);
                var newAddClassLevels = rogueLevels.CreateCopy();
                newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
                newAddClassLevels.Levels = 14;
                foreach (var selection in newAddClassLevels.Selections)
                {
                    selection.Features = selection.Features.AddToArray();

                }
                VordakaiWillasGundarson.ReplaceComponent(rogueLevels, newAddClassLevels);



                VordakaiWillasGundarson.AddFacts = VordakaiWillasGundarson.AddFacts.AddToArray(oppurtunist,summonghosts,disarm, improvedevasion, disorientedability, dirtytrick, doubledebiliation, weaponfinesse, finesseselection, finessedagger);



                VordakaiWillasGundarson.Body.DisableHands = false;

                VordakaiWillasGundarson.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //dagger +1

                

                var brain = VordakaiWillasGundarson.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre,AiActions.usedirtytrickblind,AiActions.usesummonghosts);


            }
        }

        static void updateSpectreStandard()

        {


            var standardspectre = library.Get<BlueprintUnit>("2f91d7337b60e3b4b9b137198a8c8745");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var weaponfinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var finessedagger = library.Get<BlueprintFeature>("50c7baae70624e24089d32d090e9cdb6");
            
            


            {

                

                var rogueLevels = standardspectre.GetComponent<AddClassLevels>();
                var newrogueLevels = rogueLevels.CreateCopy();
                newrogueLevels.CharacterClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
                newrogueLevels.Levels = 8;

                standardspectre.AddComponent(newrogueLevels);

                var undeadLevels = standardspectre.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == rogueClass);
                var newAddClassLevels2 = undeadLevels.CreateCopy();
                newAddClassLevels2.Levels = 3;
                foreach (var selection in newAddClassLevels2.Selections)
                {
                    selection.Features = selection.Features.AddToArray(weaponfinesse, finessedagger);

                }
                standardspectre.ReplaceComponent(undeadLevels, newAddClassLevels2);



                standardspectre.AddFacts = standardspectre.AddFacts.AddToArray(disarm, improvedevasion, dirtytrick, weaponfinesse, finessedagger);



                standardspectre.Body.DisableHands = false;

                standardspectre.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //dagger +1



                var brain = standardspectre.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre, AiActions.usedirtytrickblind);


            }
        }


        //Bandits in Hollow Eyes

        static void changeholloweyearchers()
        {
            var holloweyearchers = library.Get<BlueprintUnit>("e19ab93e73984e0e9e65d7b06d766e5b");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
           


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyearchers.AddFacts[0], "holloweyearchersFeature", "096e65ce3eb34c07bd1a969f66b3a929");
            holloweyearchers.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

      

            var holloweyearchersfeature = library.Get<BlueprintFeature>("096e65ce3eb34c07bd1a969f66b3a929");



            var fighterLevels = holloweyearchersfeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            holloweyearchersfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            holloweyearchers.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2753a0159681be94da3a5eeabc8c8d1a");

            holloweyearchers.GetComponent<Experience>().CR = 6;

   


        }

        static void changeholloweyerogues()
        {
            var holloweyerogue = library.Get<BlueprintUnit>("a305c49dc73fe9d419003d5469b50f93");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");

            holloweyerogue.AddFacts = holloweyerogue.AddFacts.AddToArray(oppurtunist, dirtytrick);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyerogue.AddFacts[0], "holloweyerogueFeature", "bca30168face4334ade2224a2229c360");
            holloweyerogue.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var holloweyeroguefeature = library.Get<BlueprintFeature>("bca30168face4334ade2224a2229c360");



            var fighterLevels = holloweyeroguefeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            holloweyeroguefeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            holloweyerogue.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //Dagger +1

            holloweyerogue.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //Dagger +1



            var brain = holloweyerogue.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);



        }

        static void changeholloweyealchemist()
        {

            var holloweyealchemist = library.Get<BlueprintUnit>("ca2c980779cb93742aee2cc991556847");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var BanditAlchemistFeatureListLevel5 = library.Get<BlueprintFeature>("acc08519fae83e345862495a86b12fc6");
            var ExplosiveBombsFeature = library.Get<BlueprintFeature>("1d0e812131f345742adca6431d5bc4fe");
            var ExplosiveBombsBuff = library.Get<BlueprintBuff>("63063a8ab91bcbc44a13294227580e84");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            var Cogintell = library.Get<BlueprintAbility>("14230cf35ac2b5b45a93b13cfe478585");
            var Cogintellbuff = library.Get<BlueprintBuff>("20e740104092b5e49bfb167f1670a9de");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


            holloweyealchemist.AddFacts = holloweyealchemist.AddFacts.AddToArray(ExplosiveBombsFeature, fastbombbuff, chokebomb, Cogintell, Cogintellbuff, quicken);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyealchemist.AddFacts[0], "holloweyealchemistFeatureNew", "556968505e854520913b88b8a2e3293c");
            holloweyealchemist.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditAlchemistFeatureListLevel5.GetComponent<AddFacts>().Facts[0], "holloweyealchemistSpellListNew", "fa0049cdc22c4c8ea7922fba28dd4147");
            BanditAlchemistFeatureListLevel5.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var holloweyealchemistFeatureNew = library.Get<BlueprintFeature>("556968505e854520913b88b8a2e3293c");
            var holloweyealchemistSpellsNew = library.Get<BlueprintFeature>("fa0049cdc22c4c8ea7922fba28dd4147");



            var alchemistLevels = holloweyealchemistFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste);
            newAddClassLevels.MemorizeSpells = spell_list;
            holloweyealchemistFeatureNew.ReplaceComponent(alchemistLevels, newAddClassLevels);



            var AlchemistLevels2 = holloweyealchemistSpellsNew.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == alchemistClass);
            var newbardLevels2 = AlchemistLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(haste);
            newbardLevels2.Spells = spell_list2;
            holloweyealchemistSpellsNew.ReplaceComponent(AlchemistLevels2, newbardLevels2);

            var alchemistLevels5 = holloweyealchemistFeatureNew.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels5 = alchemistLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(haste, InvisibilityGreater);
            newAddClassLevels5.SelectSpells = spell_list5;
            holloweyealchemistFeatureNew.ReplaceComponent(alchemistLevels5, newAddClassLevels5);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            holloweyealchemist.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f5528acb89757ab4fb9350f45cc4f3b4"); //Lightcrossbow +1




            var brain = holloweyealchemist.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste, AiActions.castdisplacementgoblin, AiActions.throwchokebomb);


        }

        static void updateholloweyeFighterA()
        {

            var holloweyeFighterA = library.Get<BlueprintUnit>("dc6e7077127a4326aa7d63cd04523161");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var armortraining = library.Get<BlueprintFeature>("3c380607706f209499d951b29d3c44f3");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");



            holloweyeFighterA.Strength = 20;
            holloweyeFighterA.Dexterity = 16;

            holloweyeFighterA.AddFacts = holloweyeFighterA.AddFacts.AddToArray(sunder,armortraining,combatexpertise);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyeFighterA.AddFacts[0], "holloweyeFighterA", "bf39e88f2091476fb05d66bd1f881ea9");
            holloweyeFighterA.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var holloweyeFighterAFeatureNew = library.Get<BlueprintFeature>("bf39e88f2091476fb05d66bd1f881ea9");



            var alchemistLevels = holloweyeFighterAFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            holloweyeFighterAFeatureNew.ReplaceComponent(alchemistLevels, newAddClassLevels);

            holloweyeFighterA.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1

            holloweyeFighterA.Body.Armor = library.Get<BlueprintItemArmor>("ed6bbd7ecd050c04690fe11d4c3b3f7d"); // Half plate

            holloweyeFighterA.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); // Heavy Shield +1



            var brain = holloweyeFighterA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb,AiActions.cleave);


        }

        static void updateholloweyeFighterB()
        {

            var holloweyeFighterA = library.Get<BlueprintUnit>("19e9d35272a947be8a0e2a3ac648d033");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var armortraining = library.Get<BlueprintFeature>("3c380607706f209499d951b29d3c44f3");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            holloweyeFighterA.Strength = 20;
            holloweyeFighterA.Dexterity = 16;

            holloweyeFighterA.AddFacts = holloweyeFighterA.AddFacts.AddToArray(sunder,armortraining,combatexpertise);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyeFighterA.AddFacts[0], "holloweyeFighterB", "faa717e18bdd40afa3d6ee5b104a989e");
            holloweyeFighterA.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var holloweyeFighterAFeatureNew = library.Get<BlueprintFeature>("faa717e18bdd40afa3d6ee5b104a989e");



            var alchemistLevels = holloweyeFighterAFeatureNew.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            holloweyeFighterAFeatureNew.ReplaceComponent(alchemistLevels, newAddClassLevels);

            holloweyeFighterA.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1

            holloweyeFighterA.Body.Armor = library.Get<BlueprintItemArmor>("ed6bbd7ecd050c04690fe11d4c3b3f7d"); // Half plate

            holloweyeFighterA.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); // Heavy Shield +1



            var brain = holloweyeFighterA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb, AiActions.cleave);


        }

        static void updateholloweyeBrawler()
        {

            var holloweyeBrawler = library.Get<BlueprintUnit>("5099b31194dc484d8c2774ab949f4875");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var lesseratavismtotem = library.Get<BlueprintFeature>("ecbb5b8b2c354ee89949f8f163982ef7");
            var lesseratavismtotembuff = library.Get<BlueprintBuff>("3858dd3e9a94f0b41abdc58387d68ccf");
            var InspireFerocityFeature = library.Get<BlueprintFeature>("32c4d277007aed74c905779cd04a6fed");
            var InspireFerocityBuff = library.Get<BlueprintBuff>("9ec69854596674a4ba40802e6337894d");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyeBrawler.AddFacts[0], "holloweyeBrawlerfeature", "578793477cfc4e3db7a76a635f9932df");
            holloweyeBrawler.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var holloweyeBrawlerfeature = library.Get<BlueprintFeature>("578793477cfc4e3db7a76a635f9932df");



            holloweyeBrawler.AddFacts = holloweyeBrawler.AddFacts.AddToArray(lesseratavismtotembuff, InspireFerocityBuff,cornugon);



            var fighterLevels = holloweyeBrawlerfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(lesseratavismtotem, InspireFerocityFeature);

            }
            holloweyeBrawlerfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            holloweyeBrawler.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //greatsword +1


            var brain = holloweyeBrawler.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);


       


        }

        static void updateholloweyeBard()
        {

            var holloweyeBard = library.Get<BlueprintUnit>("3f2672c1a9877244cab3caf16e221507");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var holloweyeBardfeaturelist = library.Get<BlueprintFeature>("2b77a7aef84c68c478ddc69fa1d2c30d");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyeBard.AddFacts[0], "holloweyeBardfeaturenewlist", "698f6f4058724d26a95bda80b989e0f4");
            holloweyeBard.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)holloweyeBardfeaturelist.GetComponent<AddFacts>().Facts[0], "holloweyeBardSpellListNew", "35f35b6a763548b09942edfdd6f5d6a5");
            holloweyeBardfeaturelist.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var holloweyeBardfeaturenewlist = library.Get<BlueprintFeature>("698f6f4058724d26a95bda80b989e0f4");
            var holloweyeBardSpellListNew = library.Get<BlueprintFeature>("35f35b6a763548b09942edfdd6f5d6a5");

            var bardLevels = holloweyeBardfeaturenewlist.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement);
            newAddClassLevels.SelectSpells = spell_list;
            holloweyeBardfeaturenewlist.ReplaceComponent(bardLevels, newAddClassLevels);

            var bardLevels2 = holloweyeBardSpellListNew.ComponentsArray
            .OfType<LearnSpells>()
            .First(c => c.CharacterClass == bardClass);
            var newbardLevels2 = bardLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(mirrorimage, shout, displacement);
            newbardLevels2.Spells = spell_list2;
            holloweyeBardSpellListNew.ReplaceComponent(bardLevels, newAddClassLevels);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            holloweyeBard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f5528acb89757ab4fb9350f45cc4f3b4"); //Lightcrossbow +1




            holloweyeBard.AddFacts = holloweyeBard.AddFacts.AddToArray(quicken);


            var brain = holloweyeBard.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(hideouslaughterai);
            brain.Actions = brain.Actions.RemoveFromArray(slowai);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.casthaste, AiActions.hideouslaughternixie,AiActions.castslow);

        }




        //Barbarian Camp

        static void updateBarbarianCamp_Dugath()

        {


            var dugath_camp = library.Get<BlueprintUnit>("9c0490bc771782a43b42bebb5f1f07d4");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var divine_power = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var bless = library.Get<BlueprintAbility>("90e59f4a4ada87243b7b3535a06d0638");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");


            {

                dugath_camp.AddFacts = dugath_camp.AddFacts.AddToArray(quicken);

                var clericLevels = dugath_camp.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericClass);
                var newclericLevels = clericLevels.CreateCopy();
                newclericLevels.CharacterClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
                newclericLevels.Levels = 13;
                var spell_list = newclericLevels.MemorizeSpells.AddToArray(righteousmight,heal,divine_power, constrictingcoils, prayer, bless, holdperson);
                newclericLevels.MemorizeSpells = spell_list;
                dugath_camp.ReplaceComponent(clericLevels, newclericLevels);

                var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);




                var brain = dugath_camp.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
                brain.Actions = brain.Actions.AddToArray(AiActions.righteousmightdugath,
                                                     AiActions.holdpersondelay,
                                                     AiActions.constrictingcoilszombie,
                                                     AiActions.prayergoblinshaman,
                                                     AiActions.blesscast,
                                                     AiActions.divine_power_first,
                                                     AiActions.healspell,
                                                     AiActions.cleave);
            }
        }

        static void updateBolga()

        {

            var bolga = library.Get<BlueprintUnit>("b18515bcc73857b4fa083562665ede66");
            var druidclass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var barbarianclass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var barkskinbuff5 = library.Get<BlueprintBuff>("063773c63d55dd94a94f9ffe3e710f95");
            var greatermagicfang = library.Get<BlueprintAbility>("f1100650705a69c4384d3edd88ba0f52");
            var naturalspell = library.Get<BlueprintFeature>("c806103e27cce6f429e5bf47067966cf");
            var thornbody = library.Get<BlueprintAbility>("2daf9c5112f16d54ab3cd6904c705c59");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var aspectofthewolf = library.Get<BlueprintAbility>("6126b36fe22291543ad72f8b9f0d53a7");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");


            bolga.AddFacts = bolga.AddFacts.AddToArray(barkskinbuff5,naturalspell,quicken,freedomofmovementbuff,combatcasting);
            bolga.AddFacts = bolga.AddFacts.RemoveFromArray(powerattackfeature);

            bolga.Strength = 18;
            bolga.Dexterity = 15;
            bolga.Constitution = 16;
            bolga.Wisdom = 16;
            bolga.Charisma = 8;



            {

                var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)bolga.AddFacts[0], "BolgaFeature", "777b1345b16344899a0579fcc485944a");
                bolga.AddFacts[0] = clone;
                clone.ComponentsArray = clone.ComponentsArray
                    .Select(c => c.CreateCopy())
                    .ToArray();

                var BolgaFeature = library.Get<BlueprintFeature>("777b1345b16344899a0579fcc485944a");



                var druidLevels = BolgaFeature.ComponentsArray
                .OfType<AddClassLevels>()
                  .First(c => c.CharacterClass == barbarianclass);
                var newAddClassLevels = druidLevels.CreateCopy();
                newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
                newAddClassLevels.Levels = 12;
                BolgaFeature.ReplaceComponent(druidLevels, newAddClassLevels);

                var druidLevels2 = BolgaFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == druidclass);
                var newAddClassLevels2 = druidLevels2.CreateCopy();
                var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(greatermagicfang,thornbody,aspectofthewolf,freedomofmovement);
                newAddClassLevels2.MemorizeSpells = spell_list;
                BolgaFeature.ReplaceComponent(druidLevels2, newAddClassLevels2);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.thornbody);


                var brain = bolga.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.usewildshapesmilidon,AiActions.castgreatermagicfang,AiActions.castthornbody,AiActions.castaspectwolf);
            }
        }

        static void updateBarbarianCamp_ElderSister()

        {




            var nymphclass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var eldersister_barbcamp = library.Get<BlueprintUnit>("00ac5f0e63a76ce49af4bab27599f75b");
            var firedomain = library.Get<BlueprintFeature>("9dc5863168155854fa8daf4a780f6663");
            var firedomainprogressdruid = library.Get<BlueprintProgression>("562567d7c244fae43ac61df3d55547ca");
            var firedomainspelllistfeaturedruid = library.Get<BlueprintFeature>("bb87f638c058cd9468e0a0e25fa9a1a9");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var firedomainresist = library.Get<BlueprintFeature>("24700a71dd3dc844ea585345f6dd18f6");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var volcanicstorm = library.Get<BlueprintAbility>("16ce660837fb2544e96c3b7eaad73c63");
            var summonnaturesallyIV = library.Get<BlueprintAbility>("c83db50513abdf74ca103651931fac4b");
            var flamestrikeaiaction = library.Get<BlueprintAiCastSpell>("4f48fd03d530f86439657e4d93bffc89");
            var calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var vinetrap = library.Get<BlueprintAbility>("6d1d48a939ce475409f06e1b376bc386");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");


            {





                eldersister_barbcamp.AddFacts = eldersister_barbcamp.AddFacts.AddToArray(firedomainresist, controlledfireball, quicken, freedomofmovementbuff);

                var nymphLevels2 = eldersister_barbcamp.ComponentsArray
               .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels3 = nymphLevels2.CreateCopy();
                foreach (var selection in newAddClassLevels3.Selections)
                {
                    selection.Features = selection.Features.AddToArray(firedomain, firedomainprogressdruid, firedomainspelllistfeaturedruid);

                }
                eldersister_barbcamp.ReplaceComponent(nymphLevels2, newAddClassLevels3);

                var nymphLevels = eldersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 14;
                var spell_list = newnymphLevels.MemorizeSpells.AddToArray(stoneskincommunal, firesnake, volcanicstorm, calllightning, calllightning, fire_storm, greaterdispel, greaterdispel, heal, tarpool, freedomofmovement,
                                                                          firesnake, firesnake, vinetrap, barkskin, flurryofsnowballs, flurryofsnowballs, snowball, snowball, snowball, shockinggrasp, shockinggrasp);
                newnymphLevels.MemorizeSpells = spell_list;
                eldersister_barbcamp.ReplaceComponent(nymphLevels, newnymphLevels);

                var nymphLevels3 = eldersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels3 = nymphLevels3.CreateCopy();
                var spell_list2 = newnymphLevels3.MemorizeSpells.RemoveFromArray(summonnaturesallyIV);
                newnymphLevels3.MemorizeSpells = spell_list2;
                eldersister_barbcamp.ReplaceComponent(nymphLevels3, newnymphLevels3);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.barkskin);

                var brain = eldersister_barbcamp.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(flamestrikeaiaction);
                brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal,
                                                         AiActions.castcontrolledfireballsister,
                                                         AiActions.castflamestrikesister,
                                                         AiActions.calllightningsister, AiActions.healspell, AiActions.castgreaterdispellsisterabandoned, AiActions.tarpool,
                                                          AiActions.castfreedomofmovement, AiActions.lightningboltsister,
                                                            AiActions.castfiresnakesister, AiActions.castvinetrap, AiActions.barkskingoblinsister,
                                                            AiActions.calllightninglostsister, AiActions.castflurryofsnowballssister, AiActions.castsnowballlostsister, AiActions.castshockgraspsister);
            }
        }

        static void updateElderSister()

        {




            var nymphclass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var eldersister_barbcamp = library.Get<BlueprintUnit>("32f96cce54118064aaace10822fea0a9");
            var firedomain = library.Get<BlueprintFeature>("9dc5863168155854fa8daf4a780f6663");
            var firedomainprogressdruid = library.Get<BlueprintProgression>("562567d7c244fae43ac61df3d55547ca");
            var firedomainspelllistfeaturedruid = library.Get<BlueprintFeature>("bb87f638c058cd9468e0a0e25fa9a1a9");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var firedomainresist = library.Get<BlueprintFeature>("24700a71dd3dc844ea585345f6dd18f6");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var volcanicstorm = library.Get<BlueprintAbility>("16ce660837fb2544e96c3b7eaad73c63");
            var summonnaturesallyIV = library.Get<BlueprintAbility>("c83db50513abdf74ca103651931fac4b");
            var flamestrikeaiaction = library.Get<BlueprintAiCastSpell>("4f48fd03d530f86439657e4d93bffc89");
            var calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var vinetrap = library.Get<BlueprintAbility>("6d1d48a939ce475409f06e1b376bc386");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");


            {





                eldersister_barbcamp.AddFacts = eldersister_barbcamp.AddFacts.AddToArray(firedomainresist, controlledfireball, quicken, freedomofmovementbuff);

                var nymphLevels2 = eldersister_barbcamp.ComponentsArray
               .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels3 = nymphLevels2.CreateCopy();
                foreach (var selection in newAddClassLevels3.Selections)
                {
                    selection.Features = selection.Features.AddToArray(firedomain, firedomainprogressdruid, firedomainspelllistfeaturedruid);

                }
                eldersister_barbcamp.ReplaceComponent(nymphLevels2, newAddClassLevels3);

                var nymphLevels = eldersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 14;
                var spell_list = newnymphLevels.MemorizeSpells.AddToArray(stoneskincommunal, firesnake, volcanicstorm, calllightning, calllightning, fire_storm, greaterdispel, greaterdispel, heal, tarpool, freedomofmovement,
                                                                          firesnake, firesnake, vinetrap, barkskin, flurryofsnowballs, flurryofsnowballs, snowball, snowball, snowball, shockinggrasp, shockinggrasp);
                newnymphLevels.MemorizeSpells = spell_list;
                eldersister_barbcamp.ReplaceComponent(nymphLevels, newnymphLevels);

                var nymphLevels3 = eldersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels3 = nymphLevels3.CreateCopy();
                var spell_list2 = newnymphLevels3.MemorizeSpells.RemoveFromArray(summonnaturesallyIV);
                newnymphLevels3.MemorizeSpells = spell_list2;
                eldersister_barbcamp.ReplaceComponent(nymphLevels3, newnymphLevels3);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.barkskin);

                var brain = eldersister_barbcamp.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(flamestrikeaiaction);
                brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal,
                                                         AiActions.castcontrolledfireballsister,
                                                         AiActions.castflamestrikesister,
                                                         AiActions.calllightningsister, AiActions.healspell, AiActions.castgreaterdispellsisterabandoned, AiActions.tarpool,
                                                          AiActions.castfreedomofmovement, AiActions.lightningboltsister,
                                                            AiActions.castfiresnakesister, AiActions.castvinetrap, AiActions.barkskingoblinsister,
                                                            AiActions.calllightninglostsister, AiActions.castflurryofsnowballssister, AiActions.castsnowballlostsister, AiActions.castshockgraspsister);
            }
        }

        static void updateBarbarianCamp_YoungerSister()

        {

            var nymphclass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var youngersister_barbcamp = library.Get<BlueprintUnit>("1d17d32dbe086d64395b5338ad29ab7e");
            var waterdomain = library.Get<BlueprintFeature>("4c21ad24f55f64d4fb722f40720d9ab0");
            var waterdomainprogressdruid = library.Get<BlueprintProgression>("e48425d6fdafdba449beec54fe158339");
            var waterdomainspelllistfeaturedruid = library.Get<BlueprintFeature>("3a264a4d254827a4298925b32a312994");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var waterdomainresist = library.Get<BlueprintFeature>("daf27e1f12e736d4294b525489e99de4");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var volcanicstorm = library.Get<BlueprintAbility>("16ce660837fb2544e96c3b7eaad73c63");
            var summonnaturesallyIV = library.Get<BlueprintAbility>("c83db50513abdf74ca103651931fac4b");
            var flamestrikeaiaction = library.Get<BlueprintAiCastSpell>("4f48fd03d530f86439657e4d93bffc89");
            var calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var empower = library.Get<BlueprintFeature>("a1de1e4f92195b442adb946f0e2b9d4e");
            var burstofnettles = library.Get<BlueprintAbility>("af0092cbb9cacd74aadfe6bf4ebcdebf");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var poxpostules = library.Get<BlueprintAbility>("bc153808ef4884a4594bc9bec2299b69");

            {





                youngersister_barbcamp.AddFacts = youngersister_barbcamp.AddFacts.AddToArray(waterdomainresist,acidarrow,empower);

                var nymphLevels2 = youngersister_barbcamp.ComponentsArray
               .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels3 = nymphLevels2.CreateCopy();
                foreach (var selection in newAddClassLevels3.Selections)
                {
                    selection.Features = selection.Features.AddToArray(waterdomain, waterdomainprogressdruid, waterdomainspelllistfeaturedruid);

                }
                youngersister_barbcamp.ReplaceComponent(nymphLevels2, newAddClassLevels3);

                var nymphLevels = youngersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 9;
                var spell_list = newnymphLevels.MemorizeSpells.AddToArray(snowball,snowball,snowball,flurryofsnowballs,burstofnettles,burstofnettles,poxpostules,poxpostules);
                newnymphLevels.MemorizeSpells = spell_list;
                youngersister_barbcamp.ReplaceComponent(nymphLevels, newnymphLevels);

                var nymphLevels3 = youngersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels3 = nymphLevels3.CreateCopy();
                var spell_list2 = newnymphLevels3.MemorizeSpells.RemoveFromArray(summonnaturesallyIV);
                newnymphLevels3.MemorizeSpells = spell_list2;
                youngersister_barbcamp.ReplaceComponent(nymphLevels3, newnymphLevels3);

                var nymphLevels4 = youngersister_barbcamp.ComponentsArray
              .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels4 = nymphLevels4.CreateCopy();
                var spell_list3 = newnymphLevels4.MemorizeSpells.RemoveFromArray(flamestrike);
                newnymphLevels4.MemorizeSpells = spell_list3;
                youngersister_barbcamp.ReplaceComponent(nymphLevels4, newnymphLevels4);

                var auto_metamgic = library.Get<BlueprintFeature>("4250bd8c29ba9dd48a1ad69deca4db40");
                auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.snowball);


                var brain = youngersister_barbcamp.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(flamestrikeaiaction);
                brain.Actions = brain.Actions.AddToArray(
                                                         AiActions.calllightningsister,
                                                         AiActions.castsnowballsister,
                                                         AiActions.castflurryofsnowballs,
                                                         AiActions.castburstofnettles,
                                                         AiActions.castflamestrikesister,
                                                         AiActions.castpoxpostules);
            }
        }

        static void updateBarbarianCamp_SisterFromTomb()

        {

            var nymphclass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var SisterFromTomb_barbcamp = library.Get<BlueprintUnit>("6f700b4b7e1ac984fba3be976113d2aa");
            var waterdomain = library.Get<BlueprintFeature>("4c21ad24f55f64d4fb722f40720d9ab0");
            var waterdomainprogressdruid = library.Get<BlueprintProgression>("e48425d6fdafdba449beec54fe158339");
            var waterdomainspelllistfeaturedruid = library.Get<BlueprintFeature>("3a264a4d254827a4298925b32a312994");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");
            var waterdomainresist = library.Get<BlueprintFeature>("daf27e1f12e736d4294b525489e99de4");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var volcanicstorm = library.Get<BlueprintAbility>("16ce660837fb2544e96c3b7eaad73c63");
            var summonnaturesallyIV = library.Get<BlueprintAbility>("c83db50513abdf74ca103651931fac4b");
            var flamestrikeaiaction = library.Get<BlueprintAiCastSpell>("4f48fd03d530f86439657e4d93bffc89");
            var calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var empower = library.Get<BlueprintFeature>("a1de1e4f92195b442adb946f0e2b9d4e");
            var burstofnettles = library.Get<BlueprintAbility>("af0092cbb9cacd74aadfe6bf4ebcdebf");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var poxpostules = library.Get<BlueprintAbility>("bc153808ef4884a4594bc9bec2299b69");

            {

                SisterFromTomb_barbcamp.AddFacts = SisterFromTomb_barbcamp.AddFacts.AddToArray(waterdomainresist, acidarrow, empower);

                var nymphLevels2 = SisterFromTomb_barbcamp.ComponentsArray
               .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels3 = nymphLevels2.CreateCopy();
                foreach (var selection in newAddClassLevels3.Selections)
                {
                    selection.Features = selection.Features.AddToArray(waterdomain, waterdomainprogressdruid, waterdomainspelllistfeaturedruid);

                }
                SisterFromTomb_barbcamp.ReplaceComponent(nymphLevels2, newAddClassLevels3);

                var nymphLevels = SisterFromTomb_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 9;
                var spell_list = newnymphLevels.MemorizeSpells.AddToArray(snowball, snowball, flurryofsnowballs, burstofnettles, burstofnettles, poxpostules, poxpostules);
                newnymphLevels.MemorizeSpells = spell_list;
                SisterFromTomb_barbcamp.ReplaceComponent(nymphLevels, newnymphLevels);

                var nymphLevels3 = SisterFromTomb_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels3 = nymphLevels3.CreateCopy();
                var spell_list2 = newnymphLevels3.MemorizeSpells.RemoveFromArray(summonnaturesallyIV);
                newnymphLevels3.MemorizeSpells = spell_list2;
                SisterFromTomb_barbcamp.ReplaceComponent(nymphLevels3, newnymphLevels3);

                var nymphLevels4 = SisterFromTomb_barbcamp.ComponentsArray
              .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels4 = nymphLevels4.CreateCopy();
                var spell_list3 = newnymphLevels4.MemorizeSpells.RemoveFromArray(flamestrike);
                newnymphLevels4.MemorizeSpells = spell_list3;
                SisterFromTomb_barbcamp.ReplaceComponent(nymphLevels4, newnymphLevels4);

                var auto_metamgic = library.Get<BlueprintFeature>("4250bd8c29ba9dd48a1ad69deca4db40");
                auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.snowball);


                var brain = SisterFromTomb_barbcamp.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(flamestrikeaiaction);
                brain.Actions = brain.Actions.AddToArray(
                                                         AiActions.calllightningsister,
                                                         AiActions.castsnowballsister,
                                                         AiActions.castflurryofsnowballs,
                                                         AiActions.castburstofnettles,
                                                         AiActions.castflamestrikesister,
                                                         AiActions.castpoxpostules);
            }
        }

        static void updateBarbarianmeleeLevel7()

        {


            var BarbMeleeLevel7 = library.Get<BlueprintUnit>("d31740cc6179b6649b3397e6fc51e09a");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var lesseratavismtotem = library.Get<BlueprintFeature>("ecbb5b8b2c354ee89949f8f163982ef7");
            var lesseratavismtotembuff = library.Get<BlueprintBuff>("3858dd3e9a94f0b41abdc58387d68ccf");
            var InspireFerocityFeature = library.Get<BlueprintFeature>("32c4d277007aed74c905779cd04a6fed");
            var InspireFerocityBuff = library.Get<BlueprintBuff>("9ec69854596674a4ba40802e6337894d");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BarbMeleeLevel7.AddFacts[0], "BarbMeleeLevel7feature", "2819cf722b4347f7bc95e2e269a84b9f");
            BarbMeleeLevel7.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BarbMeleeLevel7feature = library.Get<BlueprintFeature>("2819cf722b4347f7bc95e2e269a84b9f");



            BarbMeleeLevel7.AddFacts = BarbMeleeLevel7.AddFacts.AddToArray(lesseratavismtotembuff,InspireFerocityBuff);



            var fighterLevels = BarbMeleeLevel7feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(lesseratavismtotem,InspireFerocityFeature);

            }
            BarbMeleeLevel7feature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BarbMeleeLevel7.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //compositelongbow +1


            var brain = BarbMeleeLevel7.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);


        }

        static void updateBarbfighter()

        {


            var Barbfighter = library.Get<BlueprintUnit>("ac331cf158eccf44889c257e03d9f079");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)Barbfighter.AddFacts[0], "Barbfighterfeature", "fe2f1a983a60494aa160518953f5932b");
            Barbfighter.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var Barbfighterfeature = library.Get<BlueprintFeature>("fe2f1a983a60494aa160518953f5932b");





            var fighterLevels = Barbfighterfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(cornugon);

            }
            Barbfighterfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            Barbfighter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //Lonwsword +1



            var brain = Barbfighter.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);

        }

        static void updateBarbranger()

        {


            var Barbranger = library.Get<BlueprintUnit>("920803089e8ad754b8c8f09550cf37f8");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)Barbranger.AddFacts[0], "Barbrangerfeature", "883ede8be96c4cae8cbb89a0eaa1f17a");
            Barbranger.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var Barbrangerfeature = library.Get<BlueprintFeature>("883ede8be96c4cae8cbb89a0eaa1f17a");





            var fighterLevels = Barbrangerfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(manyshot);

            }
            Barbrangerfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            Barbranger.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2753a0159681be94da3a5eeabc8c8d1a"); //compositelongbow +1



            


        }

        static void updateDunswardTombSorcerer()

        {


            var DunswardSorcerer = library.Get<BlueprintUnit>("2d56a1dfd318bba4a880fa66edb0caa8");
            var wizardclass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var blindness = library.Get<BlueprintAbility>("46fd02ad56c35224c9c91c88cd457791");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var DunswardSpellList = library.Get<BlueprintFeature>("b712f3c37e6fcce4aa6024f293260753");
            var RivalBlindnessAI = library.Get<BlueprintAiCastSpell>("5ddad52f0ff6a6e4bb6c824ea62aa227");
            var fear = library.Get<BlueprintAbility>("d2aeac47450c76347aebbc02e4f463e0");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var summonelementallarge = library.Get<BlueprintAbility>("89404dd71edc1aa42962824b44156fe5");
            var flamearrowbuff = library.Get<BlueprintBuff>("0db933ed440346388c9f4ed034e7e4a0");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var overwhelminggrief = library.Get<BlueprintAbility>("dd2918e4a77c50044acba1ac93494c36");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");

            DunswardSorcerer.AddFacts = DunswardSorcerer.AddFacts.AddToArray(flamearrowbuff,quicken,StoneskinBuffCL11);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)DunswardSorcerer.AddFacts[0], "DunswardSorcererfeature", "5845838202804895831eb2dea5cc186c");
            DunswardSorcerer.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var DunswardSorcererfeature = library.Get<BlueprintFeature>("5845838202804895831eb2dea5cc186c");



            var wizardLevels = DunswardSorcererfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            DunswardSorcererfeature.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels3 = DunswardSorcererfeature.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == wizardclass);
            var newsorcererLevels = wizardLevels3.CreateCopy();
            var spell_list2 = newsorcererLevels.MemorizeSpells.RemoveFromArray(blindness);
            newsorcererLevels.MemorizeSpells = spell_list2;
            DunswardSorcererfeature.ReplaceComponent(wizardLevels3, newsorcererLevels);

            var wizardLevels4 = DunswardSorcererfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newsorcererLevels3 = wizardLevels4.CreateCopy();
            var spell_list4 = newsorcererLevels.MemorizeSpells.RemoveFromArray(blindness);
            newsorcererLevels3.MemorizeSpells = spell_list4;
            DunswardSorcererfeature.ReplaceComponent(wizardLevels4, newsorcererLevels3);

            var wizardLevels5 = DunswardSorcererfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardclass);
            var newsorcererLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newsorcererLevels5.MemorizeSpells.AddToArray(displacement, crushingdespair, mirrorimage, summonelementallarge, 
                                                                           boneshaker,shield, boneshaker,icyprison,overwhelminggrief,overwhelminggrief,magicmissle,magicmissle,slow);
            newsorcererLevels5.MemorizeSpells = spell_list5;
            DunswardSorcererfeature.ReplaceComponent(wizardLevels5, newsorcererLevels5);

            var wizardLevels6 = DunswardSorcererfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newsorcererLevels6 = wizardLevels6.CreateCopy();
            var spell_list6 = newsorcererLevels6.MemorizeSpells.RemoveFromArray(blindness);
            newsorcererLevels6.MemorizeSpells = spell_list6;
            DunswardSorcererfeature.ReplaceComponent(wizardLevels6, newsorcererLevels6);

            var sorcererLevels2 = DunswardSpellList.ComponentsArray
                 .OfType<LearnSpells>()
                .First(c => c.CharacterClass == wizardclass);
            var newsorcererLevels2 = sorcererLevels2.CreateCopy();
            var spell_list3 = newsorcererLevels2.Spells.AddToArray(displacement,crushingdespair,mirrorimage,summonelementallarge,boneshaker,icyprison,overwhelminggrief,shield,magicmissle);
            newsorcererLevels2.Spells = spell_list3;
            DunswardSpellList.ReplaceComponent(sorcererLevels2, newsorcererLevels2);

            var sorcererLevels7 = DunswardSpellList.ComponentsArray
     .OfType<LearnSpells>()
    .First(c => c.CharacterClass == wizardclass);
            var newsorcererLevels7= sorcererLevels7.CreateCopy();
            var spell_list7 = newsorcererLevels2.Spells.RemoveFromArray(fear);
            newsorcererLevels7.Spells = spell_list7;
            DunswardSpellList.ReplaceComponent(sorcererLevels7, newsorcererLevels7);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            var brain = DunswardSorcerer.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(RivalBlindnessAI);
            brain.Actions = brain.Actions.AddToArray(AiActions.displacement_first,
                                    AiActions.castblindness,AiActions.castcrushingdespair,
                                    AiActions.summonelementallargeair, AiActions.castboneshaker,AiActions.casticyprison,AiActions.castoverwhelminggriefzombie,AiActions.castshieldsprig,AiActions.magicmissledelay);

        }

        static void updateDunswardTombCleric()

        {


            var DunswardCleric = library.Get<BlueprintUnit>("8039405a792372a469e5015d5a027890");
            var clericclass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var slayliving = library.Get<BlueprintAbility>("4fbd47525382517419c66fb548fe9a67");
            var bane = library.Get<BlueprintAbility>("8bc64d869456b004b9db255cdd1ea734");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("093e88ae36b09d941aee8c1d4d628156");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var Resistenergycommunal = library.Get<BlueprintAbility>("7bb0c402f7f789d4d9fae8ca87b4c7e2");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var rayofsickening = library.Get<BlueprintAbility>("fa3078b9976a5b24caf92e20ee9c0f54");
            var profanenimbus = library.Get<BlueprintAbility>("b56521d58f996cd4299dab3f38d5fe31");
            

        DunswardCleric.AddFacts = DunswardCleric.AddFacts.AddToArray(quicken);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)DunswardCleric.AddFacts[0], "DunswardClericfeature", "d839f712aea842cf94131c52578c3e76");
            DunswardCleric.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var DunswardClericfeature = library.Get<BlueprintFeature>("d839f712aea842cf94131c52578c3e76");





            var clericLevels = DunswardClericfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericclass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            DunswardClericfeature.ReplaceComponent(clericLevels, newAddClassLevels);

            var wizardLevels3 = DunswardClericfeature.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == clericclass);
            var newsorcererLevels = wizardLevels3.CreateCopy();
            var spell_list2 = newsorcererLevels.MemorizeSpells.RemoveFromArray(holdperson);
            newsorcererLevels.MemorizeSpells = spell_list2;
            DunswardClericfeature.ReplaceComponent(wizardLevels3, newsorcererLevels);

            var wizardLevels4 = DunswardClericfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericclass);
            var newsorcererLevels3 = wizardLevels4.CreateCopy();
            var spell_list4 = newsorcererLevels.MemorizeSpells.RemoveFromArray(holdperson);
            newsorcererLevels3.MemorizeSpells = spell_list4;
            DunswardClericfeature.ReplaceComponent(wizardLevels4, newsorcererLevels3);

            var wizardLevels5 = DunswardClericfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == clericclass);
            var newsorcererLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newsorcererLevels5.MemorizeSpells.AddToArray(profanenimbus,boneshaker, boneshaker, slayliving, bane, divinepower,Resistenergycommunal,dispel,dispel,rayofsickening,rayofsickening);
            newsorcererLevels5.MemorizeSpells = spell_list5;
            DunswardClericfeature.ReplaceComponent(wizardLevels5, newsorcererLevels5);

            var wizardLevels6 = DunswardClericfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericclass);
            var newsorcererLevels6 = wizardLevels6.CreateCopy();
            var spell_list6 = newsorcererLevels6.MemorizeSpells.RemoveFromArray(holdperson);
            newsorcererLevels6.MemorizeSpells = spell_list6;
            DunswardClericfeature.ReplaceComponent(wizardLevels6, newsorcererLevels6);





            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var brain = DunswardCleric.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castbane,AiActions.castslayliving,AiActions.divine_power_first,
                                                     AiActions.castresistfirecommunal,AiActions.castboneshaker,AiActions.dispel,AiActions.castrayofsickening,AiActions.holdpersonzombiecleric,AiActions.castprofanenimbus);

        }

        static void updateDunswardTombFighter()

        {


            var DunswardFighter = library.Get<BlueprintUnit>("71dfa48d43fdc414c857f710d59d2f6b");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var towershieldprof = library.Get<BlueprintFeature>("6105f450bb2acbd458d277e71e19d835");
            var towershieldspecial = library.Get<BlueprintArchetype>("a599da9a8a6b9e54083b0a4d2a25db59");
            var heavybladespecialization = library.Get<BlueprintFeature>("2a0ce0186af38ed419f47fce16f93c2a");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");

            DunswardFighter.AddFacts = DunswardFighter.AddFacts.AddToArray(disarm,greatfortitude,lightningreflexes);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)DunswardFighter.AddFacts[0], "DunswardFighterfeature", "4e564e8342134eee89f370c1348bb333");
            DunswardFighter.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var DunswardFighterfeature = library.Get<BlueprintFeature>("4e564e8342134eee89f370c1348bb333");





            var fighterLevels = DunswardFighterfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            var archetype = newAddClassLevels.Archetypes.AddToArray(towershieldspecial);
            newAddClassLevels.Archetypes = archetype;
            DunswardFighterfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            var fighterLevels2 = DunswardFighterfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels2 = fighterLevels2.CreateCopy();
            foreach (var selection in newAddClassLevels2.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(heavybladespecialization);

            }
            DunswardFighterfeature.ReplaceComponent(fighterLevels2, newAddClassLevels2);




            var brain = DunswardFighter.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre);

        }

        static void updateDunswardTombArcher()

        {


            var DunswardArcher = library.Get<BlueprintUnit>("e5a1c3cb916861742808477a5d4f5540");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");
            

            DunswardArcher.AddFacts = DunswardArcher.AddFacts.AddToArray(lightningreflexes,blindfight);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)DunswardArcher.AddFacts[0], "DunswardArcherFeature", "8703b0e0b6fb4fd79df59d48408ac616");
            DunswardArcher.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var DunswardArcherfeature = library.Get<BlueprintFeature>("8703b0e0b6fb4fd79df59d48408ac616");





            var fighterLevels = DunswardArcherfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            DunswardArcherfeature.ReplaceComponent(fighterLevels, newAddClassLevels);

          



        }

        static void updateDunswardTombBarbarian()

        {


            var DunswardBarbarian = library.Get<BlueprintUnit>("783c06fcb8ecb0840a6ba5a0ff241cb2");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var animalfury = library.Get<BlueprintFeature>("25954b1652bebc2409f9cb9d5728bceb");

            

            DunswardBarbarian.AddFacts = DunswardBarbarian.AddFacts.AddToArray(sunder,animalfury);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)DunswardBarbarian.AddFacts[0], "DunswardBarbarianFeature", "dca50a766dde4c77bba36ff7bda568b3");
            DunswardBarbarian.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var DunswardBarbarianfeature = library.Get<BlueprintFeature>("dca50a766dde4c77bba36ff7bda568b3");





            var barbLevels = DunswardBarbarianfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            DunswardBarbarianfeature.ReplaceComponent(barbLevels, newAddClassLevels);


            var brain = DunswardBarbarian.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);


        }


        static void changeAstraDaemonstandard()
        {



            var standardastra = library.Get<BlueprintUnit>("5acac84098a14f543822310ecfd0bb4a");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var vampireshield = library.Get<BlueprintAbility>("a34921035f2a6714e9be5ca76c5e34b5");
            var AstradaemonFingerOfDeathAiAction = library.Get<BlueprintAiCastSpell>("f1a614b3719a7b24782e631eefcc1654");
            var vampirictouchastral = library.Get<BlueprintAbility>("5db2468da97174048bfb0b3096d01fd6");

            var energydrain = library.Get<BlueprintAbility>("37302f72b06ced1408bf5bb965766d46");
            var fingerofdeath = library.Get<BlueprintAbility>("6f1dcf6cfa92d1948a740195707c0dbe");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");



            
            standardastra.AddFacts = standardastra.AddFacts.RemoveFromArray(enervation);
            standardastra.AddFacts = standardastra.AddFacts.RemoveFromArray(energydrain);
            standardastra.AddFacts = standardastra.AddFacts.AddToArray(quicken, toughness, displacement);

            var outsiderLevels = standardastra.ComponentsArray
                       .OfType<AddClassLevels>()
                          .First(c => c.CharacterClass == outsiderclass);
            var newAddClassLevels = outsiderLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            newAddClassLevels.Levels = 17;
            standardastra.ReplaceComponent(outsiderLevels, newAddClassLevels);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);







            var brain = standardastra.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AstradaemonFingerOfDeathAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai, AiActions.castfingerofdeathastraldaemonguard);


        }

        static void changeDaemonGuardian()
        {



            var daemonguardian = library.Get<BlueprintUnit>("bd685eb1e99dbb3478bcf3612a8044e0");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var vampireshield = library.Get<BlueprintAbility>("a34921035f2a6714e9be5ca76c5e34b5");
            var AstradaemonFingerOfDeathAiAction = library.Get<BlueprintAiCastSpell>("f1a614b3719a7b24782e631eefcc1654");
            var vampirictouchastral = library.Get<BlueprintAbility>("5db2468da97174048bfb0b3096d01fd6");

            var energydrain = library.Get<BlueprintAbility>("37302f72b06ced1408bf5bb965766d46");
            var fingerofdeath = library.Get<BlueprintAbility>("6f1dcf6cfa92d1948a740195707c0dbe");
            var natarmor12 = library.Get<BlueprintUnitFact>("0b2d92c6aac8093489dfdadf1e448280");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var dr5 = library.Get<BlueprintFeature>("f4b3dfedcc150d249be42c0d12302b20");





            daemonguardian.MaxHP = 70;
            daemonguardian.AddFacts = daemonguardian.AddFacts.RemoveFromArray(enervation);
            daemonguardian.AddFacts = daemonguardian.AddFacts.RemoveFromArray(energydrain);
            daemonguardian.AddFacts = daemonguardian.AddFacts.RemoveFromArray(natarmor12);
            daemonguardian.AddFacts = daemonguardian.AddFacts.AddToArray(natarmor14, quicken, toughness, dr5, displacement);

            var outsiderLevels = daemonguardian.ComponentsArray
                       .OfType<AddClassLevels>()
                          .First(c => c.CharacterClass == outsiderclass);
            var newAddClassLevels = outsiderLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            newAddClassLevels.Levels = 18;
            daemonguardian.ReplaceComponent(outsiderLevels, newAddClassLevels);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);







            var brain = daemonguardian.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AstradaemonFingerOfDeathAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai, AiActions.castfingerofdeathastraldaemonguard);


        }

        static void changeThanadaemon()
        {



            var thanadaemon = library.Get<BlueprintUnit>("bc6b0477fba49e54e84e2c7ba3cf2144");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var fear = library.Get<BlueprintAbility>("d2aeac47450c76347aebbc02e4f463e0");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var wavesoffatigue = library.Get<BlueprintAbility>("8878d0c46dfbd564e9d5756349d5e439");
           





            thanadaemon.AddFacts = thanadaemon.AddFacts.RemoveFromArray(enervation);

            thanadaemon.AddFacts = thanadaemon.AddFacts.AddToArray(toughness,fear,wavesoffatigue);

            var outsiderLevels = thanadaemon.ComponentsArray
                       .OfType<AddClassLevels>()
                          .First(c => c.CharacterClass == outsiderclass);
            var newAddClassLevels = outsiderLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            newAddClassLevels.Levels = 15;
            thanadaemon.ReplaceComponent(outsiderLevels, newAddClassLevels);


            var brain = thanadaemon.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castfearthanadaemon,AiActions.castwavesoffatigue);


        }

        static void changeCephalLorentus()
        {



            var Cephal = library.Get<BlueprintUnit>("bcef8ede9659d704db2d3b40f78cfcd2");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var precisebomb = library.Get<BlueprintFeature>("5c396342f614dd644a48c3af08d79701");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var blindbomb = library.Get<BlueprintFeature>("c3da68b2222768b4f9352fefd29ad15c");
            var grenadier = library.Get<BlueprintArchetype>("6af888a7800b3e949a40f558ff204aae");
            var preserveorgans = library.Get<BlueprintFeature>("76b4bb8e54f3f5c418f421684c76ef4e");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var explosivebombfeature = library.Get<BlueprintFeature>("1d0e812131f345742adca6431d5bc4fe");
            var explosivebombbuff = library.Get<BlueprintBuff>("63063a8ab91bcbc44a13294227580e84");
            var acidbomb = library.Get<BlueprintFeature>("1ee30ffd28843b84282b04e5d4e8bc7b");
            var acidbombbuff = library.Get<BlueprintBuff>("4e15565b830d4b841b59e701d3395371");
            var cursedbombs = library.Get<BlueprintFeature>("bf8f80f3a492e7946924e1cd9c4b0867");
            var GreaterCogIntellBuff = library.Get<BlueprintBuff>("1c2fdba3b33dacd41afd5b74d84c7332");
            var GreaterCogIntell = library.Get<BlueprintAbility>("7fe18aed4a7a8f44289d1b262f432c16");
            var GreaterCogFeature = library.Get<BlueprintFeature>("18eb29676492e844eb5a55d1c855ce69");
            var GreaterMutFeature = library.Get<BlueprintFeature>("76c61966afdd82048911f3d63c6fe0bc");
            var GreaterMutDexBuff = library.Get<BlueprintBuff>("84ae955af09809b4ea31a2c719c68377");
            var GreaterMutDexell = library.Get<BlueprintAbility>("73b97114bf2f9914bba305fc3f032468");
            var infusion = library.Get<BlueprintFeature>("57d5077b301ade749b840b0ea9230bb9");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");



            Cephal.AddFacts = Cephal.AddFacts.RemoveFromArray(enervation);
            Cephal.AddFacts = Cephal.AddFacts.RemoveFromArray(magearmorbuff);
            Cephal.AddFacts = Cephal.AddFacts.RemoveFromArray(mirrorimage);
            Cephal.AddFacts = Cephal.AddFacts.AddToArray(precisebomb, fastbombbuff, preciseshot, preserveorgans,
                acidbomb, acidbombbuff, cursedbombs, GreaterCogFeature, GreaterCogIntell, GreaterCogIntellBuff, GreaterMutFeature,
                GreaterMutDexell, GreaterMutDexBuff, infusion, displacement, haste, extrabomb, extrabomb);





            var alchemistLevels = Cephal.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            newAddClassLevels.Levels = 16;
            var archetype = newAddClassLevels.Archetypes.AddToArray(grenadier);
            newAddClassLevels.Archetypes = archetype;
            Cephal.ReplaceComponent(alchemistLevels, newAddClassLevels);






            var undeadLevels = Cephal.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels4 = undeadLevels.CreateCopy();
            newAddClassLevels4.Levels = 3;
            Cephal.ReplaceComponent(undeadLevels, newAddClassLevels4);




            Cephal.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("156f5345eaea2a942a98d7526c87ffbc"); //repeatingcrossbow plus 3

            Cephal.Body.PrimaryHandAlternative1 = library.Get<BlueprintItemWeapon>("4b6fe376ec6af3247805fb9aba2665b3"); //staff

            Cephal.Body.Armor = library.Get<BlueprintItemArmor>("91973844b871531419c5aa35afa0b4bb"); //Grenadier


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var brain = Cephal.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.throwcursedbombdeter, AiActions.throwacidbomb, AiActions.casthaste, AiActions.displacement_first, AiActions.castheroism);


        }

        static void changeDreadZombieFighterFerocius()
        {

            var dread_zombie = library.Get<BlueprintUnit>("3fefbe1243265274f89e0280fb87a31b");
            var dread_zombieoldfeature = library.Get<BlueprintFeature>("653d1afcb01ca694a9c867a65efe7f84");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var magusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var ImprovedCleavingFinish = library.Get<BlueprintFeature>("ffa1b373190af4f4db7a5501904a1983");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var shieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");



            dread_zombie.AddFacts = dread_zombie.AddFacts.AddToArray(StoneskinBuffCL11, dimensionstrikefeat,quicken,catsgracebuff,shieldbuff, electricalfeat,frostfeat);


            dread_zombie.Strength = 28;
            dread_zombie.Dexterity = 18;

            dread_zombie.Intelligence = 16;

            dread_zombie.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{dread_zombie.name}.name", "Dread Zombie Cyclop Lorekeeper"));


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)dread_zombie.AddFacts[0], "dread_lorekeeperfeatures", "f8f00119b6c440c683c6673972a6361b");
            dread_zombie.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var dread_lorekeeperfeatures = library.Get<BlueprintFeature>("f8f00119b6c440c683c6673972a6361b");




            var druidLevels = dread_lorekeeperfeatures.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = druidLevels.CreateCopy();
            newAddClassLevels.Levels = 0;
            dread_lorekeeperfeatures.ReplaceComponent(druidLevels, newAddClassLevels);

            var magusLevels = dread_lorekeeperfeatures.GetComponent<AddClassLevels>();
            var newmagusLevels = magusLevels.CreateCopy();
            newmagusLevels.CharacterClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            newmagusLevels.Levels = 11;
            foreach (var selection in newmagusLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            dread_lorekeeperfeatures.AddComponent(newmagusLevels);





            var druidLevels2 = dread_lorekeeperfeatures.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == magusClass);
            var newAddClassLevels2 = druidLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(frigidtouch, frigidtouch, frigidtouch, displacement,
                                                                             mirrorimage, shockinggrasp, shockinggrasp, shockinggrasp, 
                                                                             haste, phantasmalkiller, vampirictouch, catsgrace,shield);
            newAddClassLevels2.MemorizeSpells = spell_list;
            dread_lorekeeperfeatures.ReplaceComponent(druidLevels2, newAddClassLevels2);

            var druidLevels4 = dread_lorekeeperfeatures.ComponentsArray
     .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == magusClass);
            var newAddClassLevels4 = druidLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(frigidtouch, displacement, shockinggrasp, phantasmalkiller,haste, vampirictouch, mirrorimage, catsgrace,shield);
            newAddClassLevels4.SelectSpells = spell_list4;
            dread_lorekeeperfeatures.ReplaceComponent(druidLevels4, newAddClassLevels4);




            var undeadLevels = dread_lorekeeperfeatures.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels3 = undeadLevels.CreateCopy();
            newAddClassLevels3.Levels = 5;
            dread_lorekeeperfeatures.ReplaceComponent(undeadLevels, newAddClassLevels3);



            dread_zombie.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("0ce4b3f4a3d70fa45851313a7f3d233f"); //battleaxe +1


            dread_zombie.AddFacts = dread_zombie.AddFacts.RemoveFromArray(greatcleavefeat);
            dread_zombie.AddFacts = dread_zombie.AddFacts.RemoveFromArray(cleavefeat);
            dread_zombie.AddFacts = dread_zombie.AddFacts.RemoveFromArray(ImprovedCleavingFinish);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);




            var brain = dread_zombie.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castfrigidtouch,AiActions.castphantasmalkiller,AiActions.castvampirictouch,
                                                    AiActions.mirrorimagecyclop,AiActions.displacementvordakai,AiActions.castcatsgrace,AiActions.castshockgrasp,AiActions.casthaste,AiActions.castshieldsprig);


        }

        static void fixThickSkinnedZombieCyclopFighter()
        {
            var thickskinnedzombie = library.Get<BlueprintUnit>("037c02096637e864ebe2da0fc1122f70");
            var oldfeaturelist = library.Get<BlueprintFeature>("653d1afcb01ca694a9c867a65efe7f84");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var weapontrainingaxes = library.Get<BlueprintFeature>("1b18d6a1297950f4bba9d121cfc735e9");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var Alertness = library.Get<BlueprintFeature>("1c04fe9a13a22bc499ffac03e6f79153");
            var cleavefeature = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var greatercleavefeature = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");








            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)thickskinnedzombie.AddFacts[0], "thickskinneddreadzombiechanges", "9ed0ada376bd4fe9bb9738f2c72b8f2c");
            thickskinnedzombie.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var thickskinzombiefeatures = library.Get<BlueprintFeature>("9ed0ada376bd4fe9bb9738f2c72b8f2c");



            var fighterLevels = thickskinzombiefeatures.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(weapontrainingaxes,cornugon,dodge,powerattackfeature,toughness,Alertness,cleavefeature,greatercleavefeature);

            }
            thickskinzombiefeatures.ReplaceComponent(fighterLevels, newAddClassLevels);

          

            var undeadLevels = thickskinzombiefeatures.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 4;
            thickskinzombiefeatures.ReplaceComponent(undeadLevels, newAddClassLevels2);



            var brain = thickskinnedzombie.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);


        }

        static void fixdreadzombieCR8()
        {
            var dreadzombieCR8 = library.Get<BlueprintUnit>("ccc5faf34b4788b429b9dacbfbcfdc43");
            var oldfeaturelist = library.Get<BlueprintFeature>("b813fa8623e6398428e059354ad46204");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var weapontrainingaxes = library.Get<BlueprintFeature>("1b18d6a1297950f4bba9d121cfc735e9");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)dreadzombieCR8.AddFacts[0], "dreadzombieCR8changes", "785bfc33d03a404e827a0bfe7bf27ca0");
            dreadzombieCR8.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var dreadzombieCR8features = library.Get<BlueprintFeature>("785bfc33d03a404e827a0bfe7bf27ca0");





            var fighterLevels = dreadzombieCR8features.GetComponent<AddClassLevels>();
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.CharacterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            newfighterLevels.Levels = 8;
            foreach (var selection in newfighterLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(weapontrainingaxes);

            }
            dreadzombieCR8features.AddComponent(newfighterLevels);



            var undeadLevels = dreadzombieCR8features.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 4;
            dreadzombieCR8features.ReplaceComponent(undeadLevels, newAddClassLevels2);



            var brain = dreadzombieCR8.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);


        }

        static void fixdreadzombieCR9()
        {
            var dreadzombieCR9 = library.Get<BlueprintUnit>("8d03bafee9a97b84a97ab85275b1e74a");
            var oldfeaturelist = library.Get<BlueprintFeature>("b813fa8623e6398428e059354ad46204");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var weapontrainingaxes = library.Get<BlueprintFeature>("1b18d6a1297950f4bba9d121cfc735e9");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)dreadzombieCR9.AddFacts[0], "dreadzombieCR9changes", "89fb0e51c04040068f5ba5407fb23ab0");
            dreadzombieCR9.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var dreadzombieCR8features = library.Get<BlueprintFeature>("89fb0e51c04040068f5ba5407fb23ab0");



            var fighterLevels = dreadzombieCR8features.GetComponent<AddClassLevels>();
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.CharacterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            newfighterLevels.Levels = 8;
            foreach (var selection in newfighterLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(weapontrainingaxes);

            }
            dreadzombieCR8features.AddComponent(newfighterLevels);




            var undeadLevels = dreadzombieCR8features.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 4;
            dreadzombieCR8features.ReplaceComponent(undeadLevels, newAddClassLevels2);



            var brain = dreadzombieCR9.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);


        }

        static void fixdreadgreaterbarbarian()
        {
            var dreadgreaterbarbarian = library.Get<BlueprintUnit>("ce2d24dec712e094d94c336053abeb57");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var guardedstance = library.Get<BlueprintFeature>("efb97e482f53f064dab85a9eeaf01085");
            var protectvitals = library.Get<BlueprintFeature>("efd53fe2887c3a54d86b99f4bba61dd6");
            var lesseratavismtotem = library.Get<BlueprintFeature>("ecbb5b8b2c354ee89949f8f163982ef7");
            var lesseratavismtotembuff = library.Get<BlueprintBuff>("3858dd3e9a94f0b41abdc58387d68ccf");



            dreadgreaterbarbarian.Strength = 34;


            dreadgreaterbarbarian.AddFacts = dreadgreaterbarbarian.AddFacts.AddToArray(lesseratavismtotembuff);


            var fighterLevels = dreadgreaterbarbarian.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 13;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray(guardedstance,protectvitals,lesseratavismtotem);

            }
            dreadgreaterbarbarian.ReplaceComponent(fighterLevels, newAddClassLevels);



            var undeadLevels = dreadgreaterbarbarian.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 4;
            dreadgreaterbarbarian.ReplaceComponent(undeadLevels, newAddClassLevels2);



            var brain = dreadgreaterbarbarian.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);


        }

        static void fixDreadZombieCleric()
        {
            var cleric = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var dread_cleric = library.Get<BlueprintUnit>("fe662d20a0272bb4ea66bef675b4b52d");
            var unit = library.Get<BlueprintFeature>("82662ebad000b1349baf02e2f8e86748");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var hold_person = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var inflictmoderatewoundmass = library.Get<BlueprintAbility>("03944622fbe04824684ec29ff2cec6a7");
            var darknessdomain = library.Get<BlueprintFeature>("9dc5863168155854fa8daf4a780f6663");
            var darknessdomainprog = library.Get<BlueprintProgression>("1e1b4128290b11a41ba55280ede90d7d");
            var DarknessDomainSpellListFeature = library.Get<BlueprintFeature>("e931fdb1aa59d2c4fac3d32634b983e5");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            var DarknessDomainSpellList = library.Get<BlueprintSpellList>("fa79e8d1fe20b0e43bf3ebca4cef93b9");
            var constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var bullstrength = library.Get<BlueprintAbility>("4c3d08935262b6544ae97599b3a9556d");
            var holdpersonai = library.Get<BlueprintAiCastSpell>("093e88ae36b09d941aee8c1d4d628156");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");

            var add_class_levels = dread_cleric.GetComponent<AddAbilityToCharacterComponent>();

            var ability_list = add_class_levels.Abilities.RemoveFromArray(hold_person);

            add_class_levels.Abilities = ability_list;

            dread_cleric.AddFacts = dread_cleric.AddFacts.AddToArray(quicken);



            var clericLevels2 = unit.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == cleric);
            var newAddClassLevels3 = clericLevels2.CreateCopy();
            foreach (var selection in newAddClassLevels3.Selections)
            {
                selection.Features = selection.Features.AddToArray(darknessdomain, darknessdomainprog, DarknessDomainSpellListFeature);

            }
            unit.ReplaceComponent(clericLevels2, newAddClassLevels3);

            var clericLevels = unit.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == cleric);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 12;
            var spell_list = newclericLevels.MemorizeSpells.AddToArray(boneshaker, boneshaker,
                inflictmoderatewoundmass, umbralstrike, constrictingcoils, constrictingcoils, bullsmass);
            newclericLevels.MemorizeSpells = spell_list;
            unit.ReplaceComponent(clericLevels, newclericLevels);

            var clericLevels5 = unit.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == cleric);
            var newclericLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newclericLevels5.MemorizeSpells.RemoveFromArray(bullstrength);
            newclericLevels5.MemorizeSpells = spell_list5;
            unit.ReplaceComponent(clericLevels5, newclericLevels5);

            var undeadLevels = unit.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 4;
            unit.ReplaceComponent(undeadLevels, newAddClassLevels2);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.bullsmass);




            var brain = dread_cleric.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(holdpersonai);
            brain.Actions = brain.Actions.AddToArray(
                                                     AiActions.castboneshaker,
                                                     AiActions.castmoonfire,
                                                     AiActions.inflictmoderatemass,
                                                     AiActions.holdpersondelay,
                                                     AiActions.constrictingcoilszombie,
                                                     AiActions.castbullsmass);


        }

        static void fixundeadcyclopspriest()
        {

            var dread_cleric = library.Get<BlueprintUnit>("f0a4efcaa7173bd43ba7fcf1f576e484");

            var hold_person = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");



            var add_class_levels = dread_cleric.GetComponent<AddAbilityToCharacterComponent>();

            var ability_list = add_class_levels.Abilities.RemoveFromArray(hold_person);

            add_class_levels.Abilities = ability_list;


        }

        static void updateHoragnamon()
        {
            var animal = library.Get<BlueprintCharacterClass>("4cd1757a0eea7694ba5c933729a53920");
            var Horag = library.Get<BlueprintUnit>("b99ff85753335824885876f8e5ea8e4c");
            var unit = library.Get<BlueprintFeature>("d241d8ea987476c438db67fe24ae04d3");




            var animalLevels = unit.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == animal);
            var newanimalLevels = animalLevels.CreateCopy();
            newanimalLevels.Levels = 16;
            unit.ReplaceComponent(animalLevels, newanimalLevels);

      


        }

        static void updateVordakai()


        {

            var vordakai_feature = library.Get<BlueprintFeature>("1e873037c4cc3804abcfb7ea369e59aa");
            var vordakai_spells = library.Get<BlueprintFeature>("b3f49646e5c68124db58fbcabbde5a28");
            var vordakai = library.Get<BlueprintUnit>("f66d7df4dc3c7e04d9f357935e95f9e9");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var summon_monster_8 = library.Get<BlueprintAbility>("d3ac756a229830243a72e84f3ab050d0");
            var horrid_wilting = library.Get<BlueprintAbility>("08323922485f7e246acb3d2276515526");
            var summoncyclops = library.Get<BlueprintAbility>("4089fb0f36bb4ca2a459a4420279ff87");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var dr5 = library.Get<BlueprintFeature>("f4b3dfedcc150d249be42c0d12302b20");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var VampiricTouchCast = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            var fingerofdeath = library.Get<BlueprintAbility>("6f1dcf6cfa92d1948a740195707c0dbe");
            var natarmor7 = library.Get<BlueprintUnitFact>("e73864391ccf0894997928443a29d755");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var shieldbuff = library.Get<BlueprintBuff>("f01f31b601e38034fa0460d16778a306");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");


            {

                vordakai.MaxHP = 30;
                vordakai.AddFacts = vordakai.AddFacts.RemoveFromArray(natarmor7);
                vordakai.AddFacts = vordakai.AddFacts.AddToArray(quicken,summoncyclops,dr5,natarmor10,displacementbuff,shieldbuff);


                vordakai.Intelligence = 21;

          



                var wizardLevels = vordakai_feature.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
                var newwizardLevels = wizardLevels.CreateCopy();
                newwizardLevels.Levels = 16;
                var spell_list = newwizardLevels.MemorizeSpells.AddToArray(summon_monster_8,horrid_wilting,displacement,greaterdispel,slow,slow,fingerofdeath,fingerofdeath,magearmor);
                newwizardLevels.MemorizeSpells = spell_list;
                vordakai_feature.ReplaceComponent(wizardLevels, newwizardLevels);

                var wizardLevels2 = vordakai_spells.ComponentsArray
                   .OfType<LearnSpells>()
                   .First(c => c.CharacterClass == wizardClass);
                var newwizardLevels2 = wizardLevels2.CreateCopy();
                var spell_list2 = newwizardLevels2.Spells.AddToArray(summon_monster_8,horrid_wilting,displacement,greaterdispel,slow,slow, fingerofdeath, fingerofdeath,magearmor);
                newwizardLevels2.Spells = spell_list2;
                vordakai_spells.ReplaceComponent(wizardLevels2, newwizardLevels2);

                var magusLevels10 = vordakai_feature.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == wizardClass);
                var newAddClassLevels10 = magusLevels10.CreateCopy();
                var spell_list10 = newAddClassLevels10.SelectSpells.AddToArray(greaterdispel);
                newAddClassLevels10.SelectSpells = spell_list10;
                vordakai_feature.ReplaceComponent(magusLevels10, newAddClassLevels10);

                var wizardLevels3 = vordakai_feature.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == wizardClass);
                var newwizardLevels3 = wizardLevels3.CreateCopy();
                var spell_list3 = newwizardLevels3.MemorizeSpells.RemoveFromArray(VampiricTouchCast);
                newwizardLevels3.MemorizeSpells = spell_list3;
                vordakai_feature.ReplaceComponent(wizardLevels3, newwizardLevels3);

                var wizardLevels4 = vordakai_feature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
                var newwizardLevels4 = wizardLevels4.CreateCopy();
                var spell_list4 = newwizardLevels4.MemorizeSpells.RemoveFromArray(VampiricTouchCast);
                newwizardLevels4.MemorizeSpells = spell_list4;
                vordakai_feature.ReplaceComponent(wizardLevels4, newwizardLevels4);

                var wizardLevels8 = vordakai_feature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
                var newwizardLevels8 = wizardLevels8.CreateCopy();
                var spell_list8 = newwizardLevels8.MemorizeSpells.RemoveFromArray(bansheeblast);
                newwizardLevels8.MemorizeSpells = spell_list8;
                vordakai_feature.ReplaceComponent(wizardLevels8, newwizardLevels8);

                var undeadLevels = vordakai_feature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == undeadClass);
                var newAddClassLevels2 = undeadLevels.CreateCopy();
                newAddClassLevels2.Levels = 6;
                vordakai_feature.ReplaceComponent(undeadLevels, newAddClassLevels2);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.magearmor);


                var ai_action = library.CopyAndAdd<BlueprintAiCastSpell>("7768e7b1d652b1545940c4f7426f3c2a", "LostlarnGhostMage_SummonMonsterVIII_AiAction", "");
                var ai_action2 = library.CopyAndAdd<BlueprintAiCastSpell>("4e7b7b939da6de14491c687409adcdf1", "FingerOfDeathVordakaiAIAction", "");
                var brain = vordakai.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(ai_action2);
                brain.Actions = brain.Actions.AddToArray(AiActions.summoncyclops,AiActions.horridwilting,
                    AiActions.displacementvordakai,AiActions.greaterdispelvordakai, AiActions.castslowvordakai,AiActions.castmagearmorvordakai,AiActions.castfingerofdeathvordakai);

                



            }
        }

        //CHAPTER 4


        //Flintlock Grasslands

        static void updateCR6_VandalPositiveClericLevel7()
        {
            var cleric_gorumA = library.Get<BlueprintUnit>("154aa5706ea3d4b4092017e3c2e8484d");
            var cleric = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var cleric_gorum_feature = library.Get<BlueprintFeature>("ca063d3e6c8576642a23fe74f2379ee0");
            var divine_power = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var sm5 = library.Get<BlueprintAbility>("630c8b85d9f07a64f917d79cb5905741");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var ShieldOfFaithAiAction = library.Get<BlueprintAiAction>("8ce28d8e7507dd24ab0ae81aebea58cf");
               

            cleric_gorumA.AddFacts = cleric_gorumA.AddFacts.AddToArray(quicken,freedomofmovementbuff);



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)cleric_gorumA.AddFacts[0], "ClericGorumAFeature", "2b133738ab664db7b7263f8ec98c7936");
            cleric_gorumA.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clericgorumAfeature = library.Get<BlueprintFeature>("2b133738ab664db7b7263f8ec98c7936");



            var clericLevels = clericgorumAfeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 11;
            var spell_list = newclericLevels.MemorizeSpells.AddToArray(searing_light,searing_light, heal, constrictingcoils,righteousmight,freedomofmovement,dispel,shieldoffaith);
            newclericLevels.MemorizeSpells = spell_list;
            clericgorumAfeature.ReplaceComponent(clericLevels, newclericLevels);

            var clericLevels2 = clericgorumAfeature.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == cleric);
            var newclericLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newclericLevels2.MemorizeSpells.RemoveFromArray(sm5);
            newclericLevels2.MemorizeSpells = spell_list2;
            clericgorumAfeature.ReplaceComponent(clericLevels2, newclericLevels2);

            var clericLevels3 = clericgorumAfeature.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == cleric);
            var newclericLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newclericLevels3.MemorizeSpells.RemoveFromArray(holdperson);
            newclericLevels3.MemorizeSpells = spell_list3;
            clericgorumAfeature.ReplaceComponent(clericLevels3, newclericLevels3);

            var clericLevels4 = clericgorumAfeature.ComponentsArray
                 .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newclericLevels4.MemorizeSpells.RemoveFromArray(divinefavor);
            newclericLevels4.MemorizeSpells = spell_list4;
            clericgorumAfeature.ReplaceComponent(clericLevels4, newclericLevels4);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);

            var brain = cleric_gorumA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(ShieldOfFaithAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglight, AiActions.healspell, AiActions.hellfire_ray,
                                                    AiActions.constrictingcoils, AiActions.castshieldoffaithgorum,AiActions.righteousmightgoblinshaman,AiActions.castfreedomofmovement,AiActions.dispel);






        }

        static void updateCR8_VandalPositiveClericLevel9()
        {
            var cleric_gorumB = library.Get<BlueprintUnit>("b25993ac3690be546b659c438b42a785");
            var cleric = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var cleric_gorum_feature = library.Get<BlueprintFeature>("ca063d3e6c8576642a23fe74f2379ee0");
            var divine_power = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var sm5 = library.Get<BlueprintAbility>("630c8b85d9f07a64f917d79cb5905741");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var ShieldOfFaithAiAction = library.Get<BlueprintAiAction>("8ce28d8e7507dd24ab0ae81aebea58cf");


            cleric_gorumB.AddFacts = cleric_gorumB.AddFacts.AddToArray(quicken, freedomofmovementbuff);



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)cleric_gorumB.AddFacts[0], "ClericGorumBFeature", "463a37450abe4405b9ae751d145082ad");
            cleric_gorumB.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clericgorumBfeature = library.Get<BlueprintFeature>("463a37450abe4405b9ae751d145082ad");



            var clericLevels = clericgorumBfeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 11;
            var spell_list = newclericLevels.MemorizeSpells.AddToArray(searing_light, searing_light, heal, constrictingcoils, righteousmight, freedomofmovement, dispel, shieldoffaith);
            newclericLevels.MemorizeSpells = spell_list;
            clericgorumBfeature.ReplaceComponent(clericLevels, newclericLevels);

            var clericLevels2 = clericgorumBfeature.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == cleric);
            var newclericLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newclericLevels2.MemorizeSpells.RemoveFromArray(sm5);
            newclericLevels2.MemorizeSpells = spell_list2;
            clericgorumBfeature.ReplaceComponent(clericLevels2, newclericLevels2);

            var clericLevels3 = clericgorumBfeature.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == cleric);
            var newclericLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newclericLevels3.MemorizeSpells.RemoveFromArray(holdperson);
            newclericLevels3.MemorizeSpells = spell_list3;
            clericgorumBfeature.ReplaceComponent(clericLevels3, newclericLevels3);

            var clericLevels4 = clericgorumBfeature.ComponentsArray
                 .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newclericLevels4.MemorizeSpells.RemoveFromArray(divinefavor);
            newclericLevels4.MemorizeSpells = spell_list4;
            clericgorumBfeature.ReplaceComponent(clericLevels4, newclericLevels4);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);

            var brain = cleric_gorumB.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(ShieldOfFaithAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglight, AiActions.healspell, AiActions.hellfire_ray,
                                                    AiActions.constrictingcoils, AiActions.castshieldoffaithgorum, AiActions.righteousmightgoblinshaman, AiActions.castfreedomofmovement, AiActions.dispel);






        }

        static void updateCR9_VandalDruidWildshapeLevel10()
        {
            var vandaldruidA = library.Get<BlueprintUnit>("8b9b82fbdffb4fe4ea957f445cfc1e4d");
            var druid = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var greatermagicfang = library.Get<BlueprintAbility>("f1100650705a69c4384d3edd88ba0f52");
            var naturalspell = library.Get<BlueprintFeature>("c806103e27cce6f429e5bf47067966cf");
            var thornbody = library.Get<BlueprintAbility>("2daf9c5112f16d54ab3cd6904c705c59");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var aspectofthewolf = library.Get<BlueprintAbility>("6126b36fe22291543ad72f8b9f0d53a7");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var WildShapeSmilodonAiAction = library.Get<BlueprintAiAction>("a31e93cec5f301d42a101b158e46876d");
            

            vandaldruidA.AddFacts = vandaldruidA.AddFacts.AddToArray(quicken,combatcasting);



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)vandaldruidA.AddFacts[0], "VandaldruidAFeature", "d89b9c37d6644dfabafb60733dbbc7fc");
            vandaldruidA.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var VandaldruidAFeature = library.Get<BlueprintFeature>("d89b9c37d6644dfabafb60733dbbc7fc");



            var clericLevels = VandaldruidAFeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == druid);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 12;
            var spell_list = newclericLevels.MemorizeSpells.AddToArray(barkskin,greatermagicfang,aspectofthewolf);
            newclericLevels.MemorizeSpells = spell_list;
            VandaldruidAFeature.ReplaceComponent(clericLevels, newclericLevels);





            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.greatermagicfang);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.thornbody);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.aspectofthewolf);

            var brain = vandaldruidA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(WildShapeSmilodonAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usewildshapesmilidon,AiActions.barkskingoblinking,AiActions.castgreatermagicfang,AiActions.castaspectwolf,AiActions.castanimalgrowth);






        }

        static void updateCR7_VandalDruidWildShapeLevel8()
        {
            var vandaldruidB = library.Get<BlueprintUnit>("af43a2e2633bcff4388709ff83650abb");
            var druid = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var greatermagicfang = library.Get<BlueprintAbility>("f1100650705a69c4384d3edd88ba0f52");
            var naturalspell = library.Get<BlueprintFeature>("c806103e27cce6f429e5bf47067966cf");
            var thornbody = library.Get<BlueprintAbility>("2daf9c5112f16d54ab3cd6904c705c59");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var aspectofthewolf = library.Get<BlueprintAbility>("6126b36fe22291543ad72f8b9f0d53a7");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var WildShapeBearAiAction = library.Get<BlueprintAiAction>("5fd42f54e7fdcb84abf554187fd8d1c9");
            var animalgrowth = library.Get<BlueprintAbility>("56923211d2ac95e43b8ac5031bab74d8");
            var StoneskinBuffCL10 = library.Get<BlueprintBuff>("2856d69a084eb964793c0fee69433833");


        vandaldruidB.AddFacts = vandaldruidB.AddFacts.AddToArray(quicken, combatcasting,StoneskinBuffCL10);



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)vandaldruidB.AddFacts[0], "VandaldruidBFeature", "2d250970562b45f1809e87d3602de802");
            vandaldruidB.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var VandaldruidBFeature = library.Get<BlueprintFeature>("2d250970562b45f1809e87d3602de802");



            var clericLevels = VandaldruidBFeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == druid);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 12;
            var spell_list = newclericLevels.MemorizeSpells.AddToArray(barkskin, greatermagicfang, aspectofthewolf,animalgrowth,thornbody);
            newclericLevels.MemorizeSpells = spell_list;
            VandaldruidBFeature.ReplaceComponent(clericLevels, newclericLevels);





            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.greatermagicfang);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.thornbody);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.aspectofthewolf);

            var brain = vandaldruidB.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(WildShapeBearAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usewildshapesmilidon, AiActions.barkskingoblinking, AiActions.castgreatermagicfang, AiActions.castaspectwolf, AiActions.castanimalgrowth);






        }

        static void updateCR11_VandalMeleeBarbarianLevel12()

        {


            var BarbMeleeLevel12 = library.Get<BlueprintUnit>("859fb37f4c9361146af3dce3262ca975");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");

            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BarbMeleeLevel12.AddFacts[0], "VandalMeleeBarbarianLevel12feature", "5ef09f52fbc347909b340f299cac77d5");
            BarbMeleeLevel12.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeBarbarianLevel12feature = library.Get<BlueprintFeature>("5ef09f52fbc347909b340f299cac77d5");



            BarbMeleeLevel12.AddFacts = BarbMeleeLevel12.AddFacts.AddToArray(sunder);



            var fighterLevels = VandalMeleeBarbarianLevel12feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 13;
            VandalMeleeBarbarianLevel12feature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BarbMeleeLevel12.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f93a7882fb01963428b091f259b15d3a"); //flachion +1
            BarbMeleeLevel12.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = BarbMeleeLevel12.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);

        }

        static void updateCR9_VandalMeleeBarbarianLevel10()

        {


            var BarbMeleeLevel10 = library.Get<BlueprintUnit>("d87f6d8e32be88e4596e279662485573");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BarbMeleeLevel10.AddFacts[0], "VandalMeleeBarbarianLevel10feature", "61cdb13f4b7e4c5191b0570da7bcff1f");
            BarbMeleeLevel10.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeBarbarianLevel10feature = library.Get<BlueprintFeature>("61cdb13f4b7e4c5191b0570da7bcff1f");



            BarbMeleeLevel10.AddFacts = BarbMeleeLevel10.AddFacts.AddToArray(sunder);



            var fighterLevels = VandalMeleeBarbarianLevel10feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            VandalMeleeBarbarianLevel10feature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BarbMeleeLevel10.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f93a7882fb01963428b091f259b15d3a"); //flachion +1
            BarbMeleeLevel10.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = BarbMeleeLevel10.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);

        }

        static void updateCR8_VandalMeleeRangerLevel9()

        {


            var RangerMeleeLevel11 = library.Get<BlueprintUnit>("c3546e0c53dbb5c478f1e4225d7b2e62");
            var rangerClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var leadblades = library.Get<BlueprintAbility>("779179912e6c6fe458fa4cfb90d96e10");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)RangerMeleeLevel11.AddFacts[0], "VandalMeleeRangerLevel11feature", "19aa786b39bb41c7b93127645817df08");
            RangerMeleeLevel11.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeRangerLevel11feature = library.Get<BlueprintFeature>("19aa786b39bb41c7b93127645817df08");



            RangerMeleeLevel11.AddFacts = RangerMeleeLevel11.AddFacts.AddToArray(powerattackfeature);



            var rangerLevels = VandalMeleeRangerLevel11feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels = rangerLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(leadblades);
            newAddClassLevels.MemorizeSpells = spell_list;
            VandalMeleeRangerLevel11feature.ReplaceComponent(rangerLevels, newAddClassLevels);


            RangerMeleeLevel11.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("2618c8c4e4be9bc48acdbcc7d92d6dc1"); //Handaxe +1
            RangerMeleeLevel11.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1

            

            var brain = RangerMeleeLevel11.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.leadblades,AiActions.usequarry);

        }

        static void updateCR6_VandalMeleeRangerLevel7()

        {


            var RangerMeleeLevel11 = library.Get<BlueprintUnit>("6bfa8b72207f2cb4abcca22246fc6b69");
            var rangerClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var leadblades = library.Get<BlueprintAbility>("779179912e6c6fe458fa4cfb90d96e10");
            var BarkskinFixedBuff3 = library.Get<BlueprintBuff>("c1e39ff0ba314eb4a839cab29f49c76f");
           

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)RangerMeleeLevel11.AddFacts[0], "VandalMeleeRangerLevel11Bfeature", "d43892c4a62141359f04d9b44df4a7a7");
            RangerMeleeLevel11.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeRangerLevel11feature = library.Get<BlueprintFeature>("d43892c4a62141359f04d9b44df4a7a7");



            RangerMeleeLevel11.AddFacts = RangerMeleeLevel11.AddFacts.AddToArray(powerattackfeature,BarkskinFixedBuff3);



            var rangerLevels = VandalMeleeRangerLevel11feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels = rangerLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(leadblades);
            newAddClassLevels.MemorizeSpells = spell_list;
            VandalMeleeRangerLevel11feature.ReplaceComponent(rangerLevels, newAddClassLevels);

            RangerMeleeLevel11.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2618c8c4e4be9bc48acdbcc7d92d6dc1"); //Handaxe +1
            RangerMeleeLevel11.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("2618c8c4e4be9bc48acdbcc7d92d6dc1"); //Handaxe +1
            RangerMeleeLevel11.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1


        
            var brain = RangerMeleeLevel11.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.leadblades, AiActions.usequarry);

        }

        static void updateCR9_VandalRangedFighterLevel10()

        {


            var RangedFighter10 = library.Get<BlueprintUnit>("db361d3fafe544e47aaa2ae1f2089abd");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");


            RangedFighter10.AddFacts = RangedFighter10.AddFacts.AddToArray(blindfight);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)RangedFighter10.AddFacts[0], "RangedFighter10Feature", "52e0e29c166046e58150366970a37b11");
            RangedFighter10.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var RangedFighter10feature = library.Get<BlueprintFeature>("52e0e29c166046e58150366970a37b11");





            var fighterLevels = RangedFighter10feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            RangedFighter10feature.ReplaceComponent(fighterLevels, newAddClassLevels);





        }

        static void updateCR7_VandalRangedFighterLevel8()

        {


            var RangedFighter10 = library.Get<BlueprintUnit>("c60222073a5897640a1b80daefd38408");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");


            RangedFighter10.AddFacts = RangedFighter10.AddFacts.AddToArray(blindfight);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)RangedFighter10.AddFacts[0], "RangedFighter10BFeature", "5c26252a0c684ea293ec3bb257a3074f");
            RangedFighter10.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var RangedFighter10feature = library.Get<BlueprintFeature>("5c26252a0c684ea293ec3bb257a3074f");





            var fighterLevels = RangedFighter10feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            RangedFighter10feature.ReplaceComponent(fighterLevels, newAddClassLevels);

            RangedFighter10.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2753a0159681be94da3a5eeabc8c8d1a"); //Composite Longbow +1
            RangedFighter10.Body.Armor = library.Get<BlueprintItemArmor>("91bf657f26eb80f4ba05b0b8440b1e8c"); //Chainshirt +1



        }

        static void updateVandalRanged_BrevoyBad()

        {


            var Vandalranged = library.Get<BlueprintUnit>("39955d0e5dbd30c4bb09abea5d8171c7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");


            Vandalranged.AddFacts = Vandalranged.AddFacts.AddToArray(blindfight);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)Vandalranged.AddFacts[0], "VandalRanged_BrevoyBadFeature", "8b271878e9f0446799488cff910a54f9");
            Vandalranged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var RangedFighter10feature = library.Get<BlueprintFeature>("8b271878e9f0446799488cff910a54f9");





            var fighterLevels = RangedFighter10feature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            RangedFighter10feature.ReplaceComponent(fighterLevels, newAddClassLevels);

            Vandalranged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2753a0159681be94da3a5eeabc8c8d1a"); //Composite Longbow +1
            Vandalranged.Body.Armor = library.Get<BlueprintItemArmor>("91bf657f26eb80f4ba05b0b8440b1e8c"); //Chainshirt +1



        }

        static void updateCR7_VandalMeleeFighterGreataxeLevel8()

        {


            var BarbFighterGreataxe = library.Get<BlueprintUnit>("c2927ff234f17c542b2e971152c8e487");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BarbFighterGreataxe.AddFacts[0], "VandalMeleeBarbFighterGreataxefeature", "4e6ef5f48e144be58970dea2a8ba12c5");
            BarbFighterGreataxe.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeBarbFighterGreataxefeature = library.Get<BlueprintFeature>("4e6ef5f48e144be58970dea2a8ba12c5");


            var fighterLevels = VandalMeleeBarbFighterGreataxefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            VandalMeleeBarbFighterGreataxefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BarbFighterGreataxe.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4f0704c1d4d53cf419bd200bdfc12a0a"); //Greataxe +1
            BarbFighterGreataxe.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = BarbFighterGreataxe.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);

        }

        static void updateCR6_VandalMeleeFighterGreataxeLevel7()

        {


            var BarbFighterGreataxe = library.Get<BlueprintUnit>("84cd7adf7adcdc542944a13e8aea7f6e");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BarbFighterGreataxe.AddFacts[0], "VandalMeleeBarbFighterGreataxefeatureB", "01241745bd944e339daff5284061a0a2");
            BarbFighterGreataxe.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeBarbFighterGreataxefeature = library.Get<BlueprintFeature>("01241745bd944e339daff5284061a0a2");


            var fighterLevels = VandalMeleeBarbFighterGreataxefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            VandalMeleeBarbFighterGreataxefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BarbFighterGreataxe.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4f0704c1d4d53cf419bd200bdfc12a0a"); //Greataxe +1
            BarbFighterGreataxe.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = BarbFighterGreataxe.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);

        }

        static void updateCR6_VandalMeleeFighterGreatswordLevel7()

        {


            var BarbFighterGreatsword = library.Get<BlueprintUnit>("39e1ad15b9e5b6a4cbc8cc262d6916dd");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BarbFighterGreatsword.AddFacts[0], "VandalMeleeBarbFighterGreatswordfeature", "b4727147656546148394a4d1ee287adc");
            BarbFighterGreatsword.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeBarbFighterGreatswordfeature = library.Get<BlueprintFeature>("b4727147656546148394a4d1ee287adc");


            var fighterLevels = VandalMeleeBarbFighterGreatswordfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            VandalMeleeBarbFighterGreatswordfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BarbFighterGreatsword.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //Greatsword +1
            BarbFighterGreatsword.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = BarbFighterGreatsword.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);

        }

        static void updateCR7_VandalMeleeFighterGreatswordLevel8()

        {


            var BarbFighterGreatsword = library.Get<BlueprintUnit>("927321971846e274c96fc8d7e43825dd");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BarbFighterGreatsword.AddFacts[0], "VandalMeleeBarbFighterGreatswordfeatureB", "250e8a8390ac42e8a2976c207c8bf99e");
            BarbFighterGreatsword.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var VandalMeleeBarbFighterGreatswordfeature = library.Get<BlueprintFeature>("250e8a8390ac42e8a2976c207c8bf99e");


            var fighterLevels = VandalMeleeBarbFighterGreatswordfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            VandalMeleeBarbFighterGreatswordfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BarbFighterGreatsword.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //Greatsword +1
            BarbFighterGreatsword.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = BarbFighterGreatsword.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);

        }

        static void updateVandalHillGiant()

        {


            var VandalHillgiant = library.Get<BlueprintUnit>("160d73363fc35ad4189328bc8ea00c3e");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            VandalHillgiant.Skills.Diplomacy = 8;




            VandalHillgiant.AddFacts = VandalHillgiant.AddFacts.AddToArray(Cornugon);



            var fighterLevels = VandalHillgiant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 4;
            VandalHillgiant.ReplaceComponent(fighterLevels, newAddClassLevels);

            VandalHillgiant.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("41fdf5c9cb2dc0748ae4d71b6b5310a4"); //Greatclub +1
            VandalHillgiant.Body.Armor = library.Get<BlueprintItemArmor>("45e86ae29df5f4b48a66da15fde62217"); //Hide Leather +1



            var brain = VandalHillgiant.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);

        }

        static void updateVandalwolf_brevoybad()

        {


            var VandalWolf = library.Get<BlueprintUnit>("e997d56406f3d7548992b33df572660d");
            var animalClass = library.Get<BlueprintCharacterClass>("4cd1757a0eea7694ba5c933729a53920");
            var natarmor4 = library.Get<BlueprintUnitFact>("16fc201a83edcde4cbd64c291ebe0d07");
            var natarmor7 = library.Get<BlueprintUnitFact>("e73864391ccf0894997928443a29d755");
            var BiteDragon1d6 = library.Get<BlueprintItemWeapon>("f3ff6972c32f22e4ba4c85c3982a03cf");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");

 


            VandalWolf.AddFacts = VandalWolf.AddFacts.RemoveFromArray(natarmor4);
            VandalWolf.AddFacts = VandalWolf.AddFacts.AddToArray(natarmor7);



            var fighterLevels = VandalWolf.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == animalClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            VandalWolf.ReplaceComponent(fighterLevels, newAddClassLevels);

            VandalWolf.Body.AdditionalLimbs = VandalWolf.Body.AdditionalLimbs.RemoveFromArray(BiteDragon1d6);
            VandalWolf.Body.AdditionalLimbs = VandalWolf.Body.AdditionalLimbs.AddToArray(bite3d6);

            VandalWolf.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{VandalWolf.name}.name", "Great Ferocious Wolf"));

        }


        //Abandoned Keep

        static void changeAdeptDryad()
        {

            var AdeptDryad = library.Get<BlueprintUnit>("7fd6f944a42e444fbc9157996b460729");
            var magicalbeastclass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var spikestones = library.Get<BlueprintAbility>("d1afa8bc28c99104da7d784115552de5");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var aspectofthebear = library.Get<BlueprintAbility>("a4ad1b8fa11e7c347a608c004efce9d5");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var owlswisdombuff = library.Get<BlueprintBuff>("73fc1d19f14339042ba5af34872c1745");
            var NaturalArmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var DRMagic5 = library.Get<BlueprintFeature>("c656127672b90484285d4c80312f601d");
            var DweomercatDweomerleapLogic = library.Get<BlueprintFeature>("7da86cf7330eac346b0cf71a8cb1884f");
            var DweomercatDispelFeature = library.Get<BlueprintFeature>("6be4ce79a1fe530499e2f883edde9045");
            var DweomercatSpellLinkEvocationFeature = library.Get<BlueprintFeature>("03977996ea724694985d9ebad3683004");
            var DweomercatSpellLinkNecromancyFeature = library.Get<BlueprintFeature>("f6d2e1acd24213e4eace88d149b80351");
            var DweomercatSpellLinkEnchantmentFeature = library.Get<BlueprintFeature>("d4f6112fbca373a4795f3fc7fef59aea");
            var DweomercatSpellLinkIllusionFeature = library.Get<BlueprintFeature>("07905613e720cb94b84540c1579c7eee");
            var DweomercatSpellLinkConjurationFeature = library.Get<BlueprintFeature>("ee6cb30f246f2d34e8306c25b9763e40");
            var DweomercatSpellLinkAbjurationFeature = library.Get<BlueprintFeature>("3d9d32f8c4e08924b85dc2b55d15414f");
            var DweomercatSpellLinkTransmutationFeature = library.Get<BlueprintFeature>("2e90bcfadfc7298419211a7b66487e48");
            var SpellResistance12plusCR = library.Get<BlueprintFeature>("89ee9c2dae34dbb4b8dd96b55384b600");
            var DweomercatSpellLinkDivinationFeature = library.Get<BlueprintFeature>("1803619ee91334d4096f94879953c9e4");
            var Pounce = library.Get<BlueprintFeature>("1a8149c09e0bdfc48a305ee6ac3729a8");
            var DweomerlionChangeShapeAiAction = library.Get<BlueprintAiAction>("28dc4a02b8f1e7449aaed7d04c4aa86b");
            var ChargeAiAction = library.Get<BlueprintAiAction>("05003725a881c10419530387b6de5c9a");
            var Claw1d4 = library.Get<BlueprintItemWeapon>("118fdd03e569a66459ab01a20af6811a");
            var bite1d6 = library.Get<BlueprintItemWeapon>("a000716f88c969c499a535dadcf09286");
            var dweomercat = library.Get<BlueprintUnitType>("7578612fdb2954c4d9d03a3c8e702e94");
            var dryad = library.Get<BlueprintUnitType>("dfdb7f7b20b3e6b449da559afce978b9");
            var druidclass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var longbowprof = library.Get<BlueprintFeature>("0978f630fc5d6a6409ac641137bf6659");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var aspectofthefalcon = library.Get<BlueprintAbility>("7bdb6a9fb6b37614e96f155748ae50c6");
            var barkskin5 = library.Get<BlueprintBuff>("063773c63d55dd94a94f9ffe3e710f95");
            var echolocation = library.Get<BlueprintAbility>("20b548bf09bb3ea4bafea78dcb4f3db6");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var NaturalArmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var DRColdIron5 = library.Get<BlueprintFeature>("a3a24fe738fc836479d6f4e9a8b84bc4");
            var AcidResistance10 = library.Get<BlueprintFeature>("64e647c10eece1545b00a442330f49da");
            var ColdResistance10 = library.Get<BlueprintFeature>("daf27e1f12e736d4294b525489e99de4");
            var ElectricityResistance10 = library.Get<BlueprintFeature>("a5049e0d1b1a1454aa1a221a6e20b714");
            var Weaponfocuslongbow = library.Get<BlueprintFeature>("f641e7c569328614c87e0270ac5325dd");
            var summondweomercat = library.Get<BlueprintAbility>("fcd4a4b7efea4a59b2153ccbe505e307");
            var playerfaction = library.Get<BlueprintFaction>("72f240260881111468db610b6c37c099");

            


        AdeptDryad.Strength = 10;

            AdeptDryad.Dexterity = 19;

            AdeptDryad.Constitution = 18;

            AdeptDryad.Intelligence = 12;

            AdeptDryad.Wisdom = 17;

            AdeptDryad.Charisma = 14;

            AdeptDryad.Type = library.Get<BlueprintUnitType>("dfdb7f7b20b3e6b449da559afce978b9");

            AdeptDryad.Prefab = new UnitViewLink() { AssetId = "30e934c2d2a0a7041a4111d3cfddf986" };
            AdeptDryad.Visual.Barks = library.Get<BlueprintUnitAsksList>("471f91ad1ab8b564ab13f2eb42270979"); 


            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(NaturalArmor8);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DRMagic5);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatDweomerleapLogic);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatDispelFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkEvocationFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkNecromancyFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkEnchantmentFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkIllusionFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkConjurationFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkAbjurationFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkTransmutationFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(SpellResistance12plusCR);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(DweomercatSpellLinkDivinationFeature);
            AdeptDryad.AddFacts = AdeptDryad.AddFacts.RemoveFromArray(Pounce);
 

            AdeptDryad.AddFacts = AdeptDryad.AddFacts.AddToArray(toughness,longbowprof,quicken,pointblank,
                                                                preciseshot,manyshot,rapidshot,rapidshotbuff,deadlyaim,deadlyaimbuff,
                                                                combatcasting,NaturalArmor9,DRColdIron5,Weaponfocuslongbow,AcidResistance10,ColdResistance10,ElectricityResistance10,summondweomercat);


            var clericLevels = AdeptDryad.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == magicalbeastclass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            newAddClassLevels.Levels = 5;
            AdeptDryad.ReplaceComponent(clericLevels, newAddClassLevels);


            var druidlevels = AdeptDryad.GetComponent<AddClassLevels>();
            var newhumanoidLevels = druidlevels.CreateCopy();
            newhumanoidLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            newhumanoidLevels.Levels = 13;
            var spell_list = newhumanoidLevels.MemorizeSpells.AddToArray(barkskin, dispel,bullsmass, calllightningstorm,stoneskincommunal,aspectofthefalcon,echolocation,firesnake);
            newhumanoidLevels.MemorizeSpells = spell_list;
            AdeptDryad.AddComponent(newhumanoidLevels);



            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.aspectofthefalcon);



            AdeptDryad.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            AdeptDryad.Body.EmptyHandWeapon = library.Get<BlueprintItemWeapon>("20375b5a0c9243d45966bd72c690ab74"); // Empty Hand

            AdeptDryad.Body.DisableHands = false;

            AdeptDryad.Body.AdditionalLimbs = AdeptDryad.Body.AdditionalLimbs.RemoveFromArray(bite1d6);
            AdeptDryad.Body.AdditionalLimbs = AdeptDryad.Body.AdditionalLimbs.RemoveFromArray(Claw1d4);
            AdeptDryad.Body.AdditionalLimbs = AdeptDryad.Body.AdditionalLimbs.RemoveFromArray(Claw1d4);
            AdeptDryad.Body.AdditionalLimbs = AdeptDryad.Body.AdditionalLimbs.RemoveFromArray(Claw1d4);
            AdeptDryad.Body.AdditionalLimbs = AdeptDryad.Body.AdditionalLimbs.RemoveFromArray(Claw1d4);

            AdeptDryad.FactionOverrides.AttackFactionsToAdd = AdeptDryad.FactionOverrides.AttackFactionsToAdd.AddToArray(playerfaction);


            var brain = AdeptDryad.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(DweomerlionChangeShapeAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(ChargeAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castaspectfalcon,AiActions.barkskingoblinking,AiActions.castbullsmass,
                                                     AiActions.stoneskincommunalsprig,AiActions.castfiresnake,AiActions.castecholocation,AiActions.summondweomercat);

        }

        static void updateCR6_RedcapStandard()

        {


            var CR6_RedcapStandard = library.Get<BlueprintUnit>("99286885f5be6b948baf3de77471d6ca");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var natarmor7 = library.Get<BlueprintUnitFact>("e73864391ccf0894997928443a29d755");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var CleaveFeature = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var GreatCleaveFeature = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var CleaveAction = library.Get<BlueprintAbility>("6447d104a2222c14d9c9b8a36e4eb242");
           



            CR6_RedcapStandard.AddFacts = CR6_RedcapStandard.AddFacts.RemoveFromArray(natarmor3);
            CR6_RedcapStandard.AddFacts = CR6_RedcapStandard.AddFacts.AddToArray(trip,natarmor7,toughness);



            var fighterLevels = CR6_RedcapStandard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(CleaveFeature);

            }
            CR6_RedcapStandard.ReplaceComponent(fighterLevels, newAddClassLevels);

            var fighterlevels2 = CR6_RedcapStandard.GetComponent<AddClassLevels>();
            var newhumanoidLevels = fighterlevels2.CreateCopy();
            newhumanoidLevels.CharacterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            newhumanoidLevels.Levels = 6;
            CR6_RedcapStandard.AddComponent(newhumanoidLevels);






            var brain = CR6_RedcapStandard.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);

        }

        static void updateCR11_RedcapBarbarian()

        {


            var CR11_RedcapBarbarian = library.Get<BlueprintUnit>("2e4a9f6fa84651148bc065c5330817fe");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var CleaveFeature = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var GreatCleaveFeature = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var CleaveAction = library.Get<BlueprintAbility>("6447d104a2222c14d9c9b8a36e4eb242");
            var AnimalFury = library.Get<BlueprintFeature>("25954b1652bebc2409f9cb9d5728bceb");
            var damagereduction = library.Get<BlueprintFeature>("ddaee203ee4dcb24c880d633fbd77db6");

            


            CR11_RedcapBarbarian.AddFacts = CR11_RedcapBarbarian.AddFacts.RemoveFromArray(natarmor3);
            CR11_RedcapBarbarian.AddFacts = CR11_RedcapBarbarian.AddFacts.AddToArray(trip, natarmor10, toughness, AnimalFury, damagereduction);



            var fighterLevels = CR11_RedcapBarbarian.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(CleaveFeature);

            }
            CR11_RedcapBarbarian.ReplaceComponent(fighterLevels, newAddClassLevels);


            var fighterLevels2 = CR11_RedcapBarbarian.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels2 = fighterLevels2.CreateCopy();
            newAddClassLevels2.Levels = 10;
            CR11_RedcapBarbarian.ReplaceComponent(fighterLevels2, newAddClassLevels2);



            var brain = CR11_RedcapBarbarian.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.trip,AiActions.cleave);

        }

        static void updateCR11_RedcapRogue()

        {


            var CR11_RedcapRogue = library.Get<BlueprintUnit>("55eb2a65eebddc5438e4fc6531c1c959");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var CleaveFeature = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var GreatCleaveFeature = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var CleaveAction = library.Get<BlueprintAbility>("6447d104a2222c14d9c9b8a36e4eb242");
            var dirtytricksick = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");
            var bewilderedabilitybuff = library.Get<BlueprintBuff>("116ee72b2149f4d44a330296a7e42d13");
            var debilitatinginjury = library.Get<BlueprintFeature>("def114eb566dfca448e998969bf51586");

            

            CR11_RedcapRogue.AddFacts = CR11_RedcapRogue.AddFacts.RemoveFromArray(natarmor3);
            CR11_RedcapRogue.AddFacts = CR11_RedcapRogue.AddFacts.AddToArray(natarmor10, toughness, dirtytricksick,bewilderedabilitybuff,debilitatinginjury);

            var clone2 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)CR11_RedcapRogue.Brain, "RedcapRogueBrain", "f81d315856c14935af231f5ab17f10d5");
            CR11_RedcapRogue.Brain = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


           

            var fighterLevels = CR11_RedcapRogue.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(CleaveFeature);

            }
            CR11_RedcapRogue.ReplaceComponent(fighterLevels, newAddClassLevels);


            var fighterLevels2 = CR11_RedcapRogue.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels2 = fighterLevels2.CreateCopy();
            newAddClassLevels2.Levels = 10;
            CR11_RedcapRogue.ReplaceComponent(fighterLevels2, newAddClassLevels2);


            var brain = library.Get<BlueprintBrain>("f81d315856c14935af231f5ab17f10d5");
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.trip, AiActions.usedirtytricksickened);

        }

        static void updateAbandonedKeep_RedcapBarbarian()

        {


            var AbandonedKeep_RedcapBarbarian = library.Get<BlueprintUnit>("aea63a37151e2fb43be4bdfe7322c7ce");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var CleaveFeature = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var GreatCleaveFeature = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var CleaveAction = library.Get<BlueprintAbility>("6447d104a2222c14d9c9b8a36e4eb242");
            var AnimalFury = library.Get<BlueprintFeature>("25954b1652bebc2409f9cb9d5728bceb");
            var damagereduction = library.Get<BlueprintFeature>("ddaee203ee4dcb24c880d633fbd77db6");




            AbandonedKeep_RedcapBarbarian.AddFacts = AbandonedKeep_RedcapBarbarian.AddFacts.RemoveFromArray(natarmor3);
            AbandonedKeep_RedcapBarbarian.AddFacts = AbandonedKeep_RedcapBarbarian.AddFacts.AddToArray(trip, natarmor10, toughness, AnimalFury, damagereduction);



            var fighterLevels = AbandonedKeep_RedcapBarbarian.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(CleaveFeature);

            }
            AbandonedKeep_RedcapBarbarian.ReplaceComponent(fighterLevels, newAddClassLevels);


            var fighterLevels2 = AbandonedKeep_RedcapBarbarian.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels2 = fighterLevels2.CreateCopy();
            newAddClassLevels2.Levels = 10;
            AbandonedKeep_RedcapBarbarian.ReplaceComponent(fighterLevels2, newAddClassLevels2);



            var brain = AbandonedKeep_RedcapBarbarian.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.trip, AiActions.cleave);

        }

        static void updateAbandonedKeep_GolemStone()

        {


            var AbandonedKeep_GolemStone = library.Get<BlueprintUnit>("fdf824e184939244a9433d93e0d02c21");
            var constructClass = library.Get<BlueprintCharacterClass>("fd66bdea5c33e5f458e929022322e6bf");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var stonegolemslow = library.Get<BlueprintAiCastSpell>("50a10c1480e58c74f8585c14f817c99f");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");

            AbandonedKeep_GolemStone.AddFacts = AbandonedKeep_GolemStone.AddFacts.AddToArray(quicken,slow);


            AbandonedKeep_GolemStone.Charisma = 18;

            AbandonedKeep_GolemStone.MaxHP = 60;

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.slow);


            var fighterLevels = AbandonedKeep_GolemStone.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == constructClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            AbandonedKeep_GolemStone.ReplaceComponent(fighterLevels, newAddClassLevels);

            var brain = AbandonedKeep_GolemStone.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(stonegolemslow);
            brain.Actions = brain.Actions.AddToArray(AiActions.castslowstonegolem);


        }

        static void updatePrimalSpider()
        {

            var Primalspider = library.Get<BlueprintUnit>("4622aca7715007147b26b7fc26db3df8");
            var vermin = library.Get<BlueprintCharacterClass>("d1a15612d1a96334d94edf5f1d3b8d29");
            var bite2d6 = library.Get<BlueprintItemWeapon>("d2f99947db522e24293a7ec4eded453f");
            var bite3d6 = library.Get<BlueprintItemWeapon>("a63315767e2bfe841959644dbe6383dc");
            var natarmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var natarmor15 = library.Get<BlueprintUnitFact>("72c294dca841e3944869fb087bacf272");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");

            Primalspider.AddFacts = Primalspider.AddFacts.RemoveFromArray(natarmor6);
            Primalspider.AddFacts = Primalspider.AddFacts.AddToArray(natarmor15,blurbuff);

            var verminLevels = Primalspider.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == vermin);
            var newverminLevels = verminLevels.CreateCopy();
            newverminLevels.Levels = 11;
            Primalspider.ReplaceComponent(verminLevels, newverminLevels);

         


        }

        static void updatePrimalShambler()
        {

            var PrimalShambler = library.Get<BlueprintUnit>("5056171e9f059bd44bed9d33e2186938");
            var SickeningEntangle = library.Get<BlueprintAbility>("6c7467f0344004d48848a43d8c078bf8");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var SlamGargantuan2d6 = library.Get<BlueprintItemWeapon>("27eee74857c42db499b3a6b20cfa6211");
            var SlamHuge3d6 = library.Get<BlueprintItemWeapon>("9ad2424212f72054e81bfdd8b0e7a29e");

            PrimalShambler.Charisma = 30;



            PrimalShambler.AddFacts = PrimalShambler.AddFacts.AddToArray(SickeningEntangle,freedomofmovement,freedomofmovementbuff);

            PrimalShambler.AddFacts = PrimalShambler.AddFacts.AddToArray(quicken);

            PrimalShambler.Body.AdditionalLimbs = PrimalShambler.Body.AdditionalLimbs.RemoveFromArray(SlamGargantuan2d6);
            PrimalShambler.Body.AdditionalLimbs = PrimalShambler.Body.AdditionalLimbs.RemoveFromArray(SlamGargantuan2d6);
            PrimalShambler.Body.AdditionalLimbs = PrimalShambler.Body.AdditionalLimbs.AddToArray(SlamHuge3d6);
            PrimalShambler.Body.AdditionalLimbs = PrimalShambler.Body.AdditionalLimbs.AddToArray(SlamHuge3d6);

            var brain = PrimalShambler.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave,AiActions.castsickeningentangle,AiActions.castfreedomofmovementshamble);

        }

        static void updateAbandonedKeep_Devourer()

        {


            var AbandonedKeep_Devourer = library.Get<BlueprintUnit>("27d9aa5caa9881a4885ac66ec3969907");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var DevourerSlayLivingAiAction = library.Get<BlueprintAiAction>("a497f680f30c4fd4f9a4e35df60aa9f6");
            var summonspectre = library.Get<BlueprintAbility>("69481c1067334bdaa4948e274a277085");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");


            AbandonedKeep_Devourer.AddFacts = AbandonedKeep_Devourer.AddFacts.AddToArray(quicken, auraofdoom, summonspectre, Cornugon);


            AbandonedKeep_Devourer.MaxHP = 50;


            var barbarianLevels = AbandonedKeep_Devourer.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 0;
            AbandonedKeep_Devourer.ReplaceComponent(barbarianLevels, newAddClassLevels);


            var fighterLevels = AbandonedKeep_Devourer.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = fighterLevels.CreateCopy();
            newAddClassLevels2.Levels = 21;
            AbandonedKeep_Devourer.ReplaceComponent(fighterLevels, newAddClassLevels2);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);


            var brain = AbandonedKeep_Devourer.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(DevourerSlayLivingAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoom,AiActions.castslaylivingdevourer,AiActions.usesummonspectre);


        }

        static void updateDefacedSisterAbandonedKeep()

        {


            var fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var nymphclass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var defaced_sister = library.Get<BlueprintUnit>("818785a4faef02a40bd448a6c6e6e557");
            var stormbolt = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var creepingdoom = library.Get<BlueprintAbility>("b974af13e45639a41a04843ce1c9aa12");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            var sunburst = library.Get<BlueprintAbility>("e96424f70ff884947b06f41a765b7658");
            var seamantle = library.Get<BlueprintAbility>("7ef49f184922063499b8f1346fb7f521");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var NaturalArmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var vinetrap = library.Get<BlueprintAbility>("6d1d48a939ce475409f06e1b376bc386");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");


            defaced_sister.Wisdom = 22;
            defaced_sister.Dexterity = 22;
            defaced_sister.Charisma = 28;

            defaced_sister.AddFacts = defaced_sister.AddFacts.RemoveFromArray(magearmorbuff);
            defaced_sister.AddFacts = defaced_sister.AddFacts.RemoveFromArray(NaturalArmor6);
            defaced_sister.AddFacts = defaced_sister.AddFacts.AddToArray(chainlightning,quicken,lightningbolt,freedomofmovementbuff);

            {


                var nymphLevels = defaced_sister.ComponentsArray
                      .OfType<AddClassLevels>()
                      .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 17;
                var spell_list = newnymphLevels.MemorizeSpells.AddToArray(fire_storm, greaterdispel,greaterdispel, heal, tarpool,seamantle,freedomofmovement, 
                                                                          firesnake, firesnake, vinetrap,barkskin,flurryofsnowballs,flurryofsnowballs,snowball,snowball,snowball,shockinggrasp,shockinggrasp);
                newnymphLevels.MemorizeSpells = spell_list;
                defaced_sister.ReplaceComponent(nymphLevels, newnymphLevels);

                var sorcererLevels = defaced_sister.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == sorcererClass);
                var newAddClassLevels = sorcererLevels.CreateCopy();
                newAddClassLevels.Levels = 0;
                defaced_sister.ReplaceComponent(sorcererLevels, newAddClassLevels);

                var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.seamantle);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.barkskin);





                var ai_action = library.CopyAndAdd<BlueprintAiCastSpell>("3e430588863f8b24fa7e05fdc2d92441", "FireStormAiAction", "");
                var brain = defaced_sister.Brain;
                brain.Actions = brain.Actions.AddToArray(ai_action, AiActions.healspell,AiActions.castgreaterdispellsisterabandoned,AiActions.tarpool,
                                                            AiActions.chainlightningsister,AiActions.seamantle, AiActions.castfreedomofmovement,AiActions.lightningboltsister,
                                                            AiActions.castfiresnakesister,AiActions.castvinetrap,AiActions.barkskingoblinking,
                                                            AiActions.calllightninglostsister,AiActions.castflurryofsnowballssister,AiActions.castsnowballlostsister,AiActions.castshockgraspsister);
            }
        }

        //Armags Tomb


        static void updateVengefulSpectre()

        {


            var VengefulSpectre = library.Get<BlueprintUnit>("b08095a9ede34f23aa6d829254fe14c5");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var weaponfinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var finessedagger = library.Get<BlueprintFeature>("50c7baae70624e24089d32d090e9cdb6");
            var Toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var CombatReflexes = library.Get<BlueprintFeature>("0f8939ae6f220984e8fb568abbdfba95");
            var DirtyTrickSickenedAction = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");



            {



                var rogueLevels = VengefulSpectre.GetComponent<AddClassLevels>();
                var newrogueLevels = rogueLevels.CreateCopy();
                newrogueLevels.CharacterClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
                newrogueLevels.Levels = 13;
                foreach (var selection in newrogueLevels.Selections)
                {
                    selection.Features = selection.Features.AddToArray(weaponfinesse, finessedagger);

                }
                VengefulSpectre.AddComponent(newrogueLevels);

                var undeadLevels = VengefulSpectre.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == undeadClass);
                var newAddClassLevels2 = undeadLevels.CreateCopy();
                newAddClassLevels2.Levels = 3;
                VengefulSpectre.ReplaceComponent(undeadLevels, newAddClassLevels2);



                VengefulSpectre.AddFacts = VengefulSpectre.AddFacts.AddToArray(disarm, improvedevasion, dirtytrick, weaponfinesse, finessedagger,Toughness,dodge,CombatReflexes);
                VengefulSpectre.AddFacts = VengefulSpectre.AddFacts.RemoveFromArray(DirtyTrickSickenedAction);


                VengefulSpectre.Body.DisableHands = false;

                VengefulSpectre.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2a45458f776442e43bba57de65f9b738"); //dagger +1

                VengefulSpectre.GetComponent<Experience>().CR = 11;

                var brain = VengefulSpectre.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre, AiActions.usedirtytrickblind);


            }
        }

        static void updateArmagsTomb_Devourer()

        {


            var ArmagsTomb_Devourer = library.Get<BlueprintUnit>("df4dc34523e11904cbc515ec1d54779e");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var DevourerSlayLivingAiAction = library.Get<BlueprintAiAction>("a497f680f30c4fd4f9a4e35df60aa9f6");
            var summonspectre = library.Get<BlueprintAbility>("69481c1067334bdaa4948e274a277085");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");


            ArmagsTomb_Devourer.AddFacts = ArmagsTomb_Devourer.AddFacts.AddToArray(quicken, auraofdoom, summonspectre, Cornugon);


            ArmagsTomb_Devourer.MaxHP = 50;


            var barbarianLevels = ArmagsTomb_Devourer.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 0;
            ArmagsTomb_Devourer.ReplaceComponent(barbarianLevels, newAddClassLevels);


            var fighterLevels = ArmagsTomb_Devourer.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = fighterLevels.CreateCopy();
            newAddClassLevels2.Levels = 21;
            ArmagsTomb_Devourer.ReplaceComponent(fighterLevels, newAddClassLevels2);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);


            var brain = ArmagsTomb_Devourer.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(DevourerSlayLivingAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoom, AiActions.castslaylivingdevourer, AiActions.usesummonspectre);


        }

        static void updateArmagsTombDefacedSister()

        {



            var nymphclass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var eldersister_barbcamp = library.Get<BlueprintUnit>("821ec3ef484ee6244a9f60b004970aed");
            var firedomain = library.Get<BlueprintFeature>("9dc5863168155854fa8daf4a780f6663");
            var firedomainprogressdruid = library.Get<BlueprintProgression>("562567d7c244fae43ac61df3d55547ca");
            var firedomainspelllistfeaturedruid = library.Get<BlueprintFeature>("bb87f638c058cd9468e0a0e25fa9a1a9");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var firedomainresist = library.Get<BlueprintFeature>("24700a71dd3dc844ea585345f6dd18f6");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var volcanicstorm = library.Get<BlueprintAbility>("16ce660837fb2544e96c3b7eaad73c63");
            var summonnaturesallyIV = library.Get<BlueprintAbility>("c83db50513abdf74ca103651931fac4b");
            var flamestrikeaiaction = library.Get<BlueprintAiCastSpell>("4f48fd03d530f86439657e4d93bffc89");
            var calllightning = library.Get<BlueprintAbility>("2a9ef0e0b5822a24d88b16673a267456");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var vinetrap = library.Get<BlueprintAbility>("6d1d48a939ce475409f06e1b376bc386");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");


            {





                eldersister_barbcamp.AddFacts = eldersister_barbcamp.AddFacts.AddToArray(firedomainresist, controlledfireball,quicken,freedomofmovementbuff);

                var nymphLevels2 = eldersister_barbcamp.ComponentsArray
               .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels3 = nymphLevels2.CreateCopy();
                foreach (var selection in newAddClassLevels3.Selections)
                {
                    selection.Features = selection.Features.AddToArray(firedomain, firedomainprogressdruid, firedomainspelllistfeaturedruid);

                }
                eldersister_barbcamp.ReplaceComponent(nymphLevels2, newAddClassLevels3);

                var nymphLevels = eldersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 14;
                var spell_list = newnymphLevels.MemorizeSpells.AddToArray(stoneskincommunal, greaterdispel, firesnake, firesnake, volcanicstorm, calllightning, calllightning, fire_storm, greaterdispel, greaterdispel, heal, tarpool, freedomofmovement,
                                                                          firesnake, firesnake, vinetrap, barkskin, flurryofsnowballs, flurryofsnowballs, snowball, snowball, snowball, shockinggrasp, shockinggrasp);
                newnymphLevels.MemorizeSpells = spell_list;
                eldersister_barbcamp.ReplaceComponent(nymphLevels, newnymphLevels);

                var nymphLevels3 = eldersister_barbcamp.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels3 = nymphLevels3.CreateCopy();
                var spell_list2 = newnymphLevels3.MemorizeSpells.RemoveFromArray(summonnaturesallyIV);
                newnymphLevels3.MemorizeSpells = spell_list2;
                eldersister_barbcamp.ReplaceComponent(nymphLevels3, newnymphLevels3);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.barkskin);

                var brain = eldersister_barbcamp.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(flamestrikeaiaction);
                brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal,
                                                         AiActions.castcontrolledfireballsister,
                                                         AiActions.castflamestrikesister,
                                                         AiActions.calllightningsister, AiActions.healspell, AiActions.castgreaterdispellsisterabandoned, AiActions.tarpool,
                                                          AiActions.castfreedomofmovement, AiActions.lightningboltsister,
                                                            AiActions.castfiresnakesister, AiActions.castvinetrap, AiActions.barkskingoblinsister,
                                                            AiActions.calllightninglostsister, AiActions.castflurryofsnowballssister, AiActions.castsnowballlostsister, AiActions.castshockgraspsister);
            }
        }

        static void updateTombVandalLeader()

        {


            var TombVandalLeader = library.Get<BlueprintUnit>("131d2a9e855a3624ea548545c840870a");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)TombVandalLeader.AddFacts[0], "TombVandalLeaderFeature", "4faf2d78454041e389c5e07d04ff91e0");
            TombVandalLeader.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var TombVandalLeaderFeature = library.Get<BlueprintFeature>("4faf2d78454041e389c5e07d04ff91e0");


            var fighterLevels = TombVandalLeaderFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 13;
            TombVandalLeaderFeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            TombVandalLeader.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //Greatsword +1
            TombVandalLeader.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = TombVandalLeader.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);

        }

        static void updateTombVandalMelee()

        {


            var TombVandalLeaderMelee = library.Get<BlueprintUnit>("fd2c4c8afad141c4588572786e52859d");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)TombVandalLeaderMelee.AddFacts[0], "TombVandalLeaderMeleeFeature", "62c32f0ba8db4ace923a8bc7fa93fd2b");
            TombVandalLeaderMelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();






            var TombVandalLeaderMeleeFeature = library.Get<BlueprintFeature>("62c32f0ba8db4ace923a8bc7fa93fd2b");


            var fighterLevels = TombVandalLeaderMeleeFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 13;
            TombVandalLeaderMeleeFeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            TombVandalLeaderMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //Greatsword +1
            TombVandalLeaderMelee.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Scalemail +1



            var brain = TombVandalLeaderMelee.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig);

        }

        static void updateTombVandalRanged()

        {


            var TombVandalRanged = library.Get<BlueprintUnit>("4d73ab4d7fe37f2489f94f000e7ae470");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");


            TombVandalRanged.AddFacts = TombVandalRanged.AddFacts.AddToArray(blindfight);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)TombVandalRanged.AddFacts[0], "TombVandalRangedFeature", "4fa130cb5c92431c82628fb2f45d0ac3");
            TombVandalRanged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var TombVandalRangedFeature = library.Get<BlueprintFeature>("4fa130cb5c92431c82628fb2f45d0ac3");





            var fighterLevels = TombVandalRangedFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 13;
            TombVandalRangedFeature.ReplaceComponent(fighterLevels, newAddClassLevels);





        }

        static void updateClericGorum()
        {
            var cleric = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var cleric_gorum_feature = library.Get<BlueprintFeature>("ca063d3e6c8576642a23fe74f2379ee0");
            var cleric_gorum = library.Get<BlueprintUnit>("4602809f9d59cc24a815d304715771c7");
            var divine_power = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var sm5 = library.Get<BlueprintAbility>("630c8b85d9f07a64f917d79cb5905741");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var ShieldOfFaithBuff = library.Get<BlueprintBuff>("5274ddc289f4a7447b7ace68ad8bebb0");
            var ShieldOfFaithAiAction = library.Get<BlueprintAiAction>("8ce28d8e7507dd24ab0ae81aebea58cf");




            cleric_gorum.AddFacts = cleric_gorum.AddFacts.AddToArray(quicken);



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)cleric_gorum.AddFacts[0], "ClericGorumFeature", "7141bd7cf6ce461ab8fb7e49b7ade9cf");
            cleric_gorum.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clericgorumfeature = library.Get<BlueprintFeature>("7141bd7cf6ce461ab8fb7e49b7ade9cf");



            var clericLevels = clericgorumfeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 15;
            var spell_list = newclericLevels.MemorizeSpells.AddToArray(searing_light, searing_light, heal, hellfireray, constrictingcoils, righteousmight, freedomofmovement, dispel,shieldoffaith);
            newclericLevels.MemorizeSpells = spell_list;
            clericgorumfeature.ReplaceComponent(clericLevels, newclericLevels);

            var clericLevels2 = clericgorumfeature.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == cleric);
            var newclericLevels2 = clericLevels2.CreateCopy();

            var spell_list2 = newclericLevels2.MemorizeSpells.RemoveFromArray(sm5);
            newclericLevels2.MemorizeSpells = spell_list2;
            clericgorumfeature.ReplaceComponent(clericLevels2, newclericLevels2);

            var clericLevels3 = clericgorumfeature.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == cleric);
            var newclericLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newclericLevels3.MemorizeSpells.RemoveFromArray(holdperson);
            newclericLevels3.MemorizeSpells = spell_list3;
            clericgorumfeature.ReplaceComponent(clericLevels3, newclericLevels3);

            var clericLevels4 = clericgorumfeature.ComponentsArray
                 .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newclericLevels4.MemorizeSpells.RemoveFromArray(divinefavor);
            newclericLevels4.MemorizeSpells = spell_list4;
            clericgorumfeature.ReplaceComponent(clericLevels4, newclericLevels4);

            var clone2 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)cleric_gorum.Brain, "ClericGorumAI", "d60784da6dfe4b08b7f7a592ca9813f3");
            cleric_gorum.Brain = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();





            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);

            var brain = library.Get<BlueprintBrain>("d60784da6dfe4b08b7f7a592ca9813f3");
            brain.Actions = brain.Actions.RemoveFromArray(ShieldOfFaithAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglight, AiActions.healspell, AiActions.hellfire_ray,
                                                    AiActions.constrictingcoils, AiActions.castshieldoffaithgorum, AiActions.righteousmightgoblinshaman, AiActions.castfreedomofmovement, AiActions.dispel,AiActions.divine_power_first);






        }

        static void updateClericGorumArmags()
        {
           
            
            var skeletalchange = library.Get<BlueprintUnit>("49903237b0c90b445ac1089dc89a7665");
            var cleric_gorum_feature = library.Get<BlueprintFeature>("ca063d3e6c8576642a23fe74f2379ee0");
            var cleric = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var divine_power = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var sm5 = library.Get<BlueprintAbility>("630c8b85d9f07a64f917d79cb5905741");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var fighterclass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");



            var fighterLevels = skeletalchange.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == fighterclass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 0;
            skeletalchange.ReplaceComponent(fighterLevels, newfighterLevels);




            skeletalchange.AddFacts = skeletalchange.AddFacts.AddToArray(quicken,cleric_gorum_feature);



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)skeletalchange.AddFacts[6], "SkeletalClericsofGorum", "6bcaae62502b491db68a91c24d0144fb");
            skeletalchange.AddFacts[6] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var SkeletalClericsofGorum = library.Get<BlueprintFeature>("6bcaae62502b491db68a91c24d0144fb");



            var clericLevels = SkeletalClericsofGorum.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 15;
            var spell_list = newclericLevels.MemorizeSpells.AddToArray(searing_light, heal, hellfireray, constrictingcoils);
            newclericLevels.MemorizeSpells = spell_list;
            SkeletalClericsofGorum.ReplaceComponent(clericLevels, newclericLevels);

            var clericLevels2 = SkeletalClericsofGorum.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == cleric);
            var newclericLevels2 = clericLevels2.CreateCopy();

            var spell_list2 = newclericLevels2.MemorizeSpells.RemoveFromArray(sm5);
            newclericLevels2.MemorizeSpells = spell_list2;
            SkeletalClericsofGorum.ReplaceComponent(clericLevels2, newclericLevels2);

            var clericLevels3 = SkeletalClericsofGorum.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == cleric);
            var newclericLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newclericLevels3.MemorizeSpells.RemoveFromArray(holdperson);
            newclericLevels3.MemorizeSpells = spell_list3;
            SkeletalClericsofGorum.ReplaceComponent(clericLevels3, newclericLevels3);

            var clericLevels4 = SkeletalClericsofGorum.ComponentsArray
                 .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == cleric);
            var newclericLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newclericLevels4.MemorizeSpells.RemoveFromArray(divinefavor);
            newclericLevels4.MemorizeSpells = spell_list4;
            SkeletalClericsofGorum.ReplaceComponent(clericLevels4, newclericLevels4);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);


            var brain = skeletalchange.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglight,AiActions.healspell, AiActions.hellfire_ray, AiActions.constrictingcoils, AiActions.castcommand);

            skeletalchange.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{skeletalchange.name}.name", "Cleric of Gorum"));

            skeletalchange.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //Greatsword +1
            skeletalchange.Body.SecondaryHand = null;
            skeletalchange.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1

            skeletalchange.GetComponent<AddTags>().UseInRandomEncounter = false;
            skeletalchange.GetComponent<AddTags>().UseInDungeon = false;

        }

        static void changenightmareskeletal()
        {
            var holloweyearchers = library.Get<BlueprintUnit>("9928642aa0612434bbb23f478dbbf988");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");

            holloweyearchers.Charisma = 14;


            var fighterLevels = holloweyearchers.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            holloweyearchers.ReplaceComponent(fighterLevels, newAddClassLevels);

            holloweyearchers.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2753a0159681be94da3a5eeabc8c8d1a"); //Composite Bow +1

            holloweyearchers.GetComponent<Experience>().CR = 11;

            holloweyearchers.GetComponent<AddTags>().UseInRandomEncounter = false;


            holloweyearchers.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{holloweyearchers.name}.name", "Ferocius Skeletal Champion Archer"));


        }

        static void changenightmareskeletalchamp()
        {
            var skeletalchamp = library.Get<BlueprintUnit>("622b8701c4f2468479b9f533c2cc24e5");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var CleaveFeature = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");


            skeletalchamp.Charisma = 16;

            var fighterLevels = skeletalchamp.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            skeletalchamp.ReplaceComponent(fighterLevels, newAddClassLevels);

            skeletalchamp.AddFacts = skeletalchamp.AddFacts.AddToArray(sunder);
            skeletalchamp.AddFacts = skeletalchamp.AddFacts.RemoveFromArray(CleaveFeature);

            skeletalchamp.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1
            skeletalchamp.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); //Heavy Shield +1
            skeletalchamp.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1

            skeletalchamp.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{skeletalchamp.name}.name", "Ferocius Skeletal Champion"));

            skeletalchamp.GetComponent<Experience>().CR = 12;



            var brain = skeletalchamp.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);
        }

        static void changenightmareskeletalbarb()
        {
            var skeletalbarb = library.Get<BlueprintUnit>("3ebabb487a3c2e04eb988bc28d897fea");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var RecklessStanceFeature = library.Get<BlueprintFeature>("cb502c65dab407b4e928f5d8355cafc9");
            var LethalStanceFeature = library.Get<BlueprintFeature>("e4450dd9c06dc034fb7c0c08abcc202b");
            var swiftfoot = library.Get<BlueprintFeature>("7df32d4e9bd2cdc48b0f69b03a57754a");
            var deadlyaccuracy = library.Get<BlueprintFeature>("c841ffa13d39ce442a408f57feb3cb8e");
            var damagereduction = library.Get<BlueprintFeature>("ddaee203ee4dcb24c880d633fbd77db6");
            var lethalbuff = library.Get<BlueprintBuff>("a8a733d2605c66548b652f312ea4dbf3");
            var recklesstoggle = library.Get<BlueprintActivatableAbility>("4ee08802b8a2b9b448d21f61e208a306");
            

            skeletalbarb.Charisma = 16;

            var fighterLevels = skeletalbarb.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            skeletalbarb.ReplaceComponent(fighterLevels, newAddClassLevels);

            skeletalbarb.AddFacts = skeletalbarb.AddFacts.AddToArray(Cornugon,LethalStanceFeature,damagereduction,lethalbuff);
            skeletalbarb.AddFacts = skeletalbarb.AddFacts.RemoveFromArray(recklesstoggle);
            skeletalbarb.AddFacts = skeletalbarb.AddFacts.RemoveFromArray(RecklessStanceFeature);
            skeletalbarb.AddFacts = skeletalbarb.AddFacts.RemoveFromArray(swiftfoot);

            skeletalbarb.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e4925df9c7ab2714793cd5834e0a3039"); //Greatsword +1
            skeletalbarb.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1

            skeletalbarb.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{skeletalbarb.name}.name", "Ferocius Skeletal Champion Beserker"));

            skeletalbarb.GetComponent<Experience>().CR = 11;



            var brain = skeletalbarb.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);

        }

        static void changearmagghostmageA()
        {
            var ghostmageA = library.Get<BlueprintUnit>("4868d06edcd240f58e94d96beb2421ad");
            var OutsiderClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var NaturalArmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var DR10 = library.Get<BlueprintFeature>("e3b18255d373c494b83b4b95956fd847");
            var GreaterFireElementalBurnFeature = library.Get<BlueprintFeature>("5129567223dcbc248a4143226ba037f4");
            var SubtypeAir = library.Get<BlueprintFeature>("dd3d0c7f4f57f304cbdbb68170b1b775");
            var SubtypeElemental = library.Get<BlueprintFeature>("198fd8924dabcb5478d0f78bd453c586");
            var SubtypeExtraplanar = library.Get<BlueprintFeature>("136fa0343d5b4b348bdaa05d83408db3");
            var TripImmune = library.Get<BlueprintFeature>("c1b26f97b974aec469613f968439e7bb");
            var WeaponFinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var CombatReflexes = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var BlindFight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");
            var AirElementalSlam_Greater = library.Get<BlueprintItemWeapon>("bdb489e16c1c839449420aa8c2c8fbc5");
            var AirElementalGreaterWhirlwindAbility = library.Get<BlueprintAbility>("70c9e5dc39dc3934097767d927ac1c04");
            var PowerAttackFeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var ImprovedUnarmedStrike = library.Get<BlueprintFeature>("7812ad3672a4b9a4fb894ea402095167");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var DeflectArrows = library.Get<BlueprintFeature>("2c61fdbf242866f4e93c3e1477fb96b5");
            var Airborne = library.Get<BlueprintFeature>("70cffb448c132fa409e49156d013b175");
            var Airmastery = library.Get<BlueprintFeature>("be52ced7ae1c7354a8ee12d9bad47805");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var phantasmalputrification = library.Get<BlueprintAbility>("1f2e6019ece86d64baa5effa15e81ecc");
            var summongreatair = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");

            var GhostFX = library.Get<BlueprintBuff>("20f79fea035330b479fc899fa201d232");
            var UndeadType = library.Get<BlueprintFeature>("734a29b693e9ec346ba2951b27987e33");
            var UnholyGrace = library.Get<BlueprintFeature>("2334cca051360914d970839e81b1f7d9");
            var CorruptingTouchCast = library.Get<BlueprintAbility>("fb69d7e34d4892a4ab548dc1c08d6d0b");
            var FrightfulMoan = library.Get<BlueprintAbility>("3e356401077df2c4dbdc3e8a089f32a9");
            var Incorporeal = library.Get<BlueprintFeature>("c4a7f98d743bc784c9d4cf2105852c39");
            var Unlootable = library.Get<BlueprintBuff>("0f775c7d5d8b6494197e1ce937754482");
            var MageArmorBuffPermanent = library.Get<BlueprintBuff>("3410dd9986662684e8debdcf272e2cdc");
            var MageShieldBuffPermanent = library.Get<BlueprintBuff>("f01f31b601e38034fa0460d16778a306");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");




            ghostmageA.Prefab = new UnitViewLink() { AssetId = "28c380d0cb5e1b74aa2f16408b066f58" };
            ghostmageA.CustomizationPreset = null;
            ghostmageA.Visual.Barks = library.Get<BlueprintUnitAsksList>("27b87abb4455e61459ec9b4f0132c716");


            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(NaturalArmor6);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(DR10);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(GreaterFireElementalBurnFeature);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(SubtypeAir);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(SubtypeElemental);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(SubtypeExtraplanar);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(WeaponFinesse);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(CombatReflexes);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(BlindFight);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(PowerAttackFeature);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(ImprovedUnarmedStrike);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(dodge);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(DeflectArrows);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(Airborne);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(Airmastery);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(AirElementalGreaterWhirlwindAbility);

            ghostmageA.AddFacts = ghostmageA.AddFacts.AddToArray(MageArmorBuffPermanent, MageShieldBuffPermanent,GhostFX,UndeadType,UnholyGrace,
                                                                 CorruptingTouchCast,FrightfulMoan,Incorporeal,Unlootable,toughness,combatcasting,augmentsummon,quicken,lightningreflexes);



            var clone2 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)ghostmageA.Brain, " ghostmageABrain", "3617b09bd56d4524b5d21dec7b3bc90f");
            ghostmageA.Brain = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            ghostmageA.Strength = 10;
            ghostmageA.Dexterity = 16;
            ghostmageA.Constitution = 10;
            ghostmageA.Intelligence = 14;
            ghostmageA.Wisdom = 14;
            ghostmageA.Charisma = 22;


            ghostmageA.Body.DisableHands = false;

            ghostmageA.Body.AdditionalLimbs = ghostmageA.Body.AdditionalLimbs.RemoveFromArray(AirElementalSlam_Greater);
            ghostmageA.Body.AdditionalLimbs = ghostmageA.Body.AdditionalLimbs.RemoveFromArray(AirElementalSlam_Greater);

            var sorcererLevels = ghostmageA.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == OutsiderClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            newAddClassLevels.Levels = 15;
            ghostmageA.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var sorcererLevels2 = ghostmageA.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels2 = sorcererLevels2.CreateCopy();
            var spell_list5 = newAddClassLevels2.SelectSpells.AddToArray(displacement,coldicestrike,bansheeblast,haste,slow,phantasmalputrification,
                                                                         summongreatair,stoneskincommunal,mirrorimage,icyprison,coneofcold,boneshatter,snowball,boneshaker,shield,magearmor,greaterdispel);
            newAddClassLevels2.SelectSpells = spell_list5;
            ghostmageA.ReplaceComponent(sorcererLevels2, newAddClassLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);




            ghostmageA.GetComponent<Experience>().CR = 13;


            var brain = library.Get<BlueprintBrain>("3617b09bd56d4524b5d21dec7b3bc90f");
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementghostmage,AiActions.coldicestrikeghostmage,
                                                     AiActions.bansheeblastghostmage,AiActions.casthasteghostmage,AiActions.castslowghostmage,AiActions.castphantasmalputrificationghostmage,
                                                     AiActions.stoneskincommunalghostmage,AiActions.summonelementalgreatair,
                                                     AiActions.mirrorimagecyclop,AiActions.casticyprisonghostmage,
                                                     AiActions.coneofcoldelderwater,AiActions.castboneshatterghostmage);

        }

        static void changearmagghostmageB()
        {
            var ghostmageA = library.Get<BlueprintUnit>("f582475c66864a009f6c07029c350a2c");
            var FighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var UndeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var NaturalArmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var DRBludgeoning5 = library.Get<BlueprintFeature>("fc7534e93c85c5344841bcfacb565e32");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var CombatReflexes = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");

     
         
         
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var phantasmalputrification = library.Get<BlueprintAbility>("1f2e6019ece86d64baa5effa15e81ecc");
            var summongreatair = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");

            var GhostFX = library.Get<BlueprintBuff>("20f79fea035330b479fc899fa201d232");
            var UndeadType = library.Get<BlueprintFeature>("734a29b693e9ec346ba2951b27987e33");
            var UnholyGrace = library.Get<BlueprintFeature>("2334cca051360914d970839e81b1f7d9");
            var CorruptingTouchCast = library.Get<BlueprintAbility>("fb69d7e34d4892a4ab548dc1c08d6d0b");
            var FrightfulMoan = library.Get<BlueprintAbility>("3e356401077df2c4dbdc3e8a089f32a9");
            var Incorporeal = library.Get<BlueprintFeature>("c4a7f98d743bc784c9d4cf2105852c39");
            var Unlootable = library.Get<BlueprintBuff>("0f775c7d5d8b6494197e1ce937754482");
            var MageArmorBuffPermanent = library.Get<BlueprintBuff>("3410dd9986662684e8debdcf272e2cdc");
            var MageShieldBuffPermanent = library.Get<BlueprintBuff>("f01f31b601e38034fa0460d16778a306");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ColdImmunity = library.Get<BlueprintFeature>("9ae23798a9284e044ad2716a772a410e");
            var ChannelResistance4 = library.Get<BlueprintFeature>("a9ac84c6f48b491438f91bb237bc9212");


  


            ghostmageA.Prefab = new UnitViewLink() { AssetId = "28c380d0cb5e1b74aa2f16408b066f58" };
            ghostmageA.CustomizationPreset = null;
            ghostmageA.Visual.Barks = library.Get<BlueprintUnitAsksList>("27b87abb4455e61459ec9b4f0132c716");


            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(NaturalArmor2);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(DRBludgeoning5);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(ColdImmunity);
            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(ChannelResistance4);

            ghostmageA.AddFacts = ghostmageA.AddFacts.RemoveFromArray(CombatReflexes);





            ghostmageA.AddFacts = ghostmageA.AddFacts.AddToArray(MageArmorBuffPermanent, MageShieldBuffPermanent, GhostFX, UndeadType, UnholyGrace,
                                                                 CorruptingTouchCast, FrightfulMoan, Incorporeal, Unlootable, toughness, combatcasting, augmentsummon, quicken, lightningreflexes);



            var clone2 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)ghostmageA.Brain, " ghostmageBBrain", "78b1ea12087f4d76bcf27f78940b6eb0");
            ghostmageA.Brain = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            ghostmageA.Strength = 10;
            ghostmageA.Dexterity = 16;
            ghostmageA.Constitution = 10;
            ghostmageA.Intelligence = 14;
            ghostmageA.Wisdom = 14;
            ghostmageA.Charisma = 22;


            ghostmageA.Body.DisableHands = false;

   

            var sorcererLevels = ghostmageA.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == FighterClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            newAddClassLevels.Levels = 15;
            ghostmageA.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var sorcererLevels3 = ghostmageA.ComponentsArray
.OfType<AddClassLevels>()
  .First(c => c.CharacterClass == UndeadClass);
            var newAddClassLevels3 = sorcererLevels3.CreateCopy();
            newAddClassLevels3.Levels = 0;
            ghostmageA.ReplaceComponent(sorcererLevels3, newAddClassLevels3);

            var sorcererLevels2 = ghostmageA.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels2 = sorcererLevels2.CreateCopy();
            var spell_list5 = newAddClassLevels2.SelectSpells.AddToArray(displacement, coldicestrike, bansheeblast, haste, slow, phantasmalputrification,
                                                                         summongreatair, stoneskincommunal, mirrorimage, icyprison, coneofcold, boneshatter, snowball, boneshaker, shield, magearmor);
            newAddClassLevels2.SelectSpells = spell_list5;
            ghostmageA.ReplaceComponent(sorcererLevels2, newAddClassLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            ghostmageA.Body.PrimaryHand = null;
            ghostmageA.Body.Armor = null; 

            ghostmageA.GetComponent<Experience>().CR = 13;


            var brain = library.Get<BlueprintBrain>("78b1ea12087f4d76bcf27f78940b6eb0");
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementghostmage, AiActions.coldicestrikeghostmage,
                                                     AiActions.bansheeblastghostmage, AiActions.casthasteghostmage, AiActions.castslowghostmage, AiActions.castphantasmalputrificationghostmage,
                                                     AiActions.stoneskincommunalghostmage, AiActions.summonelementalgreatair,
                                                     AiActions.mirrorimagecyclop, AiActions.casticyprisonghostmage,
                                                     AiActions.coneofcoldelderwater, AiActions.castboneshatterghostmage);

        }

        static void updateArmagIronGolem()

        {


            var IronGolem = library.Get<BlueprintUnit>("64589573eba29d541b5240c7485e1aec");
            var constructClass = library.Get<BlueprintCharacterClass>("fd66bdea5c33e5f458e929022322e6bf");


            IronGolem.Charisma = 18;

            IronGolem.MaxHP = 100;


            var fighterLevels = IronGolem.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == constructClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 21;
            IronGolem.ReplaceComponent(fighterLevels, newAddClassLevels);



        }


       

        static void changeArmagInquisitorA()
        {
            var ArmagInquisitorA = library.Get<BlueprintUnit>("00b8c096d00e49ada6c5125a241b8f01");
            var inquisitorClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var fester = library.Get<BlueprintAbility>("2dbe271c979d9104c8e2e6b42e208e32");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var aid = library.Get<BlueprintAbility>("03a9630394d10164a9410882d31572f0");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var HasteScroll = library.Get<BlueprintItemEquipmentUsable>("6b3f04dd5eb9675499f815d5086fe018");
            var AidBuffCL20 = library.Get<BlueprintBuff>("b2cc506571b5b91449851738f8a51e14");
            var ProtectionJudgementBuff = library.Get<BlueprintBuff>("99345ce7c0f8001438fee23db660d039");
            var JusticeJudgementBuff = library.Get<BlueprintBuff>("fc246eb29c8f95c449fd156759f421e9");
            var Natarmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var WeaponFocusHeavyCrossbow = library.Get<BlueprintFeature>("f9129b3edcbe39948a27d4f7c125defa");
            var ShakeItOff = library.Get<BlueprintFeature>("6337b37f2a7c11b4ab0831d6780bce2a");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var banefeature = library.Get<BlueprintFeature>("a0571cc93916dcf498bcea611e9d5573");
            var OutsiderClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var coordinatedshot = library.Get<BlueprintFeature>("6c53965320604cfeb13d283afd147e09");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var castigatemass = library.Get<BlueprintAbility>("41236cf0e476d7043bc16a33a9f449bd");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var siezethemoment = library.Get<BlueprintFeature>("1191ef3065e6f8e4f9fbe1b7e3c0f760");
            var NaturalArmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var DR10 = library.Get<BlueprintFeature>("e3b18255d373c494b83b4b95956fd847");
            var GreaterFireElementalBurnFeature = library.Get<BlueprintFeature>("5129567223dcbc248a4143226ba037f4");
            var SubtypeFire = library.Get<BlueprintFeature>("23dc7b90d148b9d439f48e015a520a9c");
            var SubtypeElemental = library.Get<BlueprintFeature>("198fd8924dabcb5478d0f78bd453c586");
            var SubtypeExtraplanar = library.Get<BlueprintFeature>("136fa0343d5b4b348bdaa05d83408db3");
            var WeaponFinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var HammerTheGap = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var CombatReflexes = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var BlindFight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");
            var FireElementalSlam_Greater = library.Get<BlueprintItemWeapon>("9212a9d45b8eea140bf49fc4ec5d0791");




                ArmagInquisitorA.Prefab = new UnitViewLink() { AssetId = "31dee50d32909ba4f99c6af3453573b7" };
                ArmagInquisitorA.CustomizationPreset = null;
                ArmagInquisitorA.Visual.Barks = library.Get<BlueprintUnitAsksList>("d112b7911d9d3be48bd86a5cde266020");


            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(NaturalArmor6);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(DR10);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(GreaterFireElementalBurnFeature);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(SubtypeFire);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(SubtypeElemental);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(SubtypeExtraplanar);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(WeaponFinesse);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(IronWill);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(HammerTheGap);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(CombatReflexes);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(BlindFight);

            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.AddToArray(pointblank,preciseshot,manyshot,rapidshot,rapidshotbuff,deadlyaim, deadlyaimbuff, quicken, WeaponFocusHeavyCrossbow, AidBuffCL20,
                                                                             ProtectionJudgementBuff, JusticeJudgementBuff, Natarmor2, coordinatedshot, 
                                                                             ShakeItOff, combatcasting, dodge, banefeature,siezethemoment);

            ArmagInquisitorA.Strength = 14;
            ArmagInquisitorA.Dexterity = 18;
            ArmagInquisitorA.Constitution = 10;
            ArmagInquisitorA.Intelligence = 14;
            ArmagInquisitorA.Wisdom = 16;
            ArmagInquisitorA.Charisma = 16;

            var inquisitorLevels = ArmagInquisitorA.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == OutsiderClass);
            var newAddClassLevels = inquisitorLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            newAddClassLevels.Levels = 14;
            ArmagInquisitorA.ReplaceComponent(inquisitorLevels, newAddClassLevels);

            ArmagInquisitorA.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("c98788ea762ecad44b73610c1e065bf8"); //Heavy Crossbow +2
            ArmagInquisitorA.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1


            ArmagInquisitorA.Body.DisableHands = false;

            ArmagInquisitorA.Body.AdditionalLimbs = ArmagInquisitorA.Body.AdditionalLimbs.RemoveFromArray(FireElementalSlam_Greater);
            ArmagInquisitorA.Body.AdditionalLimbs = ArmagInquisitorA.Body.AdditionalLimbs.RemoveFromArray(FireElementalSlam_Greater);
          



            var wizardLevels2 = ArmagInquisitorA.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == inquisitorClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(heroism, fester, dispel, aid, shieldoffaith, divinepower, castigatemass, InvisibilityGreater,stoneskincommunal);
            newAddClassLevels2.SelectSpells = spell_list2;
            ArmagInquisitorA.ReplaceComponent(wizardLevels2, newAddClassLevels2);

         


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.heroism);

            ArmagInquisitorA.GetComponent<Experience>().CR = 12;

            var brain = ArmagInquisitorA.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal,  AiActions.castheroism, AiActions.dispel,
                        AiActions.castshieldoffaith, AiActions.castfester, AiActions.castinvisibilitygreater, AiActions.castcastigatemass,AiActions.divine_power_first);



        }

        static void changeArmagInquisitorB()
        {
            var ArmagInquisitorA = library.Get<BlueprintUnit>("f4329022dd224823a5e245e407c7023c");
            var inquisitorClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var fester = library.Get<BlueprintAbility>("2dbe271c979d9104c8e2e6b42e208e32");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var aid = library.Get<BlueprintAbility>("03a9630394d10164a9410882d31572f0");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var HasteScroll = library.Get<BlueprintItemEquipmentUsable>("6b3f04dd5eb9675499f815d5086fe018");
            var AidBuffCL20 = library.Get<BlueprintBuff>("b2cc506571b5b91449851738f8a51e14");
            var ProtectionJudgementBuff = library.Get<BlueprintBuff>("99345ce7c0f8001438fee23db660d039");
            var JusticeJudgementBuff = library.Get<BlueprintBuff>("fc246eb29c8f95c449fd156759f421e9");
            var Natarmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var WeaponFocusHeavyCrossbow = library.Get<BlueprintFeature>("f9129b3edcbe39948a27d4f7c125defa");
            var ShakeItOff = library.Get<BlueprintFeature>("6337b37f2a7c11b4ab0831d6780bce2a");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var banefeature = library.Get<BlueprintFeature>("a0571cc93916dcf498bcea611e9d5573");
            var OutsiderClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var coordinatedshot = library.Get<BlueprintFeature>("6c53965320604cfeb13d283afd147e09");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var castigatemass = library.Get<BlueprintAbility>("41236cf0e476d7043bc16a33a9f449bd");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var siezethemoment = library.Get<BlueprintFeature>("1191ef3065e6f8e4f9fbe1b7e3c0f760");
            var NaturalArmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var DR10 = library.Get<BlueprintFeature>("e3b18255d373c494b83b4b95956fd847");
            var GreaterFireElementalBurnFeature = library.Get<BlueprintFeature>("5129567223dcbc248a4143226ba037f4");
            var SubtypeEarth = library.Get<BlueprintFeature>("e147258e5b7c40643893d80c9f2816e8");
            var SubtypeElemental = library.Get<BlueprintFeature>("198fd8924dabcb5478d0f78bd453c586");
            var SubtypeExtraplanar = library.Get<BlueprintFeature>("136fa0343d5b4b348bdaa05d83408db3");
            var GreatFortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            
            var HammerTheGap = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var BlindFightImproved = library.Get<BlueprintFeature>("4f1a78b02ac71bd4fa7d6e011d6f8ce0");
            var BlindFight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");
            var EarthElementalSlam_Greater = library.Get<BlueprintItemWeapon>("e4779dd883b250941861760b80d1d744");
            var PowerAttackFeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var ImprovedSunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var EarthMastery = library.Get<BlueprintFeature>("be65c8334ceac234195be030137563d8");




            ArmagInquisitorA.Prefab = new UnitViewLink() { AssetId = "31dee50d32909ba4f99c6af3453573b7" };
            ArmagInquisitorA.CustomizationPreset = null;
            ArmagInquisitorA.Visual.Barks = library.Get<BlueprintUnitAsksList>("d112b7911d9d3be48bd86a5cde266020");


            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(NaturalArmor14);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(DR10);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(GreaterFireElementalBurnFeature);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(SubtypeEarth);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(SubtypeElemental);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(SubtypeExtraplanar);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(GreatFortitude);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(PowerAttackFeature);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(toughness);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(BlindFightImproved);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(BlindFight);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(ImprovedSunder);
            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.RemoveFromArray(EarthMastery);

            ArmagInquisitorA.AddFacts = ArmagInquisitorA.AddFacts.AddToArray(pointblank, preciseshot, manyshot, rapidshot, rapidshotbuff, deadlyaim, deadlyaimbuff, quicken, WeaponFocusHeavyCrossbow, AidBuffCL20,
                                                                             ProtectionJudgementBuff, JusticeJudgementBuff, Natarmor2, coordinatedshot,
                                                                             ShakeItOff, combatcasting, dodge, banefeature, siezethemoment);


     


            ArmagInquisitorA.Strength = 14;
            ArmagInquisitorA.Dexterity = 18;
            ArmagInquisitorA.Constitution = 10;
            ArmagInquisitorA.Intelligence = 14;
            ArmagInquisitorA.Wisdom = 16;
            ArmagInquisitorA.Charisma = 16;

            var inquisitorLevels = ArmagInquisitorA.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == OutsiderClass);
            var newAddClassLevels = inquisitorLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            newAddClassLevels.Levels = 14;
            ArmagInquisitorA.ReplaceComponent(inquisitorLevels, newAddClassLevels);

            ArmagInquisitorA.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("c98788ea762ecad44b73610c1e065bf8"); //Heavy Crossbow +2
            ArmagInquisitorA.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1


            ArmagInquisitorA.Body.DisableHands = false;

            ArmagInquisitorA.Body.AdditionalLimbs = ArmagInquisitorA.Body.AdditionalLimbs.RemoveFromArray(EarthElementalSlam_Greater);
            ArmagInquisitorA.Body.AdditionalLimbs = ArmagInquisitorA.Body.AdditionalLimbs.RemoveFromArray(EarthElementalSlam_Greater);




            var wizardLevels2 = ArmagInquisitorA.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == inquisitorClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(heroism, fester, dispel, aid, shieldoffaith, divinepower, castigatemass, InvisibilityGreater, stoneskincommunal);
            newAddClassLevels2.SelectSpells = spell_list2;
            ArmagInquisitorA.ReplaceComponent(wizardLevels2, newAddClassLevels2);




            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.heroism);

            ArmagInquisitorA.GetComponent<Experience>().CR = 12;

            var brain = ArmagInquisitorA.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal, AiActions.castheroism, AiActions.dispel, AiActions.castshieldoffaith, AiActions.divine_power_first, AiActions.castfester, AiActions.castinvisibilitygreater, AiActions.castcastigatemass);



        }

        static void changejmmtcleric()
        {
            var jmmtcleric = library.Get<BlueprintUnit>("05e04c93beb54609bec87d6521f08ea9");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var VandalPositiveClericFeatureListLevel9 = library.Get<BlueprintFeature>("ca063d3e6c8576642a23fe74f2379ee0");
            var BanditFighterRangedFeatureListLevel8 = library.Get<BlueprintFeature>("5fff399cf89d4244eb2991f4c0d54cb7");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var ClusteredShots = library.Get<BlueprintFeature>("f7de245bb20f12f47864c7cb8b1d1abb");
            var CriticalFocus = library.Get<BlueprintFeature>("8ac59959b1b23c347a0361dc97cc786d");
            var ImprovedCritical = library.Get<BlueprintFeature>("f4201c85a991369408740c6888362e20");


            jmmtcleric.Prefab = new UnitViewLink() { AssetId = "e82d2f0a230564943ad63acf5cad8474" };
            jmmtcleric.CustomizationPreset = null;
            jmmtcleric.Visual.Barks = library.Get<BlueprintUnitAsksList>("d112b7911d9d3be48bd86a5cde266020");


            jmmtcleric.AddFacts = jmmtcleric.AddFacts.RemoveFromArray(VandalPositiveClericFeatureListLevel9);
            jmmtcleric.AddFacts = jmmtcleric.AddFacts.AddToArray(BanditFighterRangedFeatureListLevel8,ClusteredShots,CriticalFocus,ImprovedCritical);

            jmmtcleric.Strength = 14;
            jmmtcleric.Dexterity = 20;
            jmmtcleric.Constitution = 10;
            jmmtcleric.Intelligence = 9;
            jmmtcleric.Wisdom = 10;
            jmmtcleric.Charisma = 14;

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)jmmtcleric.AddFacts[0], "jmmtclericchangedfeature", "8478c7694ea34c6b8a19bab477c36928");
            jmmtcleric.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var jmmtclericFeature = library.Get<BlueprintFeature>("8478c7694ea34c6b8a19bab477c36928");



            var fighterLevels = jmmtclericFeature.ComponentsArray
             .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            jmmtclericFeature.ReplaceComponent(fighterLevels, newAddClassLevels);

            var undeadlevels = jmmtclericFeature.GetComponent<AddClassLevels>();
            var newverminLevels = undeadlevels.CreateCopy();
            newverminLevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            newverminLevels.Levels = 2;
            jmmtclericFeature.AddComponent(newverminLevels);



            jmmtcleric.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2753a0159681be94da3a5eeabc8c8d1a"); //Composite Bow +1
            jmmtcleric.Body.Armor = library.Get<BlueprintItemArmor>("d7963e1fcf260c148877afd3252dbc91"); //ScalemailStandard


            jmmtcleric.GetComponent<Experience>().CR = 11;


            jmmtcleric.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{jmmtcleric.name}.name", "Ferocius Skeletal Champion Archer"));


        }

        static void changebloodybonesbeast()
        {
            var bloodybones = library.Get<BlueprintUnit>("f68391521a2175647ab311fc64108574");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var moderatewoundsmass = library.Get<BlueprintAbility>("03944622fbe04824684ec29ff2cec6a7");

            bloodybones.AddFacts = bloodybones.AddFacts.AddToArray(moderatewoundsmass);



            var fighterLevels = bloodybones.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 0;
            bloodybones.ReplaceComponent(fighterLevels, newAddClassLevels);



            var undeadLevels = bloodybones.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = undeadLevels.CreateCopy();
            newAddClassLevels2.Levels = 16;
            bloodybones.ReplaceComponent(undeadLevels, newAddClassLevels2);




            var brain = bloodybones.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave,AiActions.inflictmoderatemassbloodybones);

        }

        static void updateZorek()
        {


            var zorek = library.Get<BlueprintUnit>("67066a794f93cd240b112f3bb5bdb0c1");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var warpriestClass = library.Get<BlueprintCharacterClass>("e119d84528144a7797ad34fd718b1f87");
            var angelicaspectbuff = library.Get<BlueprintBuff>("b33f44fecadb3ca48b438dacac6454c2");
            var shieldoffaithbuff = library.Get<BlueprintBuff>("ee9bac1c644a59b4097e9c404f8e34c4");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var angelicaspect = library.Get<BlueprintAbility>("75a10d5a635986641bfbcceceec87217");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var righteousmightbuff = library.Get<BlueprintBuff>("17206974f2a2c164db26d1af7fac57d5");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var Effortlessarmorbuff = library.Get<BlueprintBuff>("40273fe8ff7437f41b72329284678995");
            var SpellResistanceBuff = library.Get<BlueprintBuff>("50a77710a7c4914499d0254e76a808e5");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var acidfeat = library.Get<BlueprintFeature>("a1555920433647e6853e94316977727f");
            var warpriestdestructionbuff = library.Get<BlueprintBuff>("61c276ff8fd94fed92e7dac5cd090d11");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var chargeaiaction = library.Get<BlueprintAiCastSpell>("05003725a881c10419530387b6de5c9a");



            zorek.AddFacts = zorek.AddFacts.AddToArray(angelicaspectbuff,righteousmightbuff,shieldoffaithbuff,
                                                       quicken,combatcasting, SpellResistanceBuff, firebrandbuff, electricalfeat, warpriestdestructionbuff);
            zorek.AddFacts = zorek.AddFacts.RemoveFromArray(Effortlessarmorbuff);

            var warpriestLevels = zorek.ComponentsArray
.OfType<AddClassLevels>()
  .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = warpriestLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("e119d84528144a7797ad34fd718b1f87");
            newAddClassLevels.Levels = 16;
            zorek.ReplaceComponent(warpriestLevels, newAddClassLevels);

            var sorcererLevels2 = zorek.ComponentsArray
              .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == warpriestClass);
            var newAddClassLevels2 = sorcererLevels2.CreateCopy();
            var spell_list5 = newAddClassLevels2.MemorizeSpells.AddToArray(righteousmight,angelicaspect,divinepower,shieldoffaith,prayer,freedomofmovement);
            newAddClassLevels2.MemorizeSpells = spell_list5;
            zorek.ReplaceComponent(sorcererLevels2, newAddClassLevels2);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);


            var clone2 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)zorek.Brain, "zorekBrain", "c8ab3ad80fd54881ae4165630d6a86f3");
            zorek.Brain = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var brain = library.Get<BlueprintBrain>("c8ab3ad80fd54881ae4165630d6a86f3");
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(chargeaiaction);
            brain.Actions = brain.Actions.AddToArray(AiActions.righteousmightdugath,AiActions.divine_power_first,
                                                    AiActions.castshieldoffaithzorek,AiActions.prayergoblinshaman,AiActions.castfreedomofmovement);

        }

        static void updateArmag()
        {
            
            
            var armag = library.Get<BlueprintUnit>("0c5fbd2adcf609b45b91455bf7b68b35");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var chargeaiaction = library.Get<BlueprintAiCastSpell>("05003725a881c10419530387b6de5c9a");
            

            var barbarianLevels = armag.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            armag.ReplaceComponent(barbarianLevels, newAddClassLevels);



            armag.MaxHP = 30;


            var clone2 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)armag.Brain, "armagBrain", "5ecfcad660a54f7f8c643e9080b67de0");
            armag.Brain = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


           var brain = library.Get<BlueprintBrain>("5ecfcad660a54f7f8c643e9080b67de0");
           brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(chargeaiaction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);

        }



        //CHAPTER 5

        //Hellknight Quest

        static void changeLinxia()
        {



            var Linxia = library.Get<BlueprintUnit>("cbc913321c4233e41b85c3d251abb0bb");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var inquisitorClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var BanditPositiveClericFeatureListLevel7 = library.Get<BlueprintFeature>("7e05ee6b9875c354aa88985490e64baf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var fester = library.Get<BlueprintAbility>("2dbe271c979d9104c8e2e6b42e208e32");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var aid = library.Get<BlueprintAbility>("03a9630394d10164a9410882d31572f0");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var ProtectionJudgementBuff = library.Get<BlueprintBuff>("99345ce7c0f8001438fee23db660d039");
            var PurityBuff = library.Get<BlueprintBuff>("fbc7fe386bceb354494b05736381c238");
            var JusticeJudgementBuff = library.Get<BlueprintBuff>("fc246eb29c8f95c449fd156759f421e9");
            var Natarmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var ShakeItOff = library.Get<BlueprintFeature>("6337b37f2a7c11b4ab0831d6780bce2a");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var WeaponFocusLongsword = library.Get<BlueprintFeature>("de132895bff199d4f98ceeea6c88c04e");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var banefeature = library.Get<BlueprintFeature>("a0571cc93916dcf498bcea611e9d5573");
            var coordinatedshot = library.Get<BlueprintFeature>("6c53965320604cfeb13d283afd147e09");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var castigatemass = library.Get<BlueprintAbility>("41236cf0e476d7043bc16a33a9f449bd");
            var siezethemoment = library.Get<BlueprintFeature>("1191ef3065e6f8e4f9fbe1b7e3c0f760");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var HammerTheGap = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var CombatReflexes = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var BlindFight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");
            var festermass = library.Get<BlueprintAbility>("52b8b14360a87104482b2735c7fc8606");
            var ShieldWall = library.Get<BlueprintFeature>("8976de442862f82488a4b138a0a89907");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var BarkskinFixedBuff4 = library.Get<BlueprintBuff>("64926aaee36f7534aaa34ae70ba8328c");


            Linxia.AddFacts = Linxia.AddFacts.AddToArray(quicken, WeaponFocusLongsword,
                                                                             ProtectionJudgementBuff, PurityBuff, Natarmor2,
                                                                             ShakeItOff, combatcasting, dodge, banefeature, siezethemoment, ShieldWall);

            Linxia.AddFacts = Linxia.AddFacts.RemoveFromArray(BarkskinFixedBuff4);


            Linxia.Wisdom = 21;


            Linxia.Visual.Barks = library.Get<BlueprintUnitAsksList>("c19c6b9c2772526409b7cdb5f3364efe");




            var roguelevels = Linxia.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == inquisitorClass);
            var newAddClassLevels3 = roguelevels.CreateCopy();
            newAddClassLevels3.CharacterClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            newAddClassLevels3.Levels = 0;
            Linxia.ReplaceComponent(roguelevels, newAddClassLevels3);


            var inquisitorLevels = Linxia.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = inquisitorLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            newAddClassLevels.Levels = 15;
            var spell_list2 = newAddClassLevels.SelectSpells.AddToArray(heroism, fester, dispel, aid, shieldoffaith, divinepower, castigatemass, stoneskincommunal, prayer);
            newAddClassLevels.SelectSpells = spell_list2;
            Linxia.ReplaceComponent(inquisitorLevels, newAddClassLevels);










            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.heroism);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var brain = Linxia.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunalinquisitor, AiActions.castheroism, AiActions.castshieldoffaith,
                                                      AiActions.castcastigatemass,  AiActions.prayerbandit, AiActions.castdivinepowerdelay,AiActions.castfester,AiActions.dispel);



            Linxia.GetComponent<Experience>().CR = 15;



        }

        static void changeHellknightA()

        {


            var hellknight = library.Get<BlueprintUnit>("28bf148747e268241888b801df484562");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");

            hellknight.AddFacts = hellknight.AddFacts.AddToArray(disarmfeat, greatfortitude, lightningreflexes, disarm);
            hellknight.AddFacts = hellknight.AddFacts.RemoveFromArray(greatcleavefeat);
            hellknight.AddFacts = hellknight.AddFacts.RemoveFromArray(cleavefeat);




            hellknight.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); //heavy shield +1            


            var fighterLevels = hellknight.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            hellknight.ReplaceComponent(fighterLevels, newAddClassLevels);





            var brain = hellknight.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre);




            hellknight.GetComponent<Experience>().CR = 10;

        }

        static void changeHellknightB()

        {


            var hellknight = library.Get<BlueprintUnit>("827a6a80ec090554d93dd841b045c973");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");

            hellknight.AddFacts = hellknight.AddFacts.AddToArray(disarmfeat, greatfortitude, lightningreflexes, disarm);
            hellknight.AddFacts = hellknight.AddFacts.RemoveFromArray(greatcleavefeat);
            hellknight.AddFacts = hellknight.AddFacts.RemoveFromArray(cleavefeat);





            hellknight.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); //heavy shield +1            


            var fighterLevels = hellknight.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            hellknight.ReplaceComponent(fighterLevels, newAddClassLevels);





            var brain = hellknight.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre);




            hellknight.GetComponent<Experience>().CR = 10;

        }

        static void changeHellCasterA()

        {


            var hellknightcasterA = library.Get<BlueprintUnit>("3f75363e5c321bb40bfb14f25f1375e0");
            var eldritchClass = library.Get<BlueprintCharacterClass>("de52b73972f0ed74c87f8f6a8e20b542");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var ScorchingRay = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");


            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.AddToArray(lightningreflexes);




            var fighterLevels = hellknightcasterA.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == eldritchClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            hellknightcasterA.ReplaceComponent(fighterLevels, newAddClassLevels);


            var clericLevels3 = hellknightcasterA.ComponentsArray
              .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == wizardClass);
            var newclericLevels3 = clericLevels3.CreateCopy();
            newclericLevels3.Levels = 8;
            var spell_list3 = newclericLevels3.MemorizeSpells.AddToArray(mirrorimage,displacement);
            newclericLevels3.MemorizeSpells = spell_list3;
            hellknightcasterA.ReplaceComponent(clericLevels3, newclericLevels3);

            var clericLevels6 = hellknightcasterA.ComponentsArray
  .OfType<AddClassLevels>()
  .First(c => c.CharacterClass == eldritchClass);
            var newclericLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newclericLevels6.SelectSpells.AddToArray(mirrorimage, displacement);
            newclericLevels6.MemorizeSpells = spell_list6;
            hellknightcasterA.ReplaceComponent(clericLevels6, newclericLevels6);

            var clericLevels2 = hellknightcasterA.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == wizardClass);
            var newclericLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newclericLevels2.MemorizeSpells.RemoveFromArray(enervation);
            newclericLevels2.MemorizeSpells = spell_list2;
            hellknightcasterA.ReplaceComponent(clericLevels2, newclericLevels2);


            var clericLevels4 = hellknightcasterA.ComponentsArray
   .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == wizardClass);
            var newclericLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newclericLevels4.MemorizeSpells.RemoveFromArray(enervation);
            newclericLevels4.MemorizeSpells = spell_list4;
            hellknightcasterA.ReplaceComponent(clericLevels4, newclericLevels4);


            var hasteai = library.Get<BlueprintAiAction>("c52c9c1d503180e44aebf198445d1845");




            var brain = hellknightcasterA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(hasteai);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage,AiActions.displacementvordakai,AiActions.castshieldgoblin,AiActions.casthastebanditnecro);




            hellknightcasterA.GetComponent<Experience>().CR = 10;

        }

        static void changeHellCasterB()

        {


            var hellknightcasterA = library.Get<BlueprintUnit>("8c6b6209c0693c645b680e15a24889e4");
            var eldritchClass = library.Get<BlueprintCharacterClass>("de52b73972f0ed74c87f8f6a8e20b542");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var ScorchingRay = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");


            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.AddToArray(lightningreflexes);




            var fighterLevels = hellknightcasterA.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == eldritchClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            hellknightcasterA.ReplaceComponent(fighterLevels, newAddClassLevels);


            var clericLevels3 = hellknightcasterA.ComponentsArray
              .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == wizardClass);
            var newclericLevels3 = clericLevels3.CreateCopy();
            newclericLevels3.Levels = 8;
            var spell_list3 = newclericLevels3.MemorizeSpells.AddToArray(mirrorimage, displacement);
            newclericLevels3.MemorizeSpells = spell_list3;
            hellknightcasterA.ReplaceComponent(clericLevels3, newclericLevels3);

            var clericLevels6 = hellknightcasterA.ComponentsArray
  .OfType<AddClassLevels>()
  .First(c => c.CharacterClass == eldritchClass);
            var newclericLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newclericLevels6.SelectSpells.AddToArray(mirrorimage, displacement);
            newclericLevels6.MemorizeSpells = spell_list6;
            hellknightcasterA.ReplaceComponent(clericLevels6, newclericLevels6);

            var clericLevels2 = hellknightcasterA.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == wizardClass);
            var newclericLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newclericLevels2.MemorizeSpells.RemoveFromArray(enervation);
            newclericLevels2.MemorizeSpells = spell_list2;
            hellknightcasterA.ReplaceComponent(clericLevels2, newclericLevels2);


            var clericLevels4 = hellknightcasterA.ComponentsArray
   .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == wizardClass);
            var newclericLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newclericLevels4.MemorizeSpells.RemoveFromArray(enervation);
            newclericLevels4.MemorizeSpells = spell_list4;
            hellknightcasterA.ReplaceComponent(clericLevels4, newclericLevels4);


            var slowai = library.Get<BlueprintAiAction>("d67858e438dd8834f9e61a1cb1c592a6");

            


            var brain = hellknightcasterA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(slowai);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacementvordakai, AiActions.castshieldgoblin, AiActions.castslownird);




            hellknightcasterA.GetComponent<Experience>().CR = 10;

        }

        static void changeHellClericA()

        {


            var hellknightcasterA = library.Get<BlueprintUnit>("ccfc9b4cf166516489fbd514c2e93b93");
            
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var searinglight = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var mirrorimagebuff = library.Get<BlueprintBuff>("98dc7e7cc6ef59f4abe20c65708ac623");
            var barkskinbuff = library.Get<BlueprintBuff>("533592a86adecda4e9fd5ed37a028432");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var heroismbuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");

            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.AddToArray(lightningreflexes,heroismbuff,quicken);
            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.RemoveFromArray(displacementbuff);
            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.RemoveFromArray(mirrorimagebuff);
            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.RemoveFromArray(barkskinbuff);


            var clericLevels3 = hellknightcasterA.ComponentsArray
              .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == clericClass);
            var newclericLevels3 = clericLevels3.CreateCopy();
            newclericLevels3.Levels = 13;
            var spell_list3 = newclericLevels3.MemorizeSpells.AddToArray(searinglight, searinglight, stoneskin);
            newclericLevels3.MemorizeSpells = spell_list3;
            hellknightcasterA.ReplaceComponent(clericLevels3, newclericLevels3);



            var HoldPersonAiAction = library.Get<BlueprintAiAction>("aee2f46dfa119d44b8bd415d2f5ad339");



            var brain = hellknightcasterA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglighthellknight, AiActions.holdpersonhellknight,
                                                    AiActions.castshieldoffaithgorum, AiActions.castdivinepowerdelaypitax,AiActions.stoneskin);




            hellknightcasterA.GetComponent<Experience>().CR = 10;




        }

        static void changeHellClericB()

        {


            var hellknightcasterA = library.Get<BlueprintUnit>("4059c85ec18acec498a7af2986f33162");

            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var searinglight = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var mirrorimagebuff = library.Get<BlueprintBuff>("98dc7e7cc6ef59f4abe20c65708ac623");
            var barkskinbuff = library.Get<BlueprintBuff>("533592a86adecda4e9fd5ed37a028432");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var heroismbuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");

            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.AddToArray(lightningreflexes, heroismbuff,quicken);
            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.RemoveFromArray(displacementbuff);
            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.RemoveFromArray(mirrorimagebuff);
            hellknightcasterA.AddFacts = hellknightcasterA.AddFacts.RemoveFromArray(barkskinbuff);


            var clericLevels3 = hellknightcasterA.ComponentsArray
              .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == clericClass);
            var newclericLevels3 = clericLevels3.CreateCopy();
            newclericLevels3.Levels = 13;
            var spell_list3 = newclericLevels3.MemorizeSpells.AddToArray(searinglight, searinglight, stoneskin);
            newclericLevels3.MemorizeSpells = spell_list3;
            hellknightcasterA.ReplaceComponent(clericLevels3, newclericLevels3);



            var HoldPersonAiAction = library.Get<BlueprintAiAction>("aee2f46dfa119d44b8bd415d2f5ad339");



            var brain = hellknightcasterA.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglighthellknight, AiActions.holdpersonhellknight,
                                                    AiActions.castshieldoffaithgorum, AiActions.castdivinepowerdelaypitax, AiActions.stoneskin);




            hellknightcasterA.GetComponent<Experience>().CR = 10;




        }

        //River Pirates Camp

        static void changeriverbladepositivecleric()
        {



            var riverbladepositivecleric = library.Get<BlueprintUnit>("6dd71b3c034427e4fa0fa6ee8813a1c6");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var sm3 = library.Get<BlueprintAbility>("5d61dde0020bbf54ba1521f7ca0229dc");
            var summonelementalgreat = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            var chainsoflight = library.Get<BlueprintAbility>("f8cea58227f59c64399044a82c9735c4");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var burstofglory = library.Get<BlueprintAbility>("1bc83efec9f8c4b42a46162d72cbf494");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var sm4 = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            var banditchannelpositiveai = library.Get<BlueprintAiAction>("2fc0766638579a94ba19779197f509ad");
            var selectivechannel = library.Get<BlueprintFeature>("fd30c69417b434d47b6b03b9c1f568ff");
            var prayeraiaction = library.Get<BlueprintAiAction>("c21e11b437ff4474b80171fea11f7709");
            var heroismbuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");

            riverbladepositivecleric.AddFacts = riverbladepositivecleric.AddFacts.AddToArray(quicken,combatcasting,heroismbuff,improvedinitiative);

            riverbladepositivecleric.Wisdom = 19;


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladepositivecleric.AddFacts[0], "riverbladepositiveclericchanges", "602d860d7c8543abae70f95a1c0a1578");
            riverbladepositivecleric.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var riverbladepositiveclericfeature = library.Get<BlueprintFeature>("602d860d7c8543abae70f95a1c0a1578");



            var clericLevels = riverbladepositiveclericfeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == clericClass);
            var newclericLevels = clericLevels.CreateCopy();
            newclericLevels.Levels = 14;
            riverbladepositiveclericfeature.ReplaceComponent(clericLevels, newclericLevels);

            var clericLevels2 = riverbladepositiveclericfeature.ComponentsArray
                           .OfType<AddClassLevels>()
                           .First(c => c.CharacterClass == clericClass);
            var newclericLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newclericLevels2.MemorizeSpells.RemoveFromArray(sm3);
            newclericLevels2.MemorizeSpells = spell_list2;
            riverbladepositiveclericfeature.ReplaceComponent(clericLevels2, newclericLevels2);

            var clericLevels4 = riverbladepositiveclericfeature.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == clericClass);
            var newclericLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newclericLevels4.MemorizeSpells.RemoveFromArray(sm3);
            newclericLevels4.MemorizeSpells = spell_list4;
            riverbladepositiveclericfeature.ReplaceComponent(clericLevels4, newclericLevels4);

            var clericLevels5 = riverbladepositiveclericfeature.ComponentsArray
   .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == clericClass);
            var newclericLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newclericLevels5.MemorizeSpells.RemoveFromArray(divinefavor);
            newclericLevels5.MemorizeSpells = spell_list5;
            riverbladepositiveclericfeature.ReplaceComponent(clericLevels5, newclericLevels5);

            var clericLevels6 = riverbladepositiveclericfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newclericLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newclericLevels5.MemorizeSpells.RemoveFromArray(sm4);
            newclericLevels6.MemorizeSpells = spell_list6;
            riverbladepositiveclericfeature.ReplaceComponent(clericLevels6, newclericLevels6);

            var clericLevels3 = riverbladepositiveclericfeature.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == clericClass);
            var newclericLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newclericLevels3.MemorizeSpells.AddToArray(summonelementalgreat,umbralstrike,chainsoflight,chainsoflight,
                                                                         righteousmight,bullsmass,heal,flamestrike,flamestrike,burstofglory,searing_light,searing_light,divinepower);
            newclericLevels3.MemorizeSpells = spell_list3;
            riverbladepositiveclericfeature.ReplaceComponent(clericLevels3, newclericLevels3);


            var clone2 = library.CopyAndAdd<BlueprintBrain>((BlueprintBrain)riverbladepositivecleric.Brain, "RiverBladeClericBrain", "7793e4bec66b482281208e47aff2c264");
            riverbladepositivecleric.Brain = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);


            var brain = riverbladepositivecleric.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(banditchannelpositiveai);
            brain.Actions = brain.Actions.RemoveFromArray(prayeraiaction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglightbandit, AiActions.healspell, 
                                                    AiActions.castshieldoffaithgorum, AiActions.righteousmightbandit, 
                                                    AiActions.flamestrikebandit, AiActions.prayerbandit,
                                                    AiActions.summonelementalgreatfire,AiActions.chainsoflight,AiActions.castburstofglory,AiActions.umbral_strike,AiActions.divine_power_first);


            riverbladepositivecleric.GetComponent<Experience>().CR = 9;

        }

        static void changeriverbladefightermelee()

        {


            var riverbladefightermelee = library.Get<BlueprintUnit>("1d3635f4e5ede9043a8fee43163cb490");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");

            riverbladefightermelee.AddFacts = riverbladefightermelee.AddFacts.AddToArray(disarmfeat, greatfortitude, lightningreflexes, disarm);
            riverbladefightermelee.AddFacts = riverbladefightermelee.AddFacts.RemoveFromArray(greatcleavefeat);
            riverbladefightermelee.AddFacts = riverbladefightermelee.AddFacts.RemoveFromArray(cleavefeat);

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladefightermelee.AddFacts[0], "riverbladefightermeleechanges", "eff2e10ec2e94ddca45de8b99e67781b");
            riverbladefightermelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var riverbladefightermeleeFeature = library.Get<BlueprintFeature>("eff2e10ec2e94ddca45de8b99e67781b");




            riverbladefightermelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("193972650bc0e40409a6773e924ad612"); //Longsword+2
            riverbladefightermelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("d41ea649a1054b647aafc5b2cb4f8543"); //heavy shield +2
            riverbladefightermelee.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1


            var fighterLevels = riverbladefightermeleeFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            riverbladefightermeleeFeature.ReplaceComponent(fighterLevels, newAddClassLevels);





            var brain = riverbladefightermelee.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre);




            riverbladefightermelee.GetComponent<Experience>().CR = 9;

        }

        static void changeriverbladeranged()

        {


            var riverbladeranged = library.Get<BlueprintUnit>("6370e5f5306c2db45bc2e61aa248b2e7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");

            riverbladeranged.AddFacts = riverbladeranged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeranged.AddFacts[0], "riverbladerangedchanges", "4844ed83b8d945b4b125608cdd79a7f6");
            riverbladeranged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var riverbladerangedFeature = library.Get<BlueprintFeature>("4844ed83b8d945b4b125608cdd79a7f6");


            riverbladeranged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            riverbladeranged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = riverbladerangedFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            riverbladerangedFeature.ReplaceComponent(fighterLevels, newAddClassLevels);



            riverbladeranged.GetComponent<Experience>().CR = 9;

        }

        static void changeriverbladealchemist()
        {



            var riverbladealchemist = library.Get<BlueprintUnit>("cb3826024cc0e8947adc6083c6e5e54d");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var ExplosiveBombsFeature = library.Get<BlueprintFeature>("1d0e812131f345742adca6431d5bc4fe");
            var ExplosiveBombsBuff = library.Get<BlueprintBuff>("63063a8ab91bcbc44a13294227580e84");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            var greaterCogintell = library.Get<BlueprintAbility>("7fe18aed4a7a8f44289d1b262f432c16");
            var greaterCogintellbuff = library.Get<BlueprintBuff>("1c2fdba3b33dacd41afd5b74d84c7332");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var BanditAlchemistFeatureListLevel9 = library.Get<BlueprintFeature>("1d0f38d8f1f16b04784450a57e563ee6");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var BreathWeaponBomb = library.Get<BlueprintAbility>("17041de68a89a5f4b92889c3ed475c00");




            riverbladealchemist.AddFacts = riverbladealchemist.AddFacts.AddToArray(quicken, combatcasting,
                                                                                    ExplosiveBombsFeature, fastbombbuff,
                                                                                    chokebomb, greaterCogintell, greaterCogintellbuff, BreathWeaponBomb);




            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladealchemist.AddFacts[0], "riverbladealchemistchanges", "52d7e1f389324330a0887885a1c7ebef");
            riverbladealchemist.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditAlchemistFeatureListLevel9.GetComponent<AddFacts>().Facts[0], "riverbladealchemistSpellsNew", "81357a5d7671448da7034f741023dd07");
            BanditAlchemistFeatureListLevel9.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var riverbladealchemistfeature = library.Get<BlueprintFeature>("52d7e1f389324330a0887885a1c7ebef");

            var riverbladealchemistSpellsNew = library.Get<BlueprintFeature>("81357a5d7671448da7034f741023dd07");



            var alchemistLevels = riverbladealchemistfeature.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste, stoneskincommunal,  heroism);
            newAddClassLevels.MemorizeSpells = spell_list;
            riverbladealchemistfeature.ReplaceComponent(alchemistLevels, newAddClassLevels);



            var AlchemistLevels2 = riverbladealchemistSpellsNew.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == alchemistClass);
            var newbardLevels2 = AlchemistLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(haste, stoneskincommunal,  heroism);
            newbardLevels2.Spells = spell_list2;
            riverbladealchemistSpellsNew.ReplaceComponent(AlchemistLevels2, newbardLevels2);

            var alchemistLevels5 = riverbladealchemistfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels5 = alchemistLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(haste, stoneskincommunal,  heroism);
            newAddClassLevels5.SelectSpells = spell_list5;
            riverbladealchemistfeature.ReplaceComponent(alchemistLevels5, newAddClassLevels5);



            riverbladealchemist.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2
            riverbladealchemist.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);


            var brain = riverbladealchemist.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste, AiActions.castdisplacementgoblin, AiActions.throwchokebomb,
                                                    AiActions.stoneskincommunalsprig, AiActions.castinvisibilitygreater, AiActions.castheroism, AiActions.usebreathbomb, AiActions.displacementvordakai);



            riverbladealchemist.GetComponent<Experience>().CR = 9;

        }

        static void changeriverbladeroguemelee()

        {


            var riverbladeroguemelee = library.Get<BlueprintUnit>("66fe448be7dd2fb42a3d7657055d1cf6");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var CombatReflexes = library.Get<BlueprintFeature>("0f8939ae6f220984e8fb568abbdfba95");
            var DirtyTrickSickenedAction = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");
            var doubledebiliation = library.Get<BlueprintFeature>("dd699394df0ef8847abba26038333f02");
            var disorientedability = library.Get<BlueprintBuff>("6339eac5bdcef1747ac46885d2cf4e25");
            var bewilderedability = library.Get<BlueprintBuff>("116ee72b2149f4d44a330296a7e42d13");
            


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeroguemelee.AddFacts[0], "riverbladeroguemeleechanges", "f8f718412e4847c9ab5e54bbd4171386");
            riverbladeroguemelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var riverbladeroguemeleefeature = library.Get<BlueprintFeature>("f8f718412e4847c9ab5e54bbd4171386");




                var rogueLevels = riverbladeroguemeleefeature.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == rogueClass);
                var newAddClassLevels2 = rogueLevels.CreateCopy();
                newAddClassLevels2.Levels = 14;
            riverbladeroguemeleefeature.ReplaceComponent(rogueLevels, newAddClassLevels2);



            riverbladeroguemelee.AddFacts = riverbladeroguemelee.AddFacts.AddToArray(improvedevasion, dirtytrick, CombatReflexes, doubledebiliation, disorientedability, improvedinitiative,bewilderedability);




            riverbladeroguemelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4607f83de16245844acb4596fc797147"); //dagger +2
            riverbladeroguemelee.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("4607f83de16245844acb4596fc797147"); //dagger +2
            riverbladeroguemelee.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1

            riverbladeroguemelee.GetComponent<Experience>().CR = 9;

                var brain = riverbladeroguemelee.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);


            
        }

        static void changeriverbladebard()
        {

            var riverbladeBard = library.Get<BlueprintUnit>("063e8f0e64d9b8d41a6a60bf5f13145c");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var riverbladeBardfeaturelist = library.Get<BlueprintFeature>("b626db0c7f8d42d4e9cc0235f69724b5");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeBard.AddFacts[0], "riverbladeBardnewlist", "7cd522cc85b34d5c894e324c82202448");
            riverbladeBard.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeBardfeaturelist.GetComponent<AddFacts>().Facts[0], "riverbladeBardSpellListNew", "47883df38ac2407fb863791f15bd0ac2");
            riverbladeBardfeaturelist.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var riverbladeBardfeaturenewlist = library.Get<BlueprintFeature>("7cd522cc85b34d5c894e324c82202448");
            var riverbladeBardSpellListNew = library.Get<BlueprintFeature>("47883df38ac2407fb863791f15bd0ac2");

            var bardLevels = riverbladeBardfeaturenewlist.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement,kishout,freedomofmovement,heroism);
            newAddClassLevels.SelectSpells = spell_list;
            riverbladeBardfeaturenewlist.ReplaceComponent(bardLevels, newAddClassLevels);

            var bardLevels2 = riverbladeBardSpellListNew.ComponentsArray
            .OfType<LearnSpells>()
            .First(c => c.CharacterClass == bardClass);
            var newbardLevels2 = bardLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(mirrorimage, shout, displacement,kishout,freedomofmovement,heroism);
            newbardLevels2.Spells = spell_list2;
            riverbladeBardSpellListNew.ReplaceComponent(bardLevels, newAddClassLevels);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            riverbladeBard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2





            riverbladeBard.AddFacts = riverbladeBard.AddFacts.AddToArray(quicken);


            var brain = riverbladeBard.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(hideouslaughterai);
            brain.Actions = brain.Actions.RemoveFromArray(slowai);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout,
                                                     AiActions.casthaste, AiActions.hideouslaughternixie, AiActions.castgoodhope, AiActions.castheroism, AiActions.castslow,AiActions.castfreedomofmovement,AiActions.castkishout);

            riverbladeBard.GetComponent<Experience>().CR = 9;

        }

        static void changeriverbladenecro()
        {
            var riverbladenecro = library.Get<BlueprintUnit>("83c3c74817294c64fa04d2e871b22439");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var BanditNecromancerFeatureListLevel7 = library.Get<BlueprintFeature>("984e04d78ad20d14a965f7aabccb8900");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var fear = library.Get<BlueprintAbility>("d2aeac47450c76347aebbc02e4f463e0");
            var blindness = library.Get<BlueprintAbility>("46fd02ad56c35224c9c91c88cd457791");
            var holdperson = library.Get<BlueprintAbility>("c7104f7526c4c524f91474614054547e");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var blindnessaiaction = library.Get<BlueprintAiAction>("8919ec26e5eec864cbfdc8fa018f7b2e");
            var CauseFearAiAction = library.Get<BlueprintAiAction>("650e0cf00f552744e841bf9cc578ba34");
            var phantasmalputrification = library.Get<BlueprintAbility>("1f2e6019ece86d64baa5effa15e81ecc");
            var fingerofdeath = library.Get<BlueprintAbility>("6f1dcf6cfa92d1948a740195707c0dbe");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");

        riverbladenecro.AddFacts = riverbladenecro.AddFacts.AddToArray(quicken);



            riverbladenecro.Intelligence = 20;


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladenecro.AddFacts[0], "riverbladenecroFeature", "98690a0cbd0c4b5f8a28d61887617f1d");
            riverbladenecro.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditNecromancerFeatureListLevel7.GetComponent<AddFacts>().Facts[1], "riverbladenecroSpellListnew", "d3efee6939004703b6cab4b156c634ed");
            BanditNecromancerFeatureListLevel7.GetComponent<AddFacts>().Facts[1] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var riverbladenecrofeature = library.Get<BlueprintFeature>("98690a0cbd0c4b5f8a28d61887617f1d");
            var riverbladenecrospells = library.Get<BlueprintFeature>("d3efee6939004703b6cab4b156c634ed");


            var wizardLevels = riverbladenecrofeature.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            riverbladenecrofeature.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels2 = riverbladenecrofeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(coneofcold, coneofcold, haste, mirrorimage, displacement, boneshatter, fear, 
                                                                           holdperson, holdperson, boneshaker, magicmissle, magicmissle,bansheeblast,bansheeblast,fingerofdeath,phantasmalputrification, holdmonster, holdmonster);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            riverbladenecrofeature.ReplaceComponent(wizardLevels2, newAddClassLevels2);

            var clericLevels3 = riverbladenecrofeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.SelectSpells.AddToArray(coneofcold, coneofcold, haste, displacement, boneshatter, fear, holdperson, holdperson,
                                                                         mirrorimage, boneshaker, magicmissle, magicmissle, bansheeblast, bansheeblast, fingerofdeath, phantasmalputrification, holdmonster, holdmonster);
            newAddClassLevels3.SelectSpells = spell_list3;
            riverbladenecrofeature.ReplaceComponent(clericLevels3, newAddClassLevels3);

            var clericLevels4 = riverbladenecrofeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(vampirictouch);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            riverbladenecrofeature.ReplaceComponent(clericLevels4, newAddClassLevels4);

            var clericLevels7 = riverbladenecrofeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(blindness);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            riverbladenecrofeature.ReplaceComponent(clericLevels7, newAddClassLevels7);

            var clericLevelsA = riverbladenecrofeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevelsA = clericLevelsA.CreateCopy();
            var spell_listA = newAddClassLevels7.MemorizeSpells.RemoveFromArray(blindness);
            newAddClassLevelsA.MemorizeSpells = spell_listA;
            riverbladenecrofeature.ReplaceComponent(clericLevelsA, newAddClassLevelsA);

            var clericLevels8 = riverbladenecrofeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels8 = clericLevels8.CreateCopy();
            var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(enervation);
            newAddClassLevels8.MemorizeSpells = spell_list8;
            riverbladenecrofeature.ReplaceComponent(clericLevels8, newAddClassLevels8);

            var clericLevels9 = riverbladenecrofeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels9 = clericLevels9.CreateCopy();
            var spell_list9 = newAddClassLevels9.MemorizeSpells.RemoveFromArray(enervation);
            newAddClassLevels9.MemorizeSpells = spell_list9;
            riverbladenecrofeature.ReplaceComponent(clericLevels9, newAddClassLevels9);



            var clericLevels5 = riverbladenecrospells.ComponentsArray
.OfType<LearnSpells>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.Spells.RemoveFromArray(enervation);
            newAddClassLevels5.Spells = spell_list5;
            riverbladenecrospells.ReplaceComponent(clericLevels5, newAddClassLevels5);

            var clericLevels6 = riverbladenecrospells.ComponentsArray
.OfType<LearnSpells>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.Spells.AddToArray(haste, displacement, mirrorimage, coneofcold, boneshaker, magicmissle, bansheeblast, fingerofdeath, phantasmalputrification, holdmonster);
            newAddClassLevels6.Spells = spell_list6;
            riverbladenecrospells.ReplaceComponent(clericLevels6, newAddClassLevels6);


            riverbladenecro.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2

            riverbladenecro.GetComponent<Experience>().CR = 9;


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var brain = riverbladenecro.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(blindnessaiaction);
            brain.Actions = brain.Actions.RemoveFromArray(CauseFearAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldbloodmoon, AiActions.displacementvordakai,
                                                     AiActions.casthastebanditnecro, AiActions.magicmissledelay,
                                                     AiActions.castboneshaker, AiActions.castboneshatter,
                                                     AiActions.mirrorimage, AiActions.castfearwitch, AiActions.castblindness, AiActions.castcausefeardelay,AiActions.castholdmonster,
                                                     AiActions.castphantasmalputrificationghostmage,AiActions.bansheeblastghostmage,AiActions.castfingerofdeathvordakai);



        }

        static void changeRenshalaVascari()

        {


            var RenshalaVascari = library.Get<BlueprintUnit>("d11375d8192bdc5438071faef8f929af");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greaterspecialfalchion = library.Get<BlueprintFeature>("2a228f8230319cb4a93bc965804d3d97");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");

            RenshalaVascari.AddFacts = RenshalaVascari.AddFacts.AddToArray(greatfortitude, lightningreflexes, improvedinitiative, greaterspecialfalchion);



            RenshalaVascari.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2a99da2fe47c29b489ddd19bbd030a56"); //Flaming Flachion +3
            RenshalaVascari.Body.Armor = library.Get<BlueprintItemArmor>("ce0076c7408f10741950cec394767b75"); //Half Plate +2


            var fighterLevels = RenshalaVascari.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 16;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(powerattackfeature);

            }
            RenshalaVascari.ReplaceComponent(fighterLevels, newAddClassLevels);





            var brain = RenshalaVascari.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);




            RenshalaVascari.GetComponent<Experience>().CR = 11;

        }

        //Pitax Trolls

        static void updateTrollGuard()
        {


            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var TrollGuard = library.Get<BlueprintUnit>("95f5cde9458d6f0439a6c9b0753667cd");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");



           TrollGuard.Strength = 24;

           TrollGuard.Dexterity = 18;

           TrollGuard.Constitution = 24;


            var humanoidLevels = TrollGuard.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 7;
            TrollGuard.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var fighterLevels = TrollGuard.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == fighterClass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 8;
            TrollGuard.ReplaceComponent(fighterLevels, newfighterLevels);

           TrollGuard.Body.Armor = library.Get<BlueprintItemArmor>("ba780a9c1e5b0304892bd2bc0c22fe4d"); //Full plate +1
           TrollGuard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw
           TrollGuard.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw


            TrollGuard.GetComponent<Experience>().CR = 12;
        }

        static void updateTrollGuardFerocious()
        {


            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var TrollGuard = library.Get<BlueprintUnit>("b98735a1737ae494dbe5cbeca1c7c083");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");



            TrollGuard.Strength = 24;

            TrollGuard.Dexterity = 18;

            TrollGuard.Constitution = 24;


            var humanoidLevels = TrollGuard.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 7;
            TrollGuard.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var fighterLevels = TrollGuard.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == barbarianClass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 8;
            TrollGuard.ReplaceComponent(fighterLevels, newfighterLevels);

            TrollGuard.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate Standard +1
            TrollGuard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw
            TrollGuard.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw

            TrollGuard.GetComponent<Experience>().CR = 12;

        }

        static void updateTrollGuardVeteran()
        {


            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var TrollGuard = library.Get<BlueprintUnit>("77427e59d5e4d8b4db38f823295373a0");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");

            TrollGuard.AddFacts = TrollGuard.AddFacts.AddToArray(cornugon,powerattackfeature);

            TrollGuard.Skills.Diplomacy = 11;


            TrollGuard.Strength = 28;

            TrollGuard.Dexterity = 18;

            TrollGuard.Constitution = 27;


            var humanoidLevels = TrollGuard.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 7;
            TrollGuard.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var fighterLevels = TrollGuard.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == fighterClass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 10;
            TrollGuard.ReplaceComponent(fighterLevels, newfighterLevels);

            TrollGuard.Body.Armor = library.Get<BlueprintItemArmor>("ba780a9c1e5b0304892bd2bc0c22fe4d"); //Full plate +1
            TrollGuard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw
            TrollGuard.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw

            TrollGuard.GetComponent<Experience>().CR = 14;

        }

        static void updateTrollGuardFerociousBerserk()
        {


            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var TrollGuard = library.Get<BlueprintUnit>("e8ea053d1024b06429710a9fff58ed39");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");
            var BeastTotem = library.Get<BlueprintFeature>("c085888db293f2741b881cc989a2ab14");


            TrollGuard.Strength = 28;

            TrollGuard.Dexterity = 18;

            TrollGuard.Constitution = 27;

            TrollGuard.AddFacts = TrollGuard.AddFacts.AddToArray(BeastTotem);

            var humanoidLevels = TrollGuard.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 7;
            TrollGuard.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var fighterLevels = TrollGuard.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == barbarianClass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 10;
            TrollGuard.ReplaceComponent(fighterLevels, newfighterLevels);

            TrollGuard.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate Standard +1
            TrollGuard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw
            TrollGuard.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw

            TrollGuard.GetComponent<Experience>().CR = 14;
        }

        static void updateTrollGuardVeteranElite()
        {


            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var TrollGuard = library.Get<BlueprintUnit>("d669474ae4e2233449f5b007f7c98995");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");


            TrollGuard.AddFacts = TrollGuard.AddFacts.AddToArray(cornugon,improvedinitiative,powerattackfeature);

            TrollGuard.Skills.Diplomacy = 13;





            var humanoidLevels = TrollGuard.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 7;
            TrollGuard.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var fighterLevels = TrollGuard.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == fighterClass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 12;
            TrollGuard.ReplaceComponent(fighterLevels, newfighterLevels);

            TrollGuard.Body.Armor = library.Get<BlueprintItemArmor>("61787c56c01996f4c82866aca8fb0187"); //Full plate +2
            TrollGuard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw
            TrollGuard.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw

            TrollGuard.GetComponent<Experience>().CR = 16;

        }

        static void updateTrollGuardFerociousBerserkElite()
        {


            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var TrollGuard = library.Get<BlueprintUnit>("5b0dbed102db85846ade09ee0e11c3e5");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");
            var BeastTotem = library.Get<BlueprintFeature>("c085888db293f2741b881cc989a2ab14");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");

       

            TrollGuard.AddFacts = TrollGuard.AddFacts.AddToArray(BeastTotem,improvedinitiative);

            var humanoidLevels = TrollGuard.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 7;
            TrollGuard.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var fighterLevels = TrollGuard.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == barbarianClass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 12;
            TrollGuard.ReplaceComponent(fighterLevels, newfighterLevels);

            TrollGuard.Body.Armor = library.Get<BlueprintItemArmor>("c77060ede0a983f4a8c7c47032ecf1ea"); //Breastplate Standard +2
            TrollGuard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw
            TrollGuard.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw

            TrollGuard.GetComponent<Experience>().CR = 16;
        }

        // The Menagerie

        static void updateDwarfMagus()
        {


            var MagusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var DwarfMagus = library.Get<BlueprintUnit>("66eae7f874edda341814e555ac4570cf");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var ImprovedCleavingFinish = library.Get<BlueprintFeature>("ffa1b373190af4f4db7a5501904a1983");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var shieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");

            DwarfMagus.AddFacts = DwarfMagus.AddFacts.AddToArray(dimensionstrikefeat, quicken, catsgracebuff, electricalfeat,firebrandbuff);







            var magusLevels = DwarfMagus.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == MagusClass);
            var newmagusLevels = magusLevels.CreateCopy();
            newmagusLevels.Levels = 17;
            DwarfMagus.ReplaceComponent(magusLevels, newmagusLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);

            var magusLevels2 = DwarfMagus.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == MagusClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(frigidtouch, frigidtouch, frigidtouch, displacement,
                                                                             mirrorimage, shockinggrasp, shockinggrasp, shockinggrasp,
                                                                             haste, phantasmalkiller, vampirictouch, catsgrace, shield,chainlightning,firesnake,firesnake);
            newAddClassLevels2.MemorizeSpells = spell_list;
            DwarfMagus.ReplaceComponent(magusLevels2, newAddClassLevels2);



            var magusLevels4 = DwarfMagus.ComponentsArray
     .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == MagusClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(frigidtouch, displacement, shockinggrasp, phantasmalkiller, haste, vampirictouch, mirrorimage, firesnake, firesnake, catsgrace, shield,chainlightning);
            newAddClassLevels4.SelectSpells = spell_list4;
            DwarfMagus.ReplaceComponent(magusLevels4, newAddClassLevels4);


            DwarfMagus.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("57898b7567742fb458a5e57d112c19ec"); //Warhammer +3





            var DwarfMagus_StoneskinAiAction = library.Get<BlueprintAiAction>("d74507e7d832fe9458ca318d23ae9d42");
            var DwarfMagus_VampiricSHieldAiAction = library.Get<BlueprintAiAction>("b78910fdd5ba12f47a1f6f70f96e0e88");
            var DwarfMagus_ShockingGraspAiAction = library.Get<BlueprintAiAction>("eda58f5cc478d274c9c090bbb2eb775d");
            var DwarfMagus_ShieldAiAction = library.Get<BlueprintAiAction>("8ca5216411c7ba645bab8d636918c419");
            var DwarfMagus_MirrorImageAiAction = library.Get<BlueprintAiAction>("be2cd95ea60b510429884cebcdd33263");
            var DwarfMagus_GreaterInvisibilityAiAction = library.Get<BlueprintAiAction>("414d33fc5b9ce294486c5ac15f763f22");
            var DwarfMagus_DisplacementAiAction = library.Get<BlueprintAiAction>("cac0802d7407aae4ea26569f19e43e2b");
            var DwarfMagus_TouchOfFatigueAiAction = library.Get<BlueprintAiAction>("a67694c12edebe6468cf7d9332bb1c94");
            var DwarfMagus_ArcanePoolAiAction = library.Get<BlueprintAiAction>("c3cac76c85decd6408f7ee04a0cb7d50");
            var DwarfMagus_AccurateStrikeAiAction = library.Get<BlueprintAiAction>("18bf5f18d2aa123499e14ae4cc5e1d44");


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            DwarfMagus.Brain.Actions = new_actions;


            var brain = DwarfMagus.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_StoneskinAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_VampiricSHieldAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_ShockingGraspAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_ShieldAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_MirrorImageAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_GreaterInvisibilityAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_DisplacementAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_TouchOfFatigueAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_ArcanePoolAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_AccurateStrikeAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(DwarfMagus_AccurateStrikeAiAction);


            brain.Actions = brain.Actions.AddToArray(AiActions.castfrigidtouchmagus, AiActions.castphantasmalkillermagus, AiActions.castvampirictouch,
                                                    AiActions.mirrorimagecyclop, AiActions.displacementvordakai, AiActions.castcatsgrace, 
                                                    AiActions.castshockgrasp, AiActions.casthaste, AiActions.castshieldsprig, AiActions.castinvisibilitygreater,
                                                    AiActions.castchainlightningbloodmoon,AiActions.castfiresnake,AiActions.castvampiricshadowshield);


           

        }

        static void updateNirdCottenrople()
        {


            var WizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var NirdCottenrople = library.Get<BlueprintUnit>("469318b742bf19540926eb5aec7a9fff");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var dragonsbreath = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");

            NirdCottenrople.AddFacts = NirdCottenrople.AddFacts.AddToArray(quicken);







            var wizardLevels = NirdCottenrople.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == WizardClass);
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.Levels = 17;
            NirdCottenrople.ReplaceComponent(wizardLevels, newwizardLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);

            var magusLevels3 = NirdCottenrople.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels3 = magusLevels3.CreateCopy();
            var spell_list2 = newAddClassLevels3.SelectSpells.AddToArray(displacement, mirrorimage, haste, shield, hellfireray,greaterdispel, stoneskincommunal,slow,dragonsbreath);
            newAddClassLevels3.SelectSpells = spell_list2;
            NirdCottenrople.ReplaceComponent(magusLevels3, newAddClassLevels3);

            var magusLevels2 = NirdCottenrople.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(displacement, mirrorimage, haste,  shield, hellfireray, hellfireray,greaterdispel,greaterdispel, stoneskincommunal,slow,dragonsbreath);
            newAddClassLevels2.MemorizeSpells = spell_list;
            NirdCottenrople.ReplaceComponent(magusLevels2, newAddClassLevels2);

            var magusLevels4 = NirdCottenrople.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(DominatePerson);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            NirdCottenrople.ReplaceComponent(magusLevels4, newAddClassLevels4);



            var NirdCottenropple_DisplacementAiAction = library.Get<BlueprintAiAction>("f8b24ea30791ab04cbb017c3fac970ec");
            var NirdCottenropple_HideousLaughterAiAction = library.Get<BlueprintAiAction>("7f9ab3b97459a654f85835d9634dd098");

           

            var brain = NirdCottenrople.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(NirdCottenropple_DisplacementAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(NirdCottenropple_HideousLaughterAiAction);
            brain.Actions = brain.Actions.AddToArray(
                                                    AiActions.mirrorimagecyclop, AiActions.displacementvordakai, 
                                                     AiActions.casthastenird, AiActions.castshieldsprig, 
                                                    AiActions.stoneskincommunalnird, AiActions.hellfire_raynird,AiActions.greaterdispelnird, AiActions.castslownird, AiActions.hideouslaughternird,AiActions.dragonsbreathblacknird);


        }

        //River Blades Camp (Bandits)

        static void changeriverbladetransmuter()
        {



            var riverbladestransmuter = library.Get<BlueprintUnit>("788603e0561b435eacdcaf510efb78cb");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var BanditTransmuterFeatureListLevel7 = library.Get<BlueprintFeature>("8bcac5e1bd4f254438fa8797337137a6");
            var ReducePersonMass = library.Get<BlueprintAbility>("2427f2e3ca22ae54ea7337bbab555b16");
            var EnlargePersonMass = library.Get<BlueprintAbility>("66dc49bf154863148bd217287079245e");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var summongreatrock = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");
            var bullsstrength = library.Get<BlueprintAbility>("4c3d08935262b6544ae97599b3a9556d");
            var enlargeperson = library.Get<BlueprintAbility>("c60969e7f264e6d4b84a1499fdcf9039");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");


            riverbladestransmuter.AddFacts = riverbladestransmuter.AddFacts.AddToArray(quicken, combatcasting );

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladestransmuter.AddFacts[0], "RiverBladeTransmuterFeatures", "0ed35cf630884e5db43ca51292ea7b25");
            riverbladestransmuter.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditTransmuterFeatureListLevel7.GetComponent<AddFacts>().Facts[1], "riverbladetransmuterSpellListnew", "60b9b16af6e342169a3d50b1eb11e61b");
            BanditTransmuterFeatureListLevel7.GetComponent<AddFacts>().Facts[1] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var riverbladetransmuterfeature = library.Get<BlueprintFeature>("0ed35cf630884e5db43ca51292ea7b25");
            var riverbladetransmuterspells = library.Get<BlueprintFeature>("60b9b16af6e342169a3d50b1eb11e61b");


            var wizardLevels = riverbladetransmuterfeature.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == wizardClass);
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.Levels = 16;
            riverbladetransmuterfeature.ReplaceComponent(wizardLevels, newwizardLevels);

            var wizardLevels2 = riverbladetransmuterfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(displacement,summongreatrock,bullsmass,chainlightning,coldicestrike,coldicestrike, balefulpolymorph,
                                                                           greaterdispel,stoneskincommunal,holdmonster,holdmonster,controlledfireball,controlledfireball, controlledfireball,magicmissle, magicmissle, magicmissle, magicmissle, burningarc, burningarc, burningarc);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            riverbladetransmuterfeature.ReplaceComponent(wizardLevels2, newAddClassLevels2);

            var clericLevels3 = riverbladetransmuterfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.SelectSpells.AddToArray(displacement, summongreatrock,bullsmass, chainlightning, coldicestrike, greaterdispel,stoneskincommunal,holdmonster, balefulpolymorph,controlledfireball, magicmissle,burningarc, burningarc, burningarc, magicmissle);
            newAddClassLevels3.SelectSpells = spell_list3;
            riverbladetransmuterfeature.ReplaceComponent(clericLevels3, newAddClassLevels3);



            var clericLevels6 = riverbladetransmuterspells.ComponentsArray
.OfType<LearnSpells>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.Spells.AddToArray(displacement, summongreatrock,bullsmass, chainlightning, coldicestrike, greaterdispel,stoneskincommunal,holdmonster, balefulpolymorph,controlledfireball, magicmissle,burningarc);
            newAddClassLevels6.Spells = spell_list6;
            riverbladetransmuterspells.ReplaceComponent(clericLevels6, newAddClassLevels6);



            var clericLevels4 = riverbladetransmuterfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(EnlargePersonMass);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            riverbladetransmuterfeature.ReplaceComponent(clericLevels4, newAddClassLevels4);

            var clericLevels7 = riverbladetransmuterfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(ReducePersonMass);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            riverbladetransmuterfeature.ReplaceComponent(clericLevels7, newAddClassLevels7);

            var clericLevels8 = riverbladetransmuterfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels8 = clericLevels8.CreateCopy();
            var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(bullsstrength);
            newAddClassLevels8.MemorizeSpells = spell_list8;
            riverbladetransmuterfeature.ReplaceComponent(clericLevels8, newAddClassLevels8);

            var clericLevels9 = riverbladetransmuterfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels9 = clericLevels9.CreateCopy();
            var spell_list9 = newAddClassLevels9.MemorizeSpells.RemoveFromArray(enlargeperson);
            newAddClassLevels9.MemorizeSpells = spell_list9;
            riverbladetransmuterfeature.ReplaceComponent(clericLevels9, newAddClassLevels9);

            var clericLevels10 = riverbladetransmuterfeature.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels10 = clericLevels10.CreateCopy();
            var spell_list10 = newAddClassLevels10.MemorizeSpells.RemoveFromArray(slow);
            newAddClassLevels10.MemorizeSpells = spell_list10;
            riverbladetransmuterfeature.ReplaceComponent(clericLevels10, newAddClassLevels10);




            riverbladestransmuter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2

            riverbladestransmuter.GetComponent<Experience>().CR = 7;


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            riverbladestransmuter.Brain.Actions = new_actions;

            var brain = riverbladestransmuter.Brain;
            brain.Actions = brain.Actions.AddToArray( AiActions.displacementvordakai, AiActions.castbullsmass,AiActions.castbalefulpolymorphwitch, 
                                                      AiActions.stoneskincommunal,AiActions.castcontrolledfireballtransmuter, AiActions.castgreaterdispellsister,
                                                     AiActions.casthastebanditnecro, AiActions.magicmissledelay, AiActions.castslowvordakai,
                                                     AiActions.mirrorimage,  AiActions.castholdmonster,
                                                     AiActions.summonelementalgreatearthtransmuter,AiActions.castenlargemasstransmuter,AiActions.coldicestrike,AiActions.castchainlightningbloodmoon,AiActions.castmagicmissletransmuterstrong,AiActions.burninarctransmuter);



        }

        static void changeCR8_BanditAlchemistLevel9()
        {



            var CR8_BanditAlchemistLevel9 = library.Get<BlueprintUnit>("a429b5a21a3a3e5469ff35c5300034ff");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var ExplosiveBombsFeature = library.Get<BlueprintFeature>("1d0e812131f345742adca6431d5bc4fe");
            var ExplosiveBombsBuff = library.Get<BlueprintBuff>("63063a8ab91bcbc44a13294227580e84");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            var greaterCogintell = library.Get<BlueprintAbility>("7fe18aed4a7a8f44289d1b262f432c16");
            var greaterCogintellbuff = library.Get<BlueprintBuff>("1c2fdba3b33dacd41afd5b74d84c7332");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var BanditAlchemistFeatureListLevel9 = library.Get<BlueprintFeature>("1d0f38d8f1f16b04784450a57e563ee6");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var BreathWeaponBomb = library.Get<BlueprintAbility>("17041de68a89a5f4b92889c3ed475c00");
            var preserveorgans = library.Get<BlueprintFeature>("76b4bb8e54f3f5c418f421684c76ef4e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
 

            CR8_BanditAlchemistLevel9.AddFacts = CR8_BanditAlchemistLevel9.AddFacts.AddToArray(quicken, combatcasting,
                                                                                    ExplosiveBombsFeature, fastbombbuff,
                                                                                    chokebomb, greaterCogintell, greaterCogintellbuff, BreathWeaponBomb,preserveorgans);




            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)CR8_BanditAlchemistLevel9.AddFacts[0], "CR8_BanditAlchemistLevel9changes", "855dab38ec7140c2aa1a386eec6843be");
            CR8_BanditAlchemistLevel9.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditAlchemistFeatureListLevel9.GetComponent<AddFacts>().Facts[0], "CR8_BanditAlchemistLevel9SpellsNew", "da67823c8411426aa574a65dfab71e3b");
            BanditAlchemistFeatureListLevel9.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            var riverbladealchemistfeature = library.Get<BlueprintFeature>("855dab38ec7140c2aa1a386eec6843be");

            var riverbladealchemistSpellsNew = library.Get<BlueprintFeature>("da67823c8411426aa574a65dfab71e3b");



            var alchemistLevels = riverbladealchemistfeature.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste,stoneskincommunal, heroism, heal);
            newAddClassLevels.MemorizeSpells = spell_list;
            riverbladealchemistfeature.ReplaceComponent(alchemistLevels, newAddClassLevels);



            var AlchemistLevels2 = riverbladealchemistSpellsNew.ComponentsArray
        .OfType<LearnSpells>()
          .First(c => c.CharacterClass == alchemistClass);
            var newbardLevels2 = AlchemistLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(haste,stoneskincommunal, heroism, heal);
            newbardLevels2.Spells = spell_list2;
            riverbladealchemistSpellsNew.ReplaceComponent(AlchemistLevels2, newbardLevels2);

            var alchemistLevels5 = riverbladealchemistfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels5 = alchemistLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(haste, heroism,stoneskincommunal, heal);
            newAddClassLevels5.SelectSpells = spell_list5;
            riverbladealchemistfeature.ReplaceComponent(alchemistLevels5, newAddClassLevels5);



            CR8_BanditAlchemistLevel9.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2
            CR8_BanditAlchemistLevel9.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);


            var brain = CR8_BanditAlchemistLevel9.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste, AiActions.castdisplacementgoblin, AiActions.throwchokebomb,
                                                    AiActions.stoneskincommunalsprig,AiActions.castinvisibilitygreater,AiActions.castheroism,AiActions.usebreathbomb,AiActions.displacementvordakai,AiActions.healspell);



            CR8_BanditAlchemistLevel9.GetComponent<Experience>().CR = 11;

            CR8_BanditAlchemistLevel9.GetComponent<AddTags>().UseInRandomEncounter = false;
            CR8_BanditAlchemistLevel9.GetComponent<AddTags>().UseInDungeon = false;

        }

        static void changeriverbladecampbard()
        {

            var riverbladeBard = library.Get<BlueprintUnit>("c68f8282016f417c896e8536759ccc45");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var riverbladeBardfeaturelist = library.Get<BlueprintFeature>("b626db0c7f8d42d4e9cc0235f69724b5");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeBard.AddFacts[0], "riverbladecampBardnewlist", "96f007945ccf4fd080d1503889e38f3f");
            riverbladeBard.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeBardfeaturelist.GetComponent<AddFacts>().Facts[0], "riverbladecampBardSpellListNew", "3ddd38d784b04d64b85ef8d10b7223b1");
            riverbladeBardfeaturelist.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var riverbladeBardfeaturenewlist = library.Get<BlueprintFeature>("96f007945ccf4fd080d1503889e38f3f");
            var riverbladeBardSpellListNew = library.Get<BlueprintFeature>("3ddd38d784b04d64b85ef8d10b7223b1");

            var bardLevels = riverbladeBardfeaturenewlist.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement, kishout, freedomofmovement,cacophonouscallmass,heroism);
            newAddClassLevels.SelectSpells = spell_list;
            riverbladeBardfeaturenewlist.ReplaceComponent(bardLevels, newAddClassLevels);

            var bardLevels2 = riverbladeBardSpellListNew.ComponentsArray
            .OfType<LearnSpells>()
            .First(c => c.CharacterClass == bardClass);
            var newbardLevels2 = bardLevels2.CreateCopy();
            var spell_list2 = newbardLevels2.Spells.AddToArray(mirrorimage, shout, displacement, kishout, freedomofmovement,cacophonouscallmass,heroism);
            newbardLevels2.Spells = spell_list2;
            riverbladeBardSpellListNew.ReplaceComponent(bardLevels, newAddClassLevels);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            riverbladeBard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2





            riverbladeBard.AddFacts = riverbladeBard.AddFacts.AddToArray(quicken);


            var brain = riverbladeBard.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(hideouslaughterai);
            brain.Actions = brain.Actions.RemoveFromArray(slowai);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.castgoodhope,
                                                     AiActions.casthaste, AiActions.hideouslaughternixie, AiActions.castheroism, AiActions.castslow, AiActions.castfreedomofmovement, AiActions.castkishout,AiActions.cacophonouscallmass);

            riverbladeBard.GetComponent<Experience>().CR = 11;

        }

        static void changeriverbladecamproguemelee()

        {


            var riverbladeroguemelee = library.Get<BlueprintUnit>("5aec1df0170f45d49ea41cccb7acd529");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var CombatReflexes = library.Get<BlueprintFeature>("0f8939ae6f220984e8fb568abbdfba95");
            var DirtyTrickSickenedAction = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");
            var doubledebiliation = library.Get<BlueprintFeature>("dd699394df0ef8847abba26038333f02");
            var disorientedability = library.Get<BlueprintBuff>("6339eac5bdcef1747ac46885d2cf4e25");
            var bewilderedability = library.Get<BlueprintBuff>("116ee72b2149f4d44a330296a7e42d13");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");



            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeroguemelee.AddFacts[0], "riverbladecamproguemeleechanges", "d35e583e5bb9491ca58293deeb10c53e");
            riverbladeroguemelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var riverbladeroguemeleefeature = library.Get<BlueprintFeature>("d35e583e5bb9491ca58293deeb10c53e");




            var rogueLevels = riverbladeroguemeleefeature.ComponentsArray
     .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels2 = rogueLevels.CreateCopy();
            newAddClassLevels2.Levels = 15;
            riverbladeroguemeleefeature.ReplaceComponent(rogueLevels, newAddClassLevels2);



            riverbladeroguemelee.AddFacts = riverbladeroguemelee.AddFacts.AddToArray(improvedevasion, dirtytrick, CombatReflexes, doubledebiliation, disorientedability, improvedinitiative, bewilderedability, blindfight, oppurtunist);




            riverbladeroguemelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4607f83de16245844acb4596fc797147"); //dagger +2
            riverbladeroguemelee.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("4607f83de16245844acb4596fc797147"); //dagger +2
            riverbladeroguemelee.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1

            riverbladeroguemelee.GetComponent<Experience>().CR = 11;

            var brain = riverbladeroguemelee.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);



        }

        static void changeriverbladecampfighterranged()

        {


            var riverbladeranged = library.Get<BlueprintUnit>("7bc81dc0338f4ff0a3096387c346857a");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");


            riverbladeranged.Constitution = 14;

            riverbladeranged.AddFacts = riverbladeranged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeranged.AddFacts[0], "riverbladecampfighterrangedchanges", "f67889496cb74d0d96512f9d7a97425c");
            riverbladeranged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var riverbladerangedFeature = library.Get<BlueprintFeature>("f67889496cb74d0d96512f9d7a97425c");


            riverbladeranged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            riverbladeranged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = riverbladerangedFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            riverbladerangedFeature.ReplaceComponent(fighterLevels, newAddClassLevels);



            riverbladeranged.GetComponent<Experience>().CR = 11;

        }

        static void changeriverbladecamprogueranged()

        {


            var riverbladeranged = library.Get<BlueprintUnit>("8fdb3247227544ef935d158e7293009a");
            var oldfeature = library.Get<BlueprintFeature>("8a0888bad61e3cd4680bc2addf8482e9");
            var newfeature = library.Get<BlueprintFeature>("5fff399cf89d4244eb2991f4c0d54cb7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");

            riverbladeranged.AddFacts = riverbladeranged.AddFacts.RemoveFromArray(oldfeature);
            riverbladeranged.AddFacts = riverbladeranged.AddFacts.AddToArray(newfeature);

            riverbladeranged.AddFacts = riverbladeranged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeranged.AddFacts[0], "riverbladecampfighterrangedtwochanges", "61bfdfdf85454767b664edeebc0dce77");
            riverbladeranged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var riverbladerangedFeature = library.Get<BlueprintFeature>("61bfdfdf85454767b664edeebc0dce77");


            riverbladeranged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            riverbladeranged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = riverbladerangedFeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            riverbladerangedFeature.ReplaceComponent(fighterLevels, newAddClassLevels);



            riverbladeranged.GetComponent<Experience>().CR = 11;

        }

        static void changepoisoner()
        {



            var poisoner = library.Get<BlueprintUnit>("bd244913d0edf2c4aa91243a334a98ce");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var ExplosiveBombsFeature = library.Get<BlueprintFeature>("1d0e812131f345742adca6431d5bc4fe");
            var ExplosiveBombsBuff = library.Get<BlueprintBuff>("63063a8ab91bcbc44a13294227580e84");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            var grandCogintell = library.Get<BlueprintAbility>("094c3a16cd6e1124ca873bb96fc336c5");
            var grandCogintellbuff = library.Get<BlueprintBuff>("8de52f7aa6052a0498875e0d834330af");
            var GreaterMutagenDexterityConstitutionBuff = library.Get<BlueprintBuff>("84ae955af09809b4ea31a2c719c68377");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var BanditAlchemistFeatureListLevel9 = library.Get<BlueprintFeature>("1d0f38d8f1f16b04784450a57e563ee6");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var BreathWeaponBomb = library.Get<BlueprintAbility>("17041de68a89a5f4b92889c3ed475c00");
            var preserveorgans = library.Get<BlueprintFeature>("76b4bb8e54f3f5c418f421684c76ef4e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var grenadier = library.Get<BlueprintArchetype>("6af888a7800b3e949a40f558ff204aae");
            var acidbomb = library.Get<BlueprintFeature>("1ee30ffd28843b84282b04e5d4e8bc7b");
            var acidbombbuff = library.Get<BlueprintBuff>("4e15565b830d4b841b59e701d3395371");
            var cursedbombs = library.Get<BlueprintFeature>("bf8f80f3a492e7946924e1cd9c4b0867");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var infusion = library.Get<BlueprintFeature>("57d5077b301ade749b840b0ea9230bb9");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");

        poisoner.AddFacts = poisoner.AddFacts.AddToArray(quicken, combatcasting,acidbomb,acidbombbuff, fastbombbuff, cursedbombs, grandCogintell, grandCogintellbuff, BreathWeaponBomb, preserveorgans,infusion);
            poisoner.AddFacts = poisoner.AddFacts.RemoveFromArray(GreaterMutagenDexterityConstitutionBuff);


            var alchemistLevels = poisoner.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            var archetype = newAddClassLevels.Archetypes.AddToArray(grenadier);
            newAddClassLevels.Archetypes = archetype;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste, stoneskincommunal, InvisibilityGreater, heroism, heal,freedomofmovement,trueseeing);
            newAddClassLevels.MemorizeSpells = spell_list;
            poisoner.ReplaceComponent(alchemistLevels, newAddClassLevels);


            var alchemistLevels2 = poisoner.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels2 = alchemistLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(haste, stoneskincommunal, InvisibilityGreater, heroism, heal,freedomofmovement,trueseeing);
            newAddClassLevels2.SelectSpells = spell_list2;
            poisoner.ReplaceComponent(alchemistLevels2, newAddClassLevels2);





            poisoner.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("8ee3176eb0ed29c418120b04dbb76aa9"); //Lightcrossbow +3
            poisoner.Body.Armor = library.Get<BlueprintItemArmor>("be26685bdebb2a94693d2378e0235ef3"); //Chainmail +2


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);


            var brain = poisoner.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste, AiActions.throwacidbombpoisoner, AiActions.castdisplacementgoblin, AiActions.throwcursedbombdeter,
                                                    AiActions.stoneskincommunalsprig, AiActions.castinvisibilitygreater, AiActions.castheroism, AiActions.usebreathbomb, AiActions.displacementvordakai, AiActions.healspell,AiActions.trueseeing);



            poisoner.GetComponent<Experience>().CR = 14;

            poisoner.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{poisoner.name}.name", "Zenvias the Vile"));


        }

        static void changeriverbladecampinquisitor()
        {



            var riverbladeinquisitor = library.Get<BlueprintUnit>("621a1133ee3c4eeca4548a7df5068cb2");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var inquisitorClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var BanditPositiveClericFeatureListLevel7 = library.Get<BlueprintFeature>("7e05ee6b9875c354aa88985490e64baf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var fester = library.Get<BlueprintAbility>("2dbe271c979d9104c8e2e6b42e208e32");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var aid = library.Get<BlueprintAbility>("03a9630394d10164a9410882d31572f0");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var ProtectionJudgementBuff = library.Get<BlueprintBuff>("99345ce7c0f8001438fee23db660d039");
            var PurityBuff = library.Get<BlueprintBuff>("fbc7fe386bceb354494b05736381c238");
            var JusticeJudgementBuff = library.Get<BlueprintBuff>("fc246eb29c8f95c449fd156759f421e9");
            var Natarmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var ShakeItOff = library.Get<BlueprintFeature>("6337b37f2a7c11b4ab0831d6780bce2a");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var WeaponFocusLongsword = library.Get<BlueprintFeature>("de132895bff199d4f98ceeea6c88c04e");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var banefeature = library.Get<BlueprintFeature>("a0571cc93916dcf498bcea611e9d5573");
            var coordinatedshot = library.Get<BlueprintFeature>("6c53965320604cfeb13d283afd147e09");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var castigatemass = library.Get<BlueprintAbility>("41236cf0e476d7043bc16a33a9f449bd");
            var siezethemoment = library.Get<BlueprintFeature>("1191ef3065e6f8e4f9fbe1b7e3c0f760");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var HammerTheGap = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var CombatReflexes = library.Get<BlueprintFeature>("7b64641c76ff4a744a2bce7f91a20f9a");
            var BlindFight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");
            var festermass = library.Get<BlueprintAbility>("52b8b14360a87104482b2735c7fc8606");
            var ShieldWall = library.Get<BlueprintFeature>("8976de442862f82488a4b138a0a89907");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");

            riverbladeinquisitor.AddFacts = riverbladeinquisitor.AddFacts.AddToArray(quicken, WeaponFocusLongsword,
                                                                             ProtectionJudgementBuff, JusticeJudgementBuff, PurityBuff, Natarmor2,
                                                                             ShakeItOff, combatcasting, dodge, banefeature, siezethemoment,ShieldWall);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)riverbladeinquisitor.AddFacts[0], "riverbladecampinquisitornewlist", "00386ffa416c44b0b992d48971da2c44");
            riverbladeinquisitor.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
               .Select(c => c.CreateCopy())
               .ToArray();

            var clone2 = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BanditPositiveClericFeatureListLevel7.GetComponent<AddFacts>().Facts[0], "riverbladecampinquisitorSpellListNew", "de400e95d86e4ebeaf85134b59f44672");
            BanditPositiveClericFeatureListLevel7.GetComponent<AddFacts>().Facts[0] = clone2;
            clone2.ComponentsArray = clone2.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var riverbladeinquisitorfeaturenewlist = library.Get<BlueprintFeature>("00386ffa416c44b0b992d48971da2c44");
            var riverbladeinquisitorSpellListNew = library.Get<BlueprintFeature>("de400e95d86e4ebeaf85134b59f44672");





            var inquisitorLevels = riverbladeinquisitorfeaturenewlist.ComponentsArray
            .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels = inquisitorLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f1a70d9e1b0b41e49874e1fa9052a1ce");
            newAddClassLevels.Levels = 17;
            riverbladeinquisitorfeaturenewlist.ReplaceComponent(inquisitorLevels, newAddClassLevels);


            var wizardLevels2 = riverbladeinquisitorfeaturenewlist.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == inquisitorClass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(heroism, fester, dispel, aid, shieldoffaith, divinepower, castigatemass, festermass, stoneskincommunal,righteousmight,prayer);
            newAddClassLevels2.SelectSpells = spell_list2;
            riverbladeinquisitorfeaturenewlist.ReplaceComponent(wizardLevels2, newAddClassLevels2);





            riverbladeinquisitor.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("68fbe8e38f215d2448ce7610e8d57a29"); //Longsword +3
            riverbladeinquisitor.Body.SecondaryHand = library.Get<BlueprintItemShield>("d41ea649a1054b647aafc5b2cb4f8543"); //heavy shield +2
            riverbladeinquisitor.Body.Armor = library.Get<BlueprintItemArmor>("c77060ede0a983f4a8c7c47032ecf1ea"); //Breastplate +2




            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.heroism);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var brain = riverbladeinquisitor.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunalinquisitor, AiActions.castheroism,  AiActions.castshieldoffaithdelay,
                                                     AiActions.castfestermass, AiActions.castcastigatemass,AiActions.righteousmightinquisitor,AiActions.prayerbandit,AiActions.castdivinepowerdelay);






            riverbladeinquisitor.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{riverbladeinquisitor.name}.name", "Tamia Huxley"));


        }

        static void changeIloraNaski()
        {



            var IloraNaski = library.Get<BlueprintUnit>("2774f691a8ad46c4781d6ff226e91a93");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var rangerClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var stormwalker = library.Get<BlueprintArchetype>("a330c05e484d98748a462acd43654a3a");
            var StormwalkerWeaponBuff = library.Get<BlueprintBuff>("f7eb6971aa7c81343937edffd2cfba0e");
            var StormwalkerWeaponBurstBuff = library.Get<BlueprintBuff>("ba8539dbb8408784ca21590bef7968e6");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var HurricaneBow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var AspectoftheFalcon = library.Get<BlueprintAbility>("7bdb6a9fb6b37614e96f155748ae50c6");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");

            IloraNaski.AddFacts = IloraNaski.AddFacts.AddToArray(quicken,StormwalkerWeaponBuff,StormwalkerWeaponBurstBuff,electricalfeat,pointblank,preciseshot,manyshot,rapidshot,rapidshotbuff,deadlyaim,deadlyaimbuff);



            

            var alchemistLevels = IloraNaski.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            var archetype = newAddClassLevels.Archetypes.AddToArray(stormwalker);
            newAddClassLevels.Archetypes = archetype;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(HurricaneBow,AspectoftheFalcon,barkskin);
            newAddClassLevels.MemorizeSpells = spell_list;
            IloraNaski.ReplaceComponent(alchemistLevels, newAddClassLevels);


            var alchemistLevels2 = IloraNaski.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels2 = alchemistLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(HurricaneBow, AspectoftheFalcon,barkskin);
            newAddClassLevels2.SelectSpells = spell_list2;
            IloraNaski.ReplaceComponent(alchemistLevels2, newAddClassLevels2);



           

            IloraNaski.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("426c900c0787c844c85bb4ac8cba6d27"); //Longbow +3
            IloraNaski.Body.SecondaryHand = null;
            IloraNaski.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("254755ca73eb52a4d8ab1a663106659b"); //Ring of Protection +2

            


            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);

            var IloraNuski_InstantEnemyAiAction = library.Get<BlueprintAiCastSpell>("4dba19155e8ad094382c643b813808dd");
            

            var brain = IloraNaski.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(IloraNuski_InstantEnemyAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.hurricanebowgoblinking,AiActions.castaspectfalcon,AiActions.barkskingoblinking,AiActions.castinstantenemyilora);



            IloraNaski.GetComponent<Experience>().CR = 15;

 


        }



        //Littletown


        static void changePitaxWardenMelee()

        {


            var PitaxWardenMelee = library.Get<BlueprintUnit>("9526121b89c8cfa44ae45ebc297ebeab");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var combatexpertisebuff = library.Get<BlueprintBuff>("e81cd772a7311554090e413ea28ceea1");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.AddToArray(greatfortitude, lightningreflexes,sunder,IronWill);
            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.RemoveFromArray(combatexpertisebuff);




            PitaxWardenMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("193972650bc0e40409a6773e924ad612"); //Longsword +2
            PitaxWardenMelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("e7b9e76870927424eb9de56611206867"); //Tower Shield +1
 


            var fighterLevels = PitaxWardenMelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(combatexpertise);

            }
            PitaxWardenMelee.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenMelee.GetComponent<Experience>().CR = 11;

            var brain = PitaxWardenMelee.Brain;

            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);

        }

        static void changePitaxWardenRanged()

        {


            var PitaxWardenRanged = library.Get<BlueprintUnit>("2047d133f766f8141b22f25bee23774c");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");


            PitaxWardenRanged.AddFacts = PitaxWardenRanged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);





            PitaxWardenRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            PitaxWardenRanged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = PitaxWardenRanged.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            PitaxWardenRanged.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenRanged.GetComponent<Experience>().CR = 11;

        }

        static void changePitaxHerald()
        {

            var PitaxHerald = library.Get<BlueprintUnit>("0000896c9b6752b4a9594734f929eb18");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var riverbladeBardfeaturelist = library.Get<BlueprintFeature>("b626db0c7f8d42d4e9cc0235f69724b5");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("aee2f46dfa119d44b8bd415d2f5ad339");
            var HideousLaughterAiAction = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");

            var bardLevels = PitaxHerald.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement, kishout, freedomofmovement, 
                                                                    cacophonouscallmass, heroism, holdmonster,slow, crushingdespair, unbreakableheart,earpiercescream,haste);
            newAddClassLevels.SelectSpells = spell_list;
            PitaxHerald.ReplaceComponent(bardLevels, newAddClassLevels);

            PitaxHerald.AddFacts = PitaxHerald.AddFacts.AddToArray(quicken);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            PitaxHerald.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2
            PitaxHerald.Body.Armor = library.Get<BlueprintItemArmor>("91bf657f26eb80f4ba05b0b8440b1e8c"); //Chainshirt +1
            PitaxHerald.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("f333bf86cd122974792162cbcd27c9ed"); //Ring of Protection +1


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            PitaxHerald.Brain.Actions = new_actions;





            var brain = PitaxHerald.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(HideousLaughterAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.castgoodhope,
                                                     AiActions.casthasteherald, AiActions.hideouslaughternixie, AiActions.castheroism, AiActions.castslowherald, AiActions.castfreedomofmovement,
                                                     AiActions.castkishout, AiActions.cacophonouscallmass,AiActions.castholdmonster,AiActions.castcrushingdespair,AiActions.earpierceherald);





            PitaxHerald.GetComponent<Experience>().CR = 11;

        }

        static void changeBanditBigBoss()

        {


            var BigBoss = library.Get<BlueprintUnit>("ad4f4735eab16be44a835da799d24faf");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var combatexpertisebuff = library.Get<BlueprintBuff>("e81cd772a7311554090e413ea28ceea1");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var GoodHopeBuff = library.Get<BlueprintBuff>("85af9f0c5d29e5e4fa2e75ca70442487");
            var armortraining = library.Get<BlueprintFeature>("3c380607706f209499d951b29d3c44f3");
            

            BigBoss.AddFacts = BigBoss.AddFacts.AddToArray(greatfortitude, lightningreflexes, sunder, IronWill,cornugon,GoodHopeBuff,armortraining);
            




            BigBoss.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4884c93b5dcfcd341bbea50751f4cd20"); //Falchion +2
            BigBoss.Body.Armor = library.Get<BlueprintItemArmor>("ce0076c7408f10741950cec394767b75"); //Half Plate +2
            BigBoss.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("04dff7841c5f499478c91487d9bbdcef"); //Cloak of Resistance +2
            BigBoss.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("254755ca73eb52a4d8ab1a663106659b"); //Ring of Protection +2

            var fighterLevels = BigBoss.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            BigBoss.ReplaceComponent(fighterLevels, newAddClassLevels);



            BigBoss.GetComponent<Experience>().CR = 12;


            var brain = BigBoss.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig,AiActions.usesunderarmorzombiebarb);
        }

        static void changeTrebicent()
        {

            var Trebicent = library.Get<BlueprintUnit>("19da7e84c9ec2dd4fb50628deb5bc7ff");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var echolocation = library.Get<BlueprintAbility>("20b548bf09bb3ea4bafea78dcb4f3db6");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var summonrangedfriends = library.Get<BlueprintAbility>("fea4591ce15b43909d1c80114edb8555");
            var virtuosoperformancebuff = library.Get<BlueprintBuff>("4524c9651b2943ce813544ae43dcb130");
            var goodhope = library.Get<BlueprintAbility>("a5e23522eda32dc45801e32c05dc9f96");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
            var inspiregreatnessbuff = library.Get<BlueprintBuff>("8618d4515685b6d4197f254b7f56a68c");
            

            Trebicent.AddFacts = Trebicent.AddFacts.AddToArray(summonrangedfriends,inspirecourage,inspiregreatnessbuff,virtuosoperformancebuff,quicken);

            var bardLevels = Trebicent.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage,displacement,heroism,haste,goodhope,holdmonster,echolocation);
            newAddClassLevels.SelectSpells = spell_list;
            Trebicent.ReplaceComponent(bardLevels, newAddClassLevels);

  



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.goodhope);

            Trebicent.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("8ee3176eb0ed29c418120b04dbb76aa9"); //Lightcrossbow +3


            var Trebricent_ConfusionAiAction = library.Get<BlueprintAiCastSpell>("438e0f9c73c7e934cb669ad8ba4a6d16");
            var Trebricent_MindFogAiAction = library.Get<BlueprintAiCastSpell>("1faf4e6a786d01842871b232ae53e9e0");
            var Trebricent_ResonatingWordAiAction = library.Get<BlueprintAiCastSpell>("f92a7fca5a0ccf448b30e0c0ac49665b");
            var Trebricent_SongOfDiscordAiAction = library.Get<BlueprintAiCastSpell>("2205eb6ff34eb7d46a501ad8da9810ad");




            var brain = Trebicent.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(Trebricent_ConfusionAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(Trebricent_MindFogAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(Trebricent_ResonatingWordAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(Trebricent_SongOfDiscordAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesummonrangedfriends, AiActions.mirrorimage, 
                                                     AiActions.displacement_first, AiActions.mirrorimagerecast,
                                                     AiActions.casthastetreb,  AiActions.castheroism, AiActions.castslowherald,   
                                                     AiActions.virtuosoperformance,AiActions.castgoodhopetreb,AiActions.castholdmonstertreb,
                                                     AiActions.castconfusiontreb,AiActions.castmindfogtreb,AiActions.castresonatingwordtreb,AiActions.castsongofdiscordtreb,AiActions.castecholocation);





            Trebicent.GetComponent<Experience>().CR = 15;

        }



        //Whiterose Abbey


        static void changeMercenaryWeretiger()

        {


            var MercenaryWeretiger = library.Get<BlueprintUnit>("8cee42325db359a409564ec1ecb31743");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var combatexpertisebuff = library.Get<BlueprintBuff>("e81cd772a7311554090e413ea28ceea1");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");


            MercenaryWeretiger.AddFacts = MercenaryWeretiger.AddFacts.AddToArray(greatfortitude, lightningreflexes, trip, IronWill,improvedinitiative);
       




            MercenaryWeretiger.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("193972650bc0e40409a6773e924ad612"); //Longsword +2
            MercenaryWeretiger.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = MercenaryWeretiger.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 16;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(combatexpertise);

            }
            MercenaryWeretiger.ReplaceComponent(fighterLevels, newAddClassLevels);



            MercenaryWeretiger.GetComponent<Experience>().CR = 11;


            var brain = MercenaryWeretiger.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig, AiActions.trip);

        }

        static void changeMercenaryWeretigerArcher()

        {


            var WeretigerArcher = library.Get<BlueprintUnit>("caa08cd9c11bc5642af2ed35729f385e");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");


            WeretigerArcher.AddFacts = WeretigerArcher.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);





            WeretigerArcher.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            WeretigerArcher.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = WeretigerArcher.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 16;
            WeretigerArcher.ReplaceComponent(fighterLevels, newAddClassLevels);



            WeretigerArcher.GetComponent<Experience>().CR = 11;

        }

        static void changeWereratRogue()

        {


            var WereratRogue = library.Get<BlueprintUnit>("ef2f09e0baeb105448c2abd297867649");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var CombatReflexes = library.Get<BlueprintFeature>("0f8939ae6f220984e8fb568abbdfba95");
            var DirtyTrickSickenedAction = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");
            var doubledebiliation = library.Get<BlueprintFeature>("dd699394df0ef8847abba26038333f02");
            var disorientedability = library.Get<BlueprintBuff>("6339eac5bdcef1747ac46885d2cf4e25");
            var bewilderedability = library.Get<BlueprintBuff>("116ee72b2149f4d44a330296a7e42d13");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");



          



            var rogueLevels = WereratRogue.ComponentsArray
     .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels2 = rogueLevels.CreateCopy();
            newAddClassLevels2.Levels = 16;
            WereratRogue.ReplaceComponent(rogueLevels, newAddClassLevels2);



            WereratRogue.AddFacts = WereratRogue.AddFacts.AddToArray(improvedevasion, dirtytrick, CombatReflexes, doubledebiliation, disorientedability, improvedinitiative, bewilderedability, blindfight);




            WereratRogue.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("0af6a4ac898a2ca4c9b0a7e76ec7522b"); //Shortsword +2
            WereratRogue.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("0af6a4ac898a2ca4c9b0a7e76ec7522b"); //Shortsword +2
            WereratRogue.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1

            WereratRogue.GetComponent<Experience>().CR = 12;

            var brain = WereratRogue.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedirtytrickblind);



        }

        static void changeWereratAlchemistPitax()
        {



            var WereratAlchemist = library.Get<BlueprintUnit>("5440ebd0f49e54442a7dd8a7181e1b9a");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            var greaterCogintell = library.Get<BlueprintAbility>("7fe18aed4a7a8f44289d1b262f432c16");
            var greaterCogintellbuff = library.Get<BlueprintBuff>("1c2fdba3b33dacd41afd5b74d84c7332");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var BreathWeaponBomb = library.Get<BlueprintAbility>("17041de68a89a5f4b92889c3ed475c00");
            var preserveorgans = library.Get<BlueprintFeature>("76b4bb8e54f3f5c418f421684c76ef4e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");


            WereratAlchemist.AddFacts = WereratAlchemist.AddFacts.AddToArray(quicken, combatcasting,
                                                                                     fastbombbuff,
                                                                                    chokebomb, greaterCogintell, greaterCogintellbuff, BreathWeaponBomb, preserveorgans);





            var alchemistLevels = WereratAlchemist.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste, stoneskincommunal, heroism, heal);
            newAddClassLevels.MemorizeSpells = spell_list;
            WereratAlchemist.ReplaceComponent(alchemistLevels, newAddClassLevels);




            var alchemistLevels5 = WereratAlchemist.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels5 = alchemistLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(haste, heroism, stoneskincommunal, heal);
            newAddClassLevels5.SelectSpells = spell_list5;
            WereratAlchemist.ReplaceComponent(alchemistLevels5, newAddClassLevels5);



            WereratAlchemist.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4d8b4d077b7d50d44bdfd44913bf9da6"); //Club +2



            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);


            var brain = WereratAlchemist.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste, AiActions.castdisplacementgoblin, AiActions.throwchokebomb,
                                                    AiActions.stoneskincommunalsprig, AiActions.castinvisibilitygreater, AiActions.castheroism, AiActions.usebreathbomb, AiActions.displacementvordakai, AiActions.healspell);



     


        }

        static void changeJMMTPitaxPriest()
        {



            var JMMTPitaxPriest = library.Get<BlueprintUnit>("b640e0571bfd4b7ea87f13e8462a3777");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var summonelementalgreat = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            var chainsoflight = library.Get<BlueprintAbility>("f8cea58227f59c64399044a82c9735c4");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var burstofglory = library.Get<BlueprintAbility>("1bc83efec9f8c4b42a46162d72cbf494");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var sm4 = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            var banditchannelpositiveai = library.Get<BlueprintAiAction>("2fc0766638579a94ba19779197f509ad");
            var selectivechannel = library.Get<BlueprintFeature>("fd30c69417b434d47b6b03b9c1f568ff");
            var prayeraiaction = library.Get<BlueprintAiAction>("c21e11b437ff4474b80171fea11f7709");
            var heroismbuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var WeaponFocusHeavyMace = library.Get<BlueprintFeature>("5627935cb95be864588aa1f134b7a1ca");
            var WeaponSpecialHeavyMace = library.Get<BlueprintFeature>("8b02149061a1ded49b2438c111021cb1");
            var PointBlankShot = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var bless = library.Get<BlueprintAbility>("90e59f4a4ada87243b7b3535a06d0638");
            var channelenergy = library.Get<BlueprintFeature>("a79013ff4bcd4864cb669622a29ddafb");
            

                var channelpositive = library.Get<BlueprintAbility>("507ba29b9238431baf0ff39c215b5899");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            

            JMMTPitaxPriest.AddFacts = JMMTPitaxPriest.AddFacts.AddToArray(quicken,heroismbuff, combatcasting, improvedinitiative,channelenergy,WeaponFocusHeavyMace,WeaponSpecialHeavyMace,selectivechannel,channelpositive);
            JMMTPitaxPriest.AddFacts = JMMTPitaxPriest.AddFacts.RemoveFromArray(PointBlankShot);

            JMMTPitaxPriest.Wisdom = 19;
            JMMTPitaxPriest.Dexterity = 11;
            JMMTPitaxPriest.Constitution = 14;

            var warpriestLevels = JMMTPitaxPriest.ComponentsArray
.OfType<AddClassLevels>()
 .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = warpriestLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            newAddClassLevels.Levels = 16;
            JMMTPitaxPriest.ReplaceComponent(warpriestLevels, newAddClassLevels);



       

            var clericLevels3 = JMMTPitaxPriest.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == clericClass);
            var newclericLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newclericLevels3.MemorizeSpells.AddToArray(summonelementalgreat, umbralstrike, chainsoflight, chainsoflight,
                                                                         righteousmight, bullsmass, heal, flamestrike, flamestrike,burstofglory,heroism, 
                                                                         searing_light, searing_light,prayer, divinepower, divinepower, shieldoffaith,bless);
            newclericLevels3.MemorizeSpells = spell_list3;
            JMMTPitaxPriest.ReplaceComponent(clericLevels3, newclericLevels3);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);


            var auto_metamgic4 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.bless);



            JMMTPitaxPriest.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("3e728d0847794234fbedd98fe62cdec8"); //Heavy Mace +2
            JMMTPitaxPriest.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1
            JMMTPitaxPriest.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("f333bf86cd122974792162cbcd27c9ed"); //Ring of Protection +1
            JMMTPitaxPriest.Body.SecondaryHand = library.Get<BlueprintItemShield>("d41ea649a1054b647aafc5b2cb4f8543"); //Heavy Shield +2

            var brain = JMMTPitaxPriest.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglightbandit, AiActions.healspell,
                                                    AiActions.castshieldoffaithgorum, AiActions.righteousmightbandit,
                                                    AiActions.flamestrikebandit, AiActions.prayerbandit,
                                                    AiActions.summonelementalgreatfire, AiActions.chainsoflight, AiActions.castburstofglory, 
                                                    AiActions.umbral_strike, AiActions.divine_power_first,AiActions.castchannelpositivepitax,
                                                    AiActions.castbullsmasspitax,AiActions.castdivinepowerdelaypitax,AiActions.blesscastpitax);


            JMMTPitaxPriest.GetComponent<Experience>().CR = 12;

        }

        static void changegardener()
        {

            var gardener = library.Get<BlueprintUnit>("cb358a1f146b7f64590f1c9dc293f499");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var ReducePersonMass = library.Get<BlueprintAbility>("2427f2e3ca22ae54ea7337bbab555b16");
            var EnlargePersonMass = library.Get<BlueprintAbility>("66dc49bf154863148bd217287079245e");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var summongreatrock = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");
            var bullsstrength = library.Get<BlueprintAbility>("4c3d08935262b6544ae97599b3a9556d");
            var enlargeperson = library.Get<BlueprintAbility>("c60969e7f264e6d4b84a1499fdcf9039");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var monkClass = library.Get<BlueprintCharacterClass>("e8f21e5b58e0569468e420ebea456124");
            var dragondiscipleClass = library.Get<BlueprintCharacterClass>("72051275b1dbb2d42ba9118237794f7c");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var DragonkindIIBlueBreath = library.Get<BlueprintAbility>("a78415f2be26edb40912499a643d4a0c");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var icestorm = library.Get<BlueprintAbility>("fcb028205a71ee64d98175ff39a0abf9");
            var heroismbuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");

            gardener.AddFacts = gardener.AddFacts.AddToArray(quicken, combatcasting, improvedinitiative,DragonkindIIBlueBreath);

            var wizardLevels = gardener.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == sorcererClass);
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.Levels = 8;
            gardener.ReplaceComponent(wizardLevels, newwizardLevels);

            var wizardLevels3 = gardener.ComponentsArray
    .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == dragondiscipleClass);
            var newwizardLevels3 = wizardLevels3.CreateCopy();
            newwizardLevels3.Levels = 10;
            gardener.ReplaceComponent(wizardLevels3, newwizardLevels3);

            var wizardLevels2 = gardener.ComponentsArray
    .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == monkClass);
            var newwizardLevels2 = wizardLevels2.CreateCopy();
            newwizardLevels2.Levels = 0;
            gardener.ReplaceComponent(wizardLevels2, newwizardLevels2);

            var clericLevels2 = gardener.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(displacement, chainlightning, slow, haste, mirrorimage, coldicestrike, stoneskincommunal,icestorm,holdmonster,heroism);
            newAddClassLevels2.SelectSpells = spell_list2;
            gardener.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var clericLevels3 = gardener.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == dragondiscipleClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.SelectSpells.AddToArray(displacement, chainlightning, slow, haste, mirrorimage, coldicestrike, stoneskincommunal, icestorm, holdmonster,heroism);
            newAddClassLevels3.SelectSpells = spell_list3;
            gardener.ReplaceComponent(clericLevels3, newAddClassLevels3);


            gardener.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("04dff7841c5f499478c91487d9bbdcef"); //Cloak of Resistance +2
            

            gardener.GetComponent<Experience>().CR = 15;


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            gardener.Brain.Actions = new_actions;

            var brain = gardener.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai, AiActions.stoneskincommunal, 
                                                     AiActions.casthastebanditnecro, AiActions.mirrorimagerecast,
                                                     AiActions.mirrorimage, AiActions.coldicestrikegardener,AiActions.chainlightninggardener,
                                                      AiActions.coldicestrike,  AiActions.burninarctransmuter,AiActions.castmagearmorsprig, AiActions.castslowgardener,
                                                      AiActions.castshieldsprig,AiActions.castholdmonstergardener,AiActions.icestormgardener, AiActions.castheroism,
                                                      AiActions.castdragonformIIblue,AiActions.castdragonformIIbluebreath,AiActions.castlightningboltgardener,AiActions.castmagicmissletransmuter);



        }


        //Irovettis Palace

        static void changeIrovettiGuard()

        {


            var PitaxWardenMelee = library.Get<BlueprintUnit>("82321ead4e06a1b4691a554d6c37ea73");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var combatexpertisebuff = library.Get<BlueprintBuff>("e81cd772a7311554090e413ea28ceea1");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.AddToArray(greatfortitude, lightningreflexes, sunder, IronWill);
            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.RemoveFromArray(combatexpertisebuff);




            PitaxWardenMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("193972650bc0e40409a6773e924ad612"); //Longsword +2
            PitaxWardenMelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("e7b9e76870927424eb9de56611206867"); //Tower Shield +1



            var fighterLevels = PitaxWardenMelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(combatexpertise);

            }
            PitaxWardenMelee.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenMelee.GetComponent<Experience>().CR = 11;

            var brain = PitaxWardenMelee.Brain;

            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);

        }

        static void changeGuardCaptain()
        {
            var GuardCaptain = library.Get<BlueprintUnit>("bbc70b45994ce124c9bf0a6c7b1895de");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
           
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");


            GuardCaptain.AddFacts = GuardCaptain.AddFacts.AddToArray(cornugon);



            var barbarianLevels = GuardCaptain.ComponentsArray
                        .OfType<AddClassLevels>()
                        .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            GuardCaptain.ReplaceComponent(barbarianLevels, newAddClassLevels);




            var brain = GuardCaptain.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);



        }

        static void changeGuardCaptainB()
        {
            var GuardCaptain = library.Get<BlueprintUnit>("911e2dbb1604c954186400f88b4fc105");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");

            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");


            GuardCaptain.AddFacts = GuardCaptain.AddFacts.AddToArray(cornugon);



            var barbarianLevels = GuardCaptain.ComponentsArray
                        .OfType<AddClassLevels>()
                        .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            GuardCaptain.ReplaceComponent(barbarianLevels, newAddClassLevels);




            var brain = GuardCaptain.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);



        }

        static void changePitaxPriest()
        {



            var PitaxPriest = library.Get<BlueprintUnit>("9656cbdc052f4404eae9890fef33afa2");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var summonelementalgreat = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            var chainsoflight = library.Get<BlueprintAbility>("f8cea58227f59c64399044a82c9735c4");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var burstofglory = library.Get<BlueprintAbility>("1bc83efec9f8c4b42a46162d72cbf494");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var sm4 = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            var banditchannelpositiveai = library.Get<BlueprintAiAction>("2fc0766638579a94ba19779197f509ad");
            var selectivechannel = library.Get<BlueprintFeature>("fd30c69417b434d47b6b03b9c1f568ff");
            var prayeraiaction = library.Get<BlueprintAiAction>("c21e11b437ff4474b80171fea11f7709");
            var heroismbuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var WeaponFocusHeavyMace = library.Get<BlueprintFeature>("5627935cb95be864588aa1f134b7a1ca");
            var WeaponSpecialHeavyMace = library.Get<BlueprintFeature>("8b02149061a1ded49b2438c111021cb1");
            var PointBlankShot = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var bless = library.Get<BlueprintAbility>("90e59f4a4ada87243b7b3535a06d0638");
            var channelenergy = library.Get<BlueprintFeature>("a79013ff4bcd4864cb669622a29ddafb");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");

            var channelpositive = library.Get<BlueprintAbility>("507ba29b9238431baf0ff39c215b5899");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");


            PitaxPriest.AddFacts = PitaxPriest.AddFacts.AddToArray(quicken, heroismbuff, combatcasting, improvedinitiative, channelenergy, WeaponFocusHeavyMace, WeaponSpecialHeavyMace, selectivechannel, channelpositive);
            PitaxPriest.AddFacts = PitaxPriest.AddFacts.RemoveFromArray(PointBlankShot);

            PitaxPriest.Strength = 15;
            PitaxPriest.Wisdom = 19;
            PitaxPriest.Dexterity = 11;
            PitaxPriest.Constitution = 14;

            var warpriestLevels = PitaxPriest.ComponentsArray
.OfType<AddClassLevels>()
 .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = warpriestLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            newAddClassLevels.Levels = 16;
            PitaxPriest.ReplaceComponent(warpriestLevels, newAddClassLevels);





            var clericLevels3 = PitaxPriest.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == clericClass);
            var newclericLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newclericLevels3.MemorizeSpells.AddToArray(summonelementalgreat, umbralstrike, chainsoflight, chainsoflight,
                                                                         righteousmight, bullsmass, heal, flamestrike, flamestrike, burstofglory, heroism,
                                                                         searing_light, searing_light, prayer, divinepower, divinepower, shieldoffaith, bless,greaterdispel);
            newclericLevels3.MemorizeSpells = spell_list3;
            PitaxPriest.ReplaceComponent(clericLevels3, newclericLevels3);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);


            var auto_metamgic4 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.bless);



            PitaxPriest.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("3e728d0847794234fbedd98fe62cdec8"); //Heavy Mace +2
            PitaxPriest.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1
            PitaxPriest.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("f333bf86cd122974792162cbcd27c9ed"); //Ring of Protection +1
            PitaxPriest.Body.SecondaryHand = library.Get<BlueprintItemShield>("d41ea649a1054b647aafc5b2cb4f8543"); //Heavy Shield +2


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            PitaxPriest.Brain.Actions = new_actions;

            var brain = PitaxPriest.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglightbandit, AiActions.healspell,
                                                    AiActions.castshieldoffaithgorum, AiActions.righteousmightbandit,
                                                    AiActions.flamestrikebandit, AiActions.prayerbandit,
                                                    AiActions.summonelementalgreatfire, AiActions.chainsoflight, AiActions.castburstofglory,
                                                    AiActions.umbral_strike, AiActions.divine_power_first, AiActions.castchannelpositivepitax,
                                                    AiActions.castbullsmasspitax, AiActions.castdivinepowerdelaypitax, AiActions.blesscastpitax);


  

            PitaxPriest.GetComponent<Experience>().CR = 12;

            PitaxPriest.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{PitaxPriest.name}.name", "Pitax Priest"));

        }

        static void changePitaxWardenMeleeCutsceneNeutral()

        {


            var PitaxWardenMelee = library.Get<BlueprintUnit>("def8f1df0e93f3f488a56e6f8a616fd4");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var combatexpertisebuff = library.Get<BlueprintBuff>("e81cd772a7311554090e413ea28ceea1");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.AddToArray(greatfortitude, lightningreflexes, sunder, IronWill);
            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.RemoveFromArray(combatexpertisebuff);




            PitaxWardenMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("193972650bc0e40409a6773e924ad612"); //Longsword +2
            PitaxWardenMelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("e7b9e76870927424eb9de56611206867"); //Tower Shield +1



            var fighterLevels = PitaxWardenMelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(combatexpertise);

            }
            PitaxWardenMelee.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenMelee.GetComponent<Experience>().CR = 11;

            var brain = PitaxWardenMelee.Brain;

            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);

        }

        static void changePitaxWardenMeleeMessHallDialogue()

        {


            var PitaxWardenMelee = library.Get<BlueprintUnit>("31d481b2a98b60948b9d26dcfffd24a0");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var combatexpertisebuff = library.Get<BlueprintBuff>("e81cd772a7311554090e413ea28ceea1");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.AddToArray(greatfortitude, lightningreflexes, sunder, IronWill);
            PitaxWardenMelee.AddFacts = PitaxWardenMelee.AddFacts.RemoveFromArray(combatexpertisebuff);




            PitaxWardenMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("193972650bc0e40409a6773e924ad612"); //Longsword +2
            PitaxWardenMelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("e7b9e76870927424eb9de56611206867"); //Tower Shield +1



            var fighterLevels = PitaxWardenMelee.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(combatexpertise);

            }
            PitaxWardenMelee.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenMelee.GetComponent<Experience>().CR = 11;

            var brain = PitaxWardenMelee.Brain;

            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);

        }

        static void changePitaxWardenRangedCutsceneNeutral()

        {


            var PitaxWardenRanged = library.Get<BlueprintUnit>("1194a2b2947ab1843b287e103346d7a3");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");


            PitaxWardenRanged.AddFacts = PitaxWardenRanged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);





            PitaxWardenRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            PitaxWardenRanged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = PitaxWardenRanged.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            PitaxWardenRanged.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenRanged.GetComponent<Experience>().CR = 11;

        }

        static void changePitaxWardenRangedMessHallDialogue()

        {


            var PitaxWardenRanged = library.Get<BlueprintUnit>("92130db6fdeff054eb7a49dad4ed49af");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");


            PitaxWardenRanged.AddFacts = PitaxWardenRanged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);





            PitaxWardenRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            PitaxWardenRanged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = PitaxWardenRanged.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            PitaxWardenRanged.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenRanged.GetComponent<Experience>().CR = 11;

        }

        static void changePitaxWardenRangedAmbush()

        {


            var PitaxWardenRanged = library.Get<BlueprintUnit>("c6b21217db3be7b4ab377a946d04d6a2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");


            PitaxWardenRanged.AddFacts = PitaxWardenRanged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);





            PitaxWardenRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            PitaxWardenRanged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = PitaxWardenRanged.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            PitaxWardenRanged.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenRanged.GetComponent<Experience>().CR = 11;

        }

        static void changePitaxWardenFemale()

        {


            var PitaxWardenRanged = library.Get<BlueprintUnit>("052db94288d9e804b9fd70723030ce0e");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var ImprovedPreciseShot = library.Get<BlueprintFeature>("46f970a6b9b5d2346b10892673fe6e74");
            var Improvedlightningreflexes = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");


            PitaxWardenRanged.AddFacts = PitaxWardenRanged.AddFacts.AddToArray(improvedinitiative, greatfortitude, lightningreflexes, ImprovedPreciseShot, Improvedlightningreflexes);





            PitaxWardenRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            PitaxWardenRanged.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = PitaxWardenRanged.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            PitaxWardenRanged.ReplaceComponent(fighterLevels, newAddClassLevels);



            PitaxWardenRanged.GetComponent<Experience>().CR = 11;

        }


        static void changeMercenaryWeretigerAmbush()

        {


            var MercenaryWeretiger = library.Get<BlueprintUnit>("390ace5b3a935364191c1da751ced237");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var combatexpertise = library.Get<BlueprintFeature>("4c44724ffa8844f4d9bedb5bb27d144a");
            var combatexpertisebuff = library.Get<BlueprintBuff>("e81cd772a7311554090e413ea28ceea1");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");


            MercenaryWeretiger.AddFacts = MercenaryWeretiger.AddFacts.AddToArray(greatfortitude, lightningreflexes, trip, IronWill, improvedinitiative);





            MercenaryWeretiger.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("193972650bc0e40409a6773e924ad612"); //Longsword +2
            MercenaryWeretiger.Body.Armor = library.Get<BlueprintItemArmor>("c147f25768aa5094e8494013aea3786b"); //Chainmail +1


            var fighterLevels = MercenaryWeretiger.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 16;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(combatexpertise);

            }
            MercenaryWeretiger.ReplaceComponent(fighterLevels, newAddClassLevels);



            MercenaryWeretiger.GetComponent<Experience>().CR = 11;


            var brain = MercenaryWeretiger.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleavesprig, AiActions.trip);

        }

        static void changePitaxHeraldAmbush()
        {

            var PitaxHerald = library.Get<BlueprintUnit>("fb43628fce499ea4587709e282f8b249");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var riverbladeBardfeaturelist = library.Get<BlueprintFeature>("b626db0c7f8d42d4e9cc0235f69724b5");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("aee2f46dfa119d44b8bd415d2f5ad339");
            var HideousLaughterAiAction = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");

            var bardLevels = PitaxHerald.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement, kishout, freedomofmovement,
                                                                    cacophonouscallmass, heroism, holdmonster, slow, crushingdespair, unbreakableheart, earpiercescream, haste);
            newAddClassLevels.SelectSpells = spell_list;
            PitaxHerald.ReplaceComponent(bardLevels, newAddClassLevels);

            PitaxHerald.AddFacts = PitaxHerald.AddFacts.AddToArray(quicken);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            PitaxHerald.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2
            PitaxHerald.Body.Armor = library.Get<BlueprintItemArmor>("91bf657f26eb80f4ba05b0b8440b1e8c"); //Chainshirt +1
            PitaxHerald.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("f333bf86cd122974792162cbcd27c9ed"); //Ring of Protection +1


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            PitaxHerald.Brain.Actions = new_actions;





            var brain = PitaxHerald.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(HideousLaughterAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.castgoodhope,
                                                     AiActions.casthasteherald, AiActions.hideouslaughternixie, AiActions.castheroism, AiActions.castslowherald, AiActions.castfreedomofmovement,
                                                     AiActions.castkishout, AiActions.cacophonouscallmass, AiActions.castholdmonster, AiActions.castcrushingdespair, AiActions.earpierceherald);





            PitaxHerald.GetComponent<Experience>().CR = 11;

        }

        static void changePitaxHeraldCutsceneNeutral()
        {

            var PitaxHerald = library.Get<BlueprintUnit>("45411e6b39138784fac093f383088a21");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var riverbladeBardfeaturelist = library.Get<BlueprintFeature>("b626db0c7f8d42d4e9cc0235f69724b5");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("aee2f46dfa119d44b8bd415d2f5ad339");
            var HideousLaughterAiAction = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");

            var bardLevels = PitaxHerald.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement, kishout, freedomofmovement,
                                                                    cacophonouscallmass, heroism, holdmonster, slow, crushingdespair, unbreakableheart, earpiercescream, haste);
            newAddClassLevels.SelectSpells = spell_list;
            PitaxHerald.ReplaceComponent(bardLevels, newAddClassLevels);

            PitaxHerald.AddFacts = PitaxHerald.AddFacts.AddToArray(quicken);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            PitaxHerald.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2
            PitaxHerald.Body.Armor = library.Get<BlueprintItemArmor>("91bf657f26eb80f4ba05b0b8440b1e8c"); //Chainshirt +1
            PitaxHerald.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("f333bf86cd122974792162cbcd27c9ed"); //Ring of Protection +1


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            PitaxHerald.Brain.Actions = new_actions;





            var brain = PitaxHerald.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(HideousLaughterAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.castgoodhope,
                                                     AiActions.casthasteherald, AiActions.hideouslaughternixie, AiActions.castheroism, AiActions.castslowherald, AiActions.castfreedomofmovement,
                                                     AiActions.castkishout, AiActions.cacophonouscallmass, AiActions.castholdmonster, AiActions.castcrushingdespair, AiActions.earpierceherald);





            PitaxHerald.GetComponent<Experience>().CR = 11;

        }

        static void changePitaxHeraldFemale_Ambush()
        {

            var PitaxHerald = library.Get<BlueprintUnit>("791d82d1144a96a4b8d535fe22695fae");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var riverbladeBardfeaturelist = library.Get<BlueprintFeature>("b626db0c7f8d42d4e9cc0235f69724b5");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("aee2f46dfa119d44b8bd415d2f5ad339");
            var HideousLaughterAiAction = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");

            var bardLevels = PitaxHerald.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement, kishout, freedomofmovement,
                                                                    cacophonouscallmass, heroism, holdmonster, slow, crushingdespair, unbreakableheart, earpiercescream, haste);
            newAddClassLevels.SelectSpells = spell_list;
            PitaxHerald.ReplaceComponent(bardLevels, newAddClassLevels);

            PitaxHerald.AddFacts = PitaxHerald.AddFacts.AddToArray(quicken);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            PitaxHerald.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1fb0ea666a65a004dac6327d0e6682bc"); //Lightcrossbow +2
            PitaxHerald.Body.Armor = library.Get<BlueprintItemArmor>("91bf657f26eb80f4ba05b0b8440b1e8c"); //Chainshirt +1
            PitaxHerald.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("f333bf86cd122974792162cbcd27c9ed"); //Ring of Protection +1


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            PitaxHerald.Brain.Actions = new_actions;





            var brain = PitaxHerald.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(HideousLaughterAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.castgoodhope,
                                                     AiActions.casthasteherald, AiActions.hideouslaughternixie, AiActions.castheroism, AiActions.castslowherald, AiActions.castfreedomofmovement,
                                                     AiActions.castkishout, AiActions.cacophonouscallmass, AiActions.castholdmonster, AiActions.castcrushingdespair, AiActions.earpierceherald);





            PitaxHerald.GetComponent<Experience>().CR = 11;

        }

        static void changeWereratAlchemistChange()
        {



            var WereratAlchemist = library.Get<BlueprintUnit>("c88710b7a72d48ca97c200fbab642249");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var alchemistClass = library.Get<BlueprintCharacterClass>("0937bec61c0dabc468428f496580c721");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fastbomb = library.Get<BlueprintFeature>("128c5fccec5ca724281a4907b1f0ac83");
            var fastbombbuff = library.Get<BlueprintBuff>("c42ae8f9652bbc14eb13b31d12d20f8a");
            var chokebomb = library.Get<BlueprintAbility>("0fcbed386deb18b428825605796d5a15");
            var greaterCogintell = library.Get<BlueprintAbility>("7fe18aed4a7a8f44289d1b262f432c16");
            var greaterCogintellbuff = library.Get<BlueprintBuff>("1c2fdba3b33dacd41afd5b74d84c7332");
            var extrabomb = library.Get<BlueprintFeature>("54c57ce67fa1d9044b1b3edc459e05e2");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var BreathWeaponBomb = library.Get<BlueprintAbility>("17041de68a89a5f4b92889c3ed475c00");
            var preserveorgans = library.Get<BlueprintFeature>("76b4bb8e54f3f5c418f421684c76ef4e");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");


            WereratAlchemist.AddFacts = WereratAlchemist.AddFacts.AddToArray(quicken, combatcasting,
                                                                                     fastbombbuff,
                                                                                    chokebomb, greaterCogintell, greaterCogintellbuff, BreathWeaponBomb, preserveorgans);





            var alchemistLevels = WereratAlchemist.ComponentsArray
             .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(haste, stoneskincommunal, heroism, heal);
            newAddClassLevels.MemorizeSpells = spell_list;
            WereratAlchemist.ReplaceComponent(alchemistLevels, newAddClassLevels);




            var alchemistLevels5 = WereratAlchemist.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == alchemistClass);
            var newAddClassLevels5 = alchemistLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.AddToArray(haste, heroism, stoneskincommunal, heal);
            newAddClassLevels5.SelectSpells = spell_list5;
            WereratAlchemist.ReplaceComponent(alchemistLevels5, newAddClassLevels5);



            WereratAlchemist.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("4d8b4d077b7d50d44bdfd44913bf9da6"); //Club +2



            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);


            var brain = WereratAlchemist.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.casthaste, AiActions.castdisplacementgoblin, AiActions.throwchokebomb,
                                                    AiActions.stoneskincommunalsprig, AiActions.castinvisibilitygreater, AiActions.castheroism, AiActions.usebreathbomb, AiActions.displacementvordakai, AiActions.healspell);






        }

        static void updateGoldGolemPalace()

        {


            var GoldGolemPalace = library.Get<BlueprintUnit>("9b65460d19d5f11458b6d15bd27dc85c");
            var constructClass = library.Get<BlueprintCharacterClass>("fd66bdea5c33e5f458e929022322e6bf");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");


            GoldGolemPalace.AddFacts = GoldGolemPalace.AddFacts.AddToArray(quicken,pointblank,preciseshot);


            

            GoldGolemPalace.MaxHP = 100;

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.slow);


            var fighterLevels = GoldGolemPalace.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == constructClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 24;
            GoldGolemPalace.ReplaceComponent(fighterLevels, newAddClassLevels);

            var brain = GoldGolemPalace.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }

        static void updateYellowGolemPalace()

        {


            var GoldGolemPalace = library.Get<BlueprintUnit>("8b4f2014c77065a44ab6f4802fbe2dba");
            var constructClass = library.Get<BlueprintCharacterClass>("fd66bdea5c33e5f458e929022322e6bf");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");


            GoldGolemPalace.AddFacts = GoldGolemPalace.AddFacts.AddToArray(quicken, pointblank, preciseshot);




            GoldGolemPalace.MaxHP = 100;

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.slow);


            var fighterLevels = GoldGolemPalace.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == constructClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 24;
            GoldGolemPalace.ReplaceComponent(fighterLevels, newAddClassLevels);

            var brain = GoldGolemPalace.Brain;
            brain.Actions = brain.Actions.AddToArray();


        }

        static void updateNirdCottenroplePitax()
        {


            var WizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var NirdCottenrople = library.Get<BlueprintUnit>("f605ef55cf201bd48a0d94f21ab42912");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var dragonsbreath = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");

            NirdCottenrople.AddFacts = NirdCottenrople.AddFacts.AddToArray(quicken);







            var wizardLevels = NirdCottenrople.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == WizardClass);
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.Levels = 17;
            NirdCottenrople.ReplaceComponent(wizardLevels, newwizardLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);

            var magusLevels3 = NirdCottenrople.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels3 = magusLevels3.CreateCopy();
            var spell_list2 = newAddClassLevels3.SelectSpells.AddToArray(displacement, mirrorimage, haste, shield, hellfireray, stoneskincommunal, greaterdispel, slow, dragonsbreath);
            newAddClassLevels3.SelectSpells = spell_list2;
            NirdCottenrople.ReplaceComponent(magusLevels3, newAddClassLevels3);

            var magusLevels2 = NirdCottenrople.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(displacement, mirrorimage, haste, shield, hellfireray, hellfireray, greaterdispel, greaterdispel, stoneskincommunal, slow, dragonsbreath);
            newAddClassLevels2.MemorizeSpells = spell_list;
            NirdCottenrople.ReplaceComponent(magusLevels2, newAddClassLevels2);

            var magusLevels4 = NirdCottenrople.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(DominatePerson);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            NirdCottenrople.ReplaceComponent(magusLevels4, newAddClassLevels4);



            var NirdCottenropple_DisplacementAiAction = library.Get<BlueprintAiAction>("f8b24ea30791ab04cbb017c3fac970ec");
            var NirdCottenropple_HideousLaughterAiAction = library.Get<BlueprintAiAction>("7f9ab3b97459a654f85835d9634dd098");



            var brain = NirdCottenrople.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(NirdCottenropple_DisplacementAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(NirdCottenropple_HideousLaughterAiAction);
            brain.Actions = brain.Actions.AddToArray(
                                                    AiActions.mirrorimagecyclop, AiActions.displacementvordakai,
                                                     AiActions.casthastenird, AiActions.castshieldsprig,
                                                    AiActions.stoneskincommunalnird, AiActions.hellfire_raynird, AiActions.greaterdispelnird, AiActions.castslownird, AiActions.hideouslaughternird, AiActions.dragonsbreathblacknird);


        }

        static void updateLuarCottenrople()
        {


            var WizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var LuarCottenrople = library.Get<BlueprintUnit>("9c6f8fbcbfcfa594c872200406dd8139");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");


            LuarCottenrople.AddFacts = LuarCottenrople.AddFacts.AddToArray(quicken);







            var wizardLevels = LuarCottenrople.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == WizardClass);
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.Levels = 17;
            LuarCottenrople.ReplaceComponent(wizardLevels, newwizardLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);


            var magusLevels3 = LuarCottenrople.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels3 = magusLevels3.CreateCopy();
            var spell_list2 = newAddClassLevels3.SelectSpells.AddToArray(displacement, mirrorimage, shield, stoneskincommunal, greaterdispel, greaterdispel, slow,slow);
            newAddClassLevels3.SelectSpells = spell_list2;
            LuarCottenrople.ReplaceComponent(magusLevels3, newAddClassLevels3);

            var magusLevels2 = LuarCottenrople.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == WizardClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(displacement, mirrorimage,  shield, greaterdispel, greaterdispel, stoneskincommunal, slow);
            newAddClassLevels2.MemorizeSpells = spell_list;
            LuarCottenrople.ReplaceComponent(magusLevels2, newAddClassLevels2);





            var LuarCottenrople_DisplacementAiAction = library.Get<BlueprintAiAction>("266729cda9620ed439ddec335f59d4f9");
            var LuarCottenrople_MirrorImageAiAction = library.Get<BlueprintAiAction>("5a12ce22a49994742a9f26ac060c1f1e");



            var brain = LuarCottenrople.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(LuarCottenrople_DisplacementAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(LuarCottenrople_MirrorImageAiAction);
            brain.Actions = brain.Actions.AddToArray(
                                                    AiActions.mirrorimagecyclop, AiActions.mirrorimagerecast, AiActions.displacementvordakai,
                                                     AiActions.castshieldsprig,
                                                    AiActions.stoneskincommunalnird, AiActions.castslownird);


        }

        static void changeGaetane()
        {



            var Gaetane = library.Get<BlueprintUnit>("f78287a861a488e4cb5f27f38b2cc9e8");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var rangerClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var featherstepmass = library.Get<BlueprintAbility>("d219494150ac1f24f9ce14a3d4f66d26");
            var entangle = library.Get<BlueprintAbility>("0fd00984a2c0e0a429cf1a911b4ec5ca");

            var blessingofthesalamander = library.Get<BlueprintAbility>("9256a86aec14ad14e9497f6b60e26f3f");

           Gaetane.AddFacts = Gaetane.AddFacts.AddToArray(quicken);



            var alchemistLevels2 = Gaetane.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels2 = alchemistLevels2.CreateCopy();
            newAddClassLevels2.Levels = 15;
            var spell_list2 = newAddClassLevels2.SelectSpells.AddToArray(featherstepmass,entangle);
            newAddClassLevels2.SelectSpells = spell_list2;
            Gaetane.ReplaceComponent(alchemistLevels2, newAddClassLevels2);


            var alchemistLevels = Gaetane.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels = alchemistLevels.CreateCopy();
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(featherstepmass,entangle);
            newAddClassLevels.MemorizeSpells = spell_list;
            Gaetane.ReplaceComponent(alchemistLevels, newAddClassLevels);

            var alchemistLevels3 = Gaetane.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels3 = alchemistLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(blessingofthesalamander);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            Gaetane.ReplaceComponent(alchemistLevels3, newAddClassLevels3);



            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);

            var GaetaneLeafBladesAiAction = library.Get<BlueprintAiCastSpell>("08f8076cfb0df624b8e8f64d614842c7");
            var GaetaneCatsGraceAiAction = library.Get<BlueprintAiCastSpell>("2c39b7a19e8777440b14cb76eb7333f4");
            var GaetaneBlessingOfSalamanderAiAction = library.Get<BlueprintAiCastSpell>("9914e16cdcb9dd841bbef41e0d0ee17a");
            var GaetaneSenseVitalsAiAction = library.Get<BlueprintAiCastSpell>("d08cef5eda23b804dafc42b417eca858");
           



            var brain = Gaetane.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GaetaneLeafBladesAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(GaetaneCatsGraceAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(GaetaneBlessingOfSalamanderAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(GaetaneSenseVitalsAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.featherstepmass,AiActions.castentanglegaetane,AiActions.leadblades,AiActions.castcatsgrace,AiActions.castblessingsalamander);






        }

        static void updateOgreMagus()
        {


            var MagusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var OgreMagus = library.Get<BlueprintUnit>("bb4941a61b515fd48b5631d0e56fd378");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var ImprovedCleavingFinish = library.Get<BlueprintFeature>("ffa1b373190af4f4db7a5501904a1983");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var shieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");

            OgreMagus.AddFacts = OgreMagus.AddFacts.AddToArray(dimensionstrikefeat, quicken, StoneskinBuffCL11,catsgracebuff, electricalfeat, firebrandbuff);


           





            var magusLevels = OgreMagus.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == MagusClass);
            var newmagusLevels = magusLevels.CreateCopy();
            newmagusLevels.Levels = 19;
            OgreMagus.ReplaceComponent(magusLevels, newmagusLevels);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);

            var magusLevels2 = OgreMagus.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == MagusClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(frigidtouch, frigidtouch, frigidtouch, displacement,
                                                                             mirrorimage, shockinggrasp, shockinggrasp, shockinggrasp,
                                                                             haste, phantasmalkiller, vampirictouch, catsgrace, shield, chainlightning, firesnake, firesnake,trueseeing,slow,slow,greaterdispel,greaterdispel);
            newAddClassLevels2.MemorizeSpells = spell_list;
            OgreMagus.ReplaceComponent(magusLevels2, newAddClassLevels2);



            var magusLevels4 = OgreMagus.ComponentsArray
     .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == MagusClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(frigidtouch, displacement, shockinggrasp, phantasmalkiller, haste, vampirictouch, mirrorimage, firesnake, firesnake, catsgrace, shield, chainlightning,trueseeing,slow,slow,greaterdispel);
            newAddClassLevels4.SelectSpells = spell_list4;
            OgreMagus.ReplaceComponent(magusLevels4, newAddClassLevels4);

            var magusLevels5 = OgreMagus.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == MagusClass);
            var newAddClassLevels5 = magusLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.RemoveFromArray(hellfireray);
            newAddClassLevels5.SelectSpells = spell_list5;
            OgreMagus.ReplaceComponent(magusLevels5, newAddClassLevels5);

            var magusLevels6 = OgreMagus.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == MagusClass);
            var newAddClassLevels6 = magusLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.SelectSpells.RemoveFromArray(hellfireray);
            newAddClassLevels6.SelectSpells = spell_list6;
            OgreMagus.ReplaceComponent(magusLevels6, newAddClassLevels6);



            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            OgreMagus.Brain.Actions = new_actions;


            var brain = OgreMagus.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castfrigidtouchogre, AiActions.castphantasmalkillermagus, AiActions.castvampirictouchogre,
                                                    AiActions.mirrorimagecyclop, AiActions.displacementvordakai, AiActions.mirrorimagerecast,
                                                    AiActions.castshockgraspogre, AiActions.casthasteherald, AiActions.castshieldsprig, AiActions.greaterdispelnird,
                                                    AiActions.castchainlightningbloodmoon, AiActions.castfiresnakeogre, AiActions.castvampiricshadowshield,AiActions.castslowogre,AiActions.trueseeing);



            OgreMagus.GetComponent<Experience>().CR = 18;

        }

        static void changeAlasen()
        {



            var Alasen = library.Get<BlueprintUnit>("4503364964491664ab4307c3dd32b88e");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var monkClass = library.Get<BlueprintCharacterClass>("e8f21e5b58e0569468e420ebea456124");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var ClawLarge1d8 = library.Get<BlueprintItemWeapon>("bef6f133e728bd74ab871e1f2072e726");
            var DebilitatingInjuryBewilderedActiveBuff = library.Get<BlueprintBuff>("116ee72b2149f4d44a330296a7e42d13");
            var DebilitatingInjuryDisorientedActiveBuff = library.Get<BlueprintBuff>("6339eac5bdcef1747ac46885d2cf4e25");
            var ThugBrutalBeatingBuff = library.Get<BlueprintBuff>("a6849b8d135a47e49a94a62e428155c7");

            
            var defensivebuff = library.Get<BlueprintBuff>("3e0146b786c064441834fc025d09a67c");
            var dragonstylebuff = library.Get<BlueprintBuff>("cc03b87fd3a797f4e953773db424cee7");

            Alasen.AddFacts = Alasen.AddFacts.AddToArray(defensivebuff,dragonstylebuff);


            Alasen.AddFacts = Alasen.AddFacts.RemoveFromArray(DebilitatingInjuryBewilderedActiveBuff);
            Alasen.AddFacts = Alasen.AddFacts.RemoveFromArray(DebilitatingInjuryDisorientedActiveBuff);
            Alasen.AddFacts = Alasen.AddFacts.RemoveFromArray(ThugBrutalBeatingBuff);

            Alasen.Strength = 24;
            Alasen.Dexterity = 17;
            Alasen.Constitution = 21;

            Alasen.Body.Armor = library.Get<BlueprintItemArmor>("c18a1d22dca8b684195633d685855d0c"); //Enforcer's Robe
            Alasen.Body.Neck = library.Get<BlueprintItemEquipmentNeck>("75ebf721bdece6342b0078a765b1f65a"); //Amulet of Mighty Fists +4
            
            Alasen.Body.PrimaryHand = null;
            Alasen.Body.AdditionalLimbs = Alasen.Body.AdditionalLimbs.RemoveFromArray(ClawLarge1d8);
            Alasen.Body.AdditionalLimbs = Alasen.Body.AdditionalLimbs.RemoveFromArray(ClawLarge1d8);


            var monkLevels = Alasen.ComponentsArray
.OfType<AddClassLevels>()
 .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = monkLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("e8f21e5b58e0569468e420ebea456124");
            newAddClassLevels.Levels = 18;
            Alasen.ReplaceComponent(monkLevels, newAddClassLevels);









            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            Alasen.Brain.Actions = new_actions;

            var brain = Alasen.Brain;
            brain.Actions = brain.Actions.AddToArray();




            Alasen.GetComponent<Experience>().CR = 18;


        }

        static void changeIrovettiGhostMage()
        {
            var IrovettiGhostMage = library.Get<BlueprintUnit>("ed076452e6743d94193eed2f1fde4d72");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var phantasmalputrification = library.Get<BlueprintAbility>("1f2e6019ece86d64baa5effa15e81ecc");
            var summongreatair = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            var WarriorClass = library.Get<BlueprintCharacterClass>("b2d9af52cf680744eb0cdc3f3034395f");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var wavesofexhaust = library.Get<BlueprintAbility>("3e4d3b9a5bd03734d9b053b9067c2f38");
            var summonvengefulspectres = library.Get<BlueprintAbility>("b820d077b4ea4c22b79b24c221b8ffe1");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var BestowCurse = library.Get<BlueprintAbility>("989ab5c44240907489aba0a8568d0603");
            var Undeadprog = library.Get<BlueprintProgression>("a1a8bf61cadaa4143b2d4966f2d1142e");
            

            var wavesoffatigue = library.Get<BlueprintAbility>("8878d0c46dfbd564e9d5756349d5e439");

        IrovettiGhostMage.Charisma = 27;


            IrovettiGhostMage.AddFacts = IrovettiGhostMage.AddFacts.AddToArray(quicken,summonvengefulspectres);



            var sorcererLevels = IrovettiGhostMage.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == WarriorClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            newAddClassLevels.Levels = 3;
            IrovettiGhostMage.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var sorcererLevels2 = IrovettiGhostMage.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels2 = sorcererLevels2.CreateCopy();
            newAddClassLevels2.Levels = 19;
            var spell_list5 = newAddClassLevels2.SelectSpells.AddToArray(displacement, haste, slow, coldicestrike,
                                                                          stoneskincommunal, mirrorimage, icyprison, boneshatter, snowball, boneshaker, shield, wavesofexhaust,boneshaker,greaterdispel);
            newAddClassLevels2.SelectSpells = spell_list5;
            IrovettiGhostMage.ReplaceComponent(sorcererLevels2, newAddClassLevels2);

            var sorcererLevels3 = IrovettiGhostMage.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels3 = sorcererLevels3.CreateCopy();
            foreach (var selection in newAddClassLevels3.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(Undeadprog);

            }
            var spell_list3 = newAddClassLevels2.SelectSpells.RemoveFromArray(coldicestrike);
            newAddClassLevels3.SelectSpells = spell_list3;
            IrovettiGhostMage.ReplaceComponent(sorcererLevels3, newAddClassLevels3);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            IrovettiGhostMage.Brain.Actions = new_actions;




            var brain = IrovettiGhostMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementghostmage, AiActions.coldicestrikeghostmageiro,
                                                     AiActions.bansheeblastghostmage, AiActions.casthasteghostmageiro, AiActions.castslowghostmage,
                                                     AiActions.stoneskincommunalghostmageiro,  AiActions.casticyprisonghostmage, AiActions.castdeathclutchghost, AiActions.wavesofexhaustghost, AiActions.castshieldsprig,
                                                     AiActions.coneofcoldghostmage, AiActions.castboneshatterghostmageiro,AiActions.castmagearmorsprig,AiActions.mirrorimage,AiActions.mirrorimagerecast,
                                                     AiActions.usesummonspectreghost,AiActions.castboneshatterghostmageiro,AiActions.greaterdispelghostmageiro,AiActions.castvampiricshadowshield,AiActions.displacementrecast);

        }

        static void changeIrovetti()
        {

            var Irovetti = library.Get<BlueprintUnit>("8b2cbf4590ed9e84591cd9a1f55bbdb8");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
           var shoutgreater = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var dirgebuff = library.Get<BlueprintBuff>("83eab9b139717ad478d84bbf48ab457f");
             var resonatingword = library.Get<BlueprintAbility>("df7d13c967bce6a40bec3ba7c9f0e64c");
            var WarriorClass = library.Get<BlueprintCharacterClass>("b2d9af52cf680744eb0cdc3f3034395f");
            var DR10 = library.Get<BlueprintFeature>("e3b18255d373c494b83b4b95956fd847");
  


            Irovetti.Charisma = 20;





            var bardLevels = Irovetti.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, shout, displacement, kishout, freedomofmovement,
                                                                    cacophonouscallmass, heroism, slow, crushingdespair, unbreakableheart, earpiercescream, haste, shoutgreater,resonatingword);
            newAddClassLevels.SelectSpells = spell_list;
            Irovetti.ReplaceComponent(bardLevels, newAddClassLevels);

            Irovetti.AddFacts = Irovetti.AddFacts.AddToArray(quicken,inspirecourage,dirgebuff,DR10);

            Irovetti.MaxHP = 120;

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);


            var warriorlevels = Irovetti.GetComponent<AddClassLevels>();
            var newwarriorLevels = warriorlevels.CreateCopy();
            newwarriorLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b2d9af52cf680744eb0cdc3f3034395f");
            newwarriorLevels.Levels = 5;
            Irovetti.AddComponent(newwarriorLevels);


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            Irovetti.Brain.Actions = new_actions;


            var brain = Irovetti.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first, AiActions.castshout, AiActions.castgoodhopeirovetti,
                                                     AiActions.casthasteirovetti, AiActions.hideouslaughternixie, AiActions.castheroism, AiActions.castslowherald, AiActions.castfreedomofmovement,
                                                      AiActions.cacophonouscallmass, AiActions.overwhelmingpresenceirovetii, AiActions.castresonatingwordirovetti,AiActions.castkishoutirovetti,
                                                     AiActions.castholdmonster, AiActions.castcrushingdespair, AiActions.earpierceirovetti, AiActions.castdominateirovetti,AiActions.castshoutgreater,AiActions.castrazoecone);





        }

        static void changeEngelidis()
        {
            var Engelidis = library.Get<BlueprintUnit>("02a8da02271a8e44788c4cd736d7294d");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var AberrationClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            
            var wavesoffatigue = library.Get<BlueprintAbility>("8878d0c46dfbd564e9d5756349d5e439");

            Engelidis.Charisma = 25;
            Engelidis.Dexterity = 20;
            Engelidis.Constitution = 24;

            Engelidis.AddFacts = Engelidis.AddFacts.AddToArray(quicken);




            var sorcererLevels2 = Engelidis.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == AberrationClass);
            var newAddClassLevels2 = sorcererLevels2.CreateCopy();
            var spell_list5 = newAddClassLevels2.SelectSpells.AddToArray(stoneskincommunal, mirrorimage, shield);
            newAddClassLevels2.SelectSpells = spell_list5;
            Engelidis.ReplaceComponent(sorcererLevels2, newAddClassLevels2);

      



            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);





            var EngelidisSeamantleAiAction = library.Get<BlueprintAiAction>("6022dfe291a28eb41804b8c3a60e402d");
            var EngelidisShieldAiAction = library.Get<BlueprintAiAction>("7600b76713e0c9348a90693ad2440d60");
            var EngelidisVampiricShadowShieldAiAction = library.Get<BlueprintAiAction>("59337a38a4564a7408092bf637b6496b");


            var brain = Engelidis.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(EngelidisSeamantleAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(EngelidisShieldAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(EngelidisVampiricShadowShieldAiAction);
            brain.Actions = brain.Actions.AddToArray( 
                                                     AiActions.stoneskincommunalengel, AiActions.castshieldsprig,
                                                     AiActions.mirrorimage, AiActions.mirrorimagerecast,
                                                     AiActions.seamantle, AiActions.castvampiricshadowshield);

        }


        //CHAPTER 6

        //Castle of Knives

        static void updateAlphaWorg()
        {

            var Alphaworg = library.Get<BlueprintUnit>("5bf2aebaafc54758a5629cf734b8c5db");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var BlurBuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");







            Alphaworg.AddFacts = Alphaworg.AddFacts.AddToArray(BlurBuff);

            var dragonLevels = Alphaworg.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == magicalbeastClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 12;
            Alphaworg.ReplaceComponent(dragonLevels, newAddClassLevels);


            Alphaworg.GetComponent<Experience>().CR = 13;

   
        }

        static void updateAlphaTreant()
        {

            var alphatreant = library.Get<BlueprintUnit>("7de49252a77abdb49b8145e384b813f4");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");

            alphatreant.Dexterity = 14;

            alphatreant.AddFacts = alphatreant.AddFacts.AddToArray(freedomofmovement,freedomofmovementbuff);


            var magicalbeastLevels = alphatreant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            alphatreant.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


            var barbarianLevels = alphatreant.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels2 = barbarianLevels.CreateCopy();
            newAddClassLevels2.Levels = 7;
            alphatreant.ReplaceComponent(barbarianLevels, newAddClassLevels2);



            var brain = alphatreant.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castfreedomofmovementshamble);


        }

        static void updateCR17Treant()
        {

            var CR17Treant = library.Get<BlueprintUnit>("b2c86a184c5f9c942aeb77e52ea1d17d");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");


            CR17Treant.Dexterity = 14;




            var magicalbeastLevels = CR17Treant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            CR17Treant.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


            var barbarianLevels = CR17Treant.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels2 = barbarianLevels.CreateCopy();
            newAddClassLevels2.Levels = 7;
            CR17Treant.ReplaceComponent(barbarianLevels, newAddClassLevels2);



       


        }


        static void updateCR8Treant()
        {

            var CR8Treant = library.Get<BlueprintUnit>("0ef5c65ca08a0204cba840f01cd415af");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");






            var magicalbeastLevels = CR8Treant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            CR8Treant.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


            var wizardLevels = CR8Treant.GetComponent<AddClassLevels>();
            var newwizardLevels = wizardLevels.CreateCopy();
            newwizardLevels.CharacterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            newwizardLevels.Levels = 5;
            CR8Treant.AddComponent(newwizardLevels);



        }


        static void updatePrimalTreant()
        {

            var PrimalTreant = library.Get<BlueprintUnit>("9b3255cd59bf09640b737cff4fbd9875");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var SickeningEntangle = library.Get<BlueprintAbility>("6c7467f0344004d48848a43d8c078bf8");
            var natarmor24 = library.Get<BlueprintUnitFact>("b6efb889cef0ac542970e578fc226c8d");
            var natarmor22 = library.Get<BlueprintUnitFact>("eee672c8f6555b445a89dbbb91361d64");
            var SlamGargantuan2d6 = library.Get<BlueprintItemWeapon>("27eee74857c42db499b3a6b20cfa6211");
            var SlamHuge3d6 = library.Get<BlueprintItemWeapon>("9ad2424212f72054e81bfdd8b0e7a29e");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var firevulnerability = library.Get<BlueprintFeature>("8e934134fec60ab4c8972c85a7b62f89");
            var lightningreflex = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");

            PrimalTreant.MaxHP = 150;


            PrimalTreant.Body.AdditionalLimbs = PrimalTreant.Body.AdditionalLimbs.RemoveFromArray(SlamGargantuan2d6);
            PrimalTreant.Body.AdditionalLimbs = PrimalTreant.Body.AdditionalLimbs.RemoveFromArray(SlamGargantuan2d6);
            PrimalTreant.Body.AdditionalLimbs = PrimalTreant.Body.AdditionalLimbs.AddToArray(SlamHuge3d6);
            PrimalTreant.Body.AdditionalLimbs = PrimalTreant.Body.AdditionalLimbs.AddToArray(SlamHuge3d6);

            PrimalTreant.AddFacts = PrimalTreant.AddFacts.RemoveFromArray(natarmor22);
            PrimalTreant.AddFacts = PrimalTreant.AddFacts.RemoveFromArray(firevulnerability);
            PrimalTreant.AddFacts = PrimalTreant.AddFacts.AddToArray(SickeningEntangle, natarmor24, chainlightning,lightningreflex,greatfortitude,IronWill,lightningbolt,freedomofmovementbuff);

            PrimalTreant.Dexterity = 16;
            PrimalTreant.Constitution = 36;
            PrimalTreant.Charisma = 38;



            var magicalbeastLevels = PrimalTreant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            PrimalTreant.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


            var barbarianLevels = PrimalTreant.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels2 = barbarianLevels.CreateCopy();
            newAddClassLevels2.Levels = 0;
            PrimalTreant.ReplaceComponent(barbarianLevels, newAddClassLevels2);

            PrimalTreant.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{PrimalTreant.name}.name", "Sparkthorn"));


            var brain = PrimalTreant.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsickeningentangle,AiActions.chainlightningtreant, AiActions.castfreedomofmovementtreant,AiActions.lightningbolttreant);



            PrimalTreant.GetComponent<Experience>().CR = 19;

        }

        static void updatecraglinnormknives()
        {

            var craglinnorm = library.Get<BlueprintUnit>("0796211163db7e04a9578aefda1777b7");
            var dragonClass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var lightningrefleximproved = library.Get<BlueprintFeature>("1e813eb8159b67a459b1c975027866e5");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");


            craglinnorm.AddFacts = craglinnorm.AddFacts.AddToArray(lightningrefleximproved, greatfortitude, IronWill);

            var dragonLevels = craglinnorm.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == dragonClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 24;
            craglinnorm.ReplaceComponent(dragonLevels, newAddClassLevels);

            craglinnorm.Constitution = 36;
            craglinnorm.Charisma = 37;
            craglinnorm.Strength = 44;
            craglinnorm.Dexterity = 24;

            craglinnorm.MaxHP = 150;

            craglinnorm.GetComponent<Experience>().CR = 20;

        }

        static void changeWrigglingManAgent()
        {

            var SatyrAgent = library.Get<BlueprintUnit>("e511bdad78f8b0143b0be6d70e611c65");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var hideouslaughterai = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var slowai = library.Get<BlueprintAiCastSpell>("d67858e438dd8834f9e61a1cb1c592a6");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var echolocation = library.Get<BlueprintAbility>("20b548bf09bb3ea4bafea78dcb4f3db6");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var virtuosoperformancebuff = library.Get<BlueprintBuff>("4524c9651b2943ce813544ae43dcb130");
            var goodhope = library.Get<BlueprintAbility>("a5e23522eda32dc45801e32c05dc9f96");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
            var inspiregreatnessbuff = library.Get<BlueprintBuff>("8618d4515685b6d4197f254b7f56a68c");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var weaponfocuslongbow = library.Get<BlueprintFeature>("f641e7c569328614c87e0270ac5325dd");
            var resonatingword = library.Get<BlueprintAbility>("df7d13c967bce6a40bec3ba7c9f0e64c");
            var songofdiscord = library.Get<BlueprintAbility>("d38aaf487e29c3d43a3bffa4a4a55f8f");
            var confusion = library.Get<BlueprintAbility>("cf6c901fb7acc904e85c63b342e9c949");

            SatyrAgent.AddFacts = SatyrAgent.AddFacts.AddToArray(inspirecourage, inspiregreatnessbuff, virtuosoperformancebuff, quicken,manyshot,rapidshotbuff,deadlyaimbuff,weaponfocuslongbow);

            var bardLevels = SatyrAgent.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == bardClass);
            var newAddClassLevels = bardLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(mirrorimage, displacement, heroism, haste, goodhope, holdmonster, echolocation,resonatingword,songofdiscord,confusion);
            newAddClassLevels.SelectSpells = spell_list;
            SatyrAgent.ReplaceComponent(bardLevels, newAddClassLevels);

            var humanoidLevels = SatyrAgent.ComponentsArray
           .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == feyClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 5;
            SatyrAgent.ReplaceComponent(humanoidLevels, newhumanoidLevels);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.goodhope);

            SatyrAgent.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f8ac61446aa93ef4794b0f7a60aead32"); //Longbow +4


            var Trebricent_ConfusionAiAction = library.Get<BlueprintAiCastSpell>("438e0f9c73c7e934cb669ad8ba4a6d16");
            var Trebricent_MindFogAiAction = library.Get<BlueprintAiCastSpell>("1faf4e6a786d01842871b232ae53e9e0");
            var Trebricent_ResonatingWordAiAction = library.Get<BlueprintAiCastSpell>("f92a7fca5a0ccf448b30e0c0ac49665b");
            var Trebricent_SongOfDiscordAiAction = library.Get<BlueprintAiCastSpell>("2205eb6ff34eb7d46a501ad8da9810ad");

            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            SatyrAgent.Brain.Actions = new_actions;


            var brain = SatyrAgent.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage,
                                                     AiActions.displacement_first, AiActions.mirrorimagerecast,
                                                     AiActions.casthastetreb, AiActions.castheroism, AiActions.castslowherald,
                                                     AiActions.virtuosoperformance, AiActions.castgoodhopetreb, AiActions.castholdmonstertreb,
                                                     AiActions.castconfusiontreb, AiActions.castmindfogtreb, AiActions.castresonatingwordtreb, AiActions.castsongofdiscordtreb, AiActions.castecholocation);





            SatyrAgent.GetComponent<Experience>().CR = 17;

        }

        static void changeWrigglingManWorm()
        {
            var WrigglingmanWorm = library.Get<BlueprintUnit>("5858be3f0653c1849bf6c7c85783dd16");
            
            var magicbeastclass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");

            WrigglingmanWorm.Constitution = 34;
            WrigglingmanWorm.Strength = 46;
            WrigglingmanWorm.Dexterity = 16;

            var magicbeastLevels = WrigglingmanWorm.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == magicbeastclass);
            var newAddClassLevels = magicbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            WrigglingmanWorm.ReplaceComponent(magicbeastLevels, newAddClassLevels);





            WrigglingmanWorm.GetComponent<Experience>().CR = 15;




        }

        static void CR13_PurpleWormAdvanced()
        {
            var PurpleWormAdvanced = library.Get<BlueprintUnit>("0439391ce3aa6494f8dbb8c4d280e2d0");

            var magicbeastclass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");

            PurpleWormAdvanced.Constitution = 34;
            PurpleWormAdvanced.Strength = 46;
            PurpleWormAdvanced.Dexterity = 16;

            var magicbeastLevels = PurpleWormAdvanced.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == magicbeastclass);
            var newAddClassLevels = magicbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            PurpleWormAdvanced.ReplaceComponent(magicbeastLevels, newAddClassLevels);





            PurpleWormAdvanced.GetComponent<Experience>().CR = 15;




        }

        static void JabberwockCastleofKnives()
        {
            var JabberwockCastle = library.Get<BlueprintUnit>("e0e5179d41fbf4546adf90cdb7909870");
            var trueseeing = library.Get<BlueprintAbility>("b3da3fbee6a751d4197e446c7e852bcb");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var TrueSeeingBuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusClaw = library.Get<BlueprintFeature>("153937f44fcd42a429a286a10babd82d");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection7 = library.Get<BlueprintUnitFact>("4f2fcce412802c1408e3b89ea8b6c17e");
            var NaturalArmor26 = library.Get<BlueprintUnitFact>("6f92384d2a6de5f4799b100571570f01");
            var NaturalArmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");
            

            JabberwockCastle.AddFacts = JabberwockCastle.AddFacts.RemoveFromArray(NaturalArmor26);
            JabberwockCastle.AddFacts = JabberwockCastle.AddFacts.AddToArray(trueseeing,WeaponFocusBite,WeaponFocusClaw,Cornugon,greatershout,toughness,deflection7,NaturalArmor19);

            JabberwockCastle.MaxHP = 70;

            JabberwockCastle.Constitution = 32;
            JabberwockCastle.Strength = 40;
            JabberwockCastle.Dexterity = 20;
            JabberwockCastle.Charisma = 26;

            var dragonLevels = JabberwockCastle.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == dragonclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 26;
            JabberwockCastle.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = JabberwockCastle.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutjabber);



        }

        static void CR20_JabberwockLesserStandard()
        {
            var Jabberwock = library.Get<BlueprintUnit>("b0dbd59f2aa5bcb48aeaa1cc76d03c36");
            var trueseeing = library.Get<BlueprintAbility>("b3da3fbee6a751d4197e446c7e852bcb");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var TrueSeeingBuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusClaw = library.Get<BlueprintFeature>("153937f44fcd42a429a286a10babd82d");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection7 = library.Get<BlueprintUnitFact>("4f2fcce412802c1408e3b89ea8b6c17e");
            var NaturalArmor26 = library.Get<BlueprintUnitFact>("6f92384d2a6de5f4799b100571570f01");
            var NaturalArmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");


            Jabberwock.AddFacts = Jabberwock.AddFacts.RemoveFromArray(NaturalArmor26);
            Jabberwock.AddFacts = Jabberwock.AddFacts.AddToArray(trueseeing, WeaponFocusBite, WeaponFocusClaw, Cornugon, greatershout, toughness, deflection7, NaturalArmor19);

            Jabberwock.MaxHP = 70;

            Jabberwock.Constitution = 32;
            Jabberwock.Strength = 40;
            Jabberwock.Dexterity = 20;
            Jabberwock.Charisma = 26;

            var dragonLevels = Jabberwock.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == dragonclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 26;
            Jabberwock.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = Jabberwock.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutjabber);



        }

        static void updateAnkou()
        {

            var Ankou = library.Get<BlueprintUnit>("58ed91a92b8d70248aa884d303954469");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");

            Ankou.AddFacts = Ankou.AddFacts.AddToArray(greatfortitude);

            Ankou.MaxHP = 40;

            Ankou.Strength = 30;
            Ankou.Constitution = 24;
            Ankou.Charisma = 28;


            var magicalbeastLevels = Ankou.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            Ankou.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


           


        }

        static void updateAnkouClone()
        {

            var Ankou = library.Get<BlueprintUnit>("704d11701a4a9ef4daee07e4593bf69c");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");

            Ankou.AddFacts = Ankou.AddFacts.AddToArray(greatfortitude);



            Ankou.Strength = 30;
            Ankou.Constitution = 24;
            Ankou.Charisma = 28;


            var magicalbeastLevels = Ankou.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            Ankou.ReplaceComponent(magicalbeastLevels, newAddClassLevels);





        }

        static void updateGhostlyGuard()

        {


            var Ghostlyguard = library.Get<BlueprintUnit>("d61f011e2ceb27f42878ff77502f1163");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var weaponfinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var Toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var CombatReflexes = library.Get<BlueprintFeature>("0f8939ae6f220984e8fb568abbdfba95");
            var DirtyTrickSickenedAction = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");



            {



                var rogueLevels = Ghostlyguard.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == rogueClass);
                var newAddClassLevels = rogueLevels.CreateCopy();
                newAddClassLevels.Levels = 16;
                Ghostlyguard.ReplaceComponent(rogueLevels, newAddClassLevels);

                var undeadLevels = Ghostlyguard.GetComponent<AddClassLevels>();
                var newundeadLevels = undeadLevels.CreateCopy();
                newundeadLevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
                newundeadLevels.Levels = 4;
                Ghostlyguard.AddComponent(newundeadLevels);


                Ghostlyguard.AddFacts = Ghostlyguard.AddFacts.AddToArray(disarm, improvedevasion, dirtytrick, weaponfinesse, Toughness, dodge, CombatReflexes);




                Ghostlyguard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("c6b3dff64bf19c84aad78f950a34c3e7"); //Rapier +4

                Ghostlyguard.GetComponent<Experience>().CR = 14;

                var brain = Ghostlyguard.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre, AiActions.usedirtytricksickened);


            }
        }

        static void CR15_ImmenseMandragora()
        {
            var ImmenseMandragora = library.Get<BlueprintUnit>("a7bebb2fc105f23408cf83a00d27baad");
            var plantclass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection5 = library.Get<BlueprintUnitFact>("aeaef63c8eb53bc4084149288d7b75ae");
            var NaturalArmor15 = library.Get<BlueprintUnitFact>("72c294dca841e3944869fb087bacf272");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusSlam = library.Get<BlueprintFeature>("8c046dfa8d1c64247af0e830a5909510");


            ImmenseMandragora.MaxHP = 100;


            ImmenseMandragora.Strength = 48;
            ImmenseMandragora.Charisma = 18;

            ImmenseMandragora.AddFacts = ImmenseMandragora.AddFacts.AddToArray(greatershout, toughness, NaturalArmor15,deflection5,WeaponFocusBite,WeaponFocusSlam);



            var dragonLevels = ImmenseMandragora.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == plantclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 22;
            ImmenseMandragora.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = ImmenseMandragora.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutmandra);



        }

        static void TrialImmenseMandragora()
        {
            var ImmenseMandragora = library.Get<BlueprintUnit>("92d501cd50cfc3a4ea1881dd5218b2f6");
            var plantclass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection5 = library.Get<BlueprintUnitFact>("aeaef63c8eb53bc4084149288d7b75ae");
            var NaturalArmor15 = library.Get<BlueprintUnitFact>("72c294dca841e3944869fb087bacf272");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusSlam = library.Get<BlueprintFeature>("8c046dfa8d1c64247af0e830a5909510");


            ImmenseMandragora.MaxHP = 100;


            ImmenseMandragora.Strength = 48;
            ImmenseMandragora.Charisma = 18;

            ImmenseMandragora.AddFacts = ImmenseMandragora.AddFacts.AddToArray(greatershout, toughness, NaturalArmor15, deflection5, WeaponFocusBite, WeaponFocusSlam);



            var dragonLevels = ImmenseMandragora.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == plantclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 22;
            ImmenseMandragora.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = ImmenseMandragora.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutmandra);



        }

        //House at the Edge of Time

        static void updateHATEOTTreant()
        {

            var CR17Treant = library.Get<BlueprintUnit>("93b10a1f0b1739a4cb73ead21cf2c100");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");


            CR17Treant.Dexterity = 16;




            var magicalbeastLevels = CR17Treant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            CR17Treant.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


            var barbarianLevels = CR17Treant.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels2 = barbarianLevels.CreateCopy();
            newAddClassLevels2.Levels = 10;
            CR17Treant.ReplaceComponent(barbarianLevels, newAddClassLevels2);






        }

        

        

        static void updateGhostlyGuardHATEOT()

        {


            var Ghostlyguard = library.Get<BlueprintUnit>("15f25a89613228040bf1d378e4c4a875");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var doubledamage = library.Get<BlueprintFeature>("8a6a1920019c45d40b4561f05dcb3240");
            var oppurtunist = library.Get<BlueprintFeature>("5bb6dc5ce00550441880a6ff8ad4c968");
            var improvedevasion = library.Get<BlueprintFeature>("0d35d6c4d5eef8d4790d09bd9a874e57");
            var dirtytrick = library.Get<BlueprintFeature>("ed699d64870044b43bb5a7fbe3f29494");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var weaponfinesse = library.Get<BlueprintFeature>("90e54424d682d104ab36436bd527af09");
            var Toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var CombatReflexes = library.Get<BlueprintFeature>("0f8939ae6f220984e8fb568abbdfba95");
            var DirtyTrickSickenedAction = library.Get<BlueprintAbility>("4921b86ee42c0b54e87a2f9b20521ab9");



            {

                Ghostlyguard.Dexterity = 22;

                Ghostlyguard.Charisma = 24;

                var rogueLevels = Ghostlyguard.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == rogueClass);
                var newAddClassLevels = rogueLevels.CreateCopy();
                newAddClassLevels.Levels = 18;
                Ghostlyguard.ReplaceComponent(rogueLevels, newAddClassLevels);

                var undeadLevels = Ghostlyguard.GetComponent<AddClassLevels>();
                var newundeadLevels = undeadLevels.CreateCopy();
                newundeadLevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
                newundeadLevels.Levels = 4;
                Ghostlyguard.AddComponent(newundeadLevels);


                Ghostlyguard.AddFacts = Ghostlyguard.AddFacts.AddToArray(disarm, improvedevasion, dirtytrick, weaponfinesse, Toughness, dodge, CombatReflexes);




                Ghostlyguard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("c6b3dff64bf19c84aad78f950a34c3e7"); //Rapier +4

                Ghostlyguard.GetComponent<Experience>().CR = 16;

                var brain = Ghostlyguard.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre, AiActions.usedirtytricksickened);


            }
        }

        static void changeGhostlyMageHATEOT()
        {
            var GhostlyMage = library.Get<BlueprintUnit>("62c5a582846f17744b2a6cdffbf4731f");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var phantasmalputrification = library.Get<BlueprintAbility>("1f2e6019ece86d64baa5effa15e81ecc");
            var summongreatair = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            var WarriorClass = library.Get<BlueprintCharacterClass>("b2d9af52cf680744eb0cdc3f3034395f");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var wavesofexhaust = library.Get<BlueprintAbility>("3e4d3b9a5bd03734d9b053b9067c2f38");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var BestowCurse = library.Get<BlueprintAbility>("989ab5c44240907489aba0a8568d0603");
            var Undeadprog = library.Get<BlueprintProgression>("a1a8bf61cadaa4143b2d4966f2d1142e");
            var MageShieldBuffPermanent = library.Get<BlueprintBuff>("f01f31b601e38034fa0460d16778a306");
            var wavesoffatigue = library.Get<BlueprintAbility>("8878d0c46dfbd564e9d5756349d5e439");



            GhostlyMage.Body.PrimaryHand = null;



            GhostlyMage.Charisma = 25;


            GhostlyMage.AddFacts = GhostlyMage.AddFacts.AddToArray(quicken);



            var sorcererLevels2 = GhostlyMage.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels2 = sorcererLevels2.CreateCopy();
            newAddClassLevels2.Levels = 18;
            var spell_list5 = newAddClassLevels2.SelectSpells.AddToArray(displacement, haste, slow, coldicestrike,
                                                                           mirrorimage, icyprison, boneshatter, snowball, boneshaker, shield, wavesofexhaust, boneshaker, greaterdispel);
            newAddClassLevels2.SelectSpells = spell_list5;
            GhostlyMage.ReplaceComponent(sorcererLevels2, newAddClassLevels2);



            var undeadLevels = GhostlyMage.GetComponent<AddClassLevels>();
            var newundeadLevels = undeadLevels.CreateCopy();
            newundeadLevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            newundeadLevels.Levels = 4;
            GhostlyMage.AddComponent(newundeadLevels);

            var sorcererLevels3 = GhostlyMage.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels3 = sorcererLevels3.CreateCopy();
            foreach (var selection in newAddClassLevels3.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(Undeadprog);

            }
            var spell_list3 = newAddClassLevels2.SelectSpells.RemoveFromArray(coldicestrike);
            newAddClassLevels3.SelectSpells = spell_list3;
            GhostlyMage.ReplaceComponent(sorcererLevels3, newAddClassLevels3);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            GhostlyMage.Brain.Actions = new_actions;




            var brain = GhostlyMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castplaguestorm,AiActions.displacementghostmage, AiActions.coldicestrikeghostmageiro,
                                                     AiActions.bansheeblastghostmage, AiActions.casthasteghostmageiro, AiActions.castslowghostmage,
                                                     AiActions.stoneskincommunalghostmageiro, AiActions.casticyprisonghostmage, AiActions.castdeathclutchghost, AiActions.wavesofexhaustghost, AiActions.castshieldsprig,
                                                     AiActions.coneofcoldghostmage, AiActions.castboneshatterghostmageiro, AiActions.castmagearmorsprig, AiActions.mirrorimage, AiActions.mirrorimagerecast,
                                                      AiActions.castboneshatterghostmageiro, AiActions.greaterdispelghostmagenormal, AiActions.castvampiricshadowshield, AiActions.displacementrecast);


            GhostlyMage.GetComponent<Experience>().CR = 16;



        }

        static void updateHATEAnkou()
        {

            var HATEAnkou = library.Get<BlueprintUnit>("b535bec3a3ee9d34eb617236238b24c4");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");

            HATEAnkou.AddFacts = HATEAnkou.AddFacts.AddToArray(greatfortitude);



            HATEAnkou.MaxHP = 40;

            HATEAnkou.Strength = 30;
            HATEAnkou.Constitution = 24;
            HATEAnkou.Charisma = 28;


            var magicalbeastLevels = HATEAnkou.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            HATEAnkou.ReplaceComponent(magicalbeastLevels, newAddClassLevels);





        }

        static void updateHATEOTNymph()

        {


            var fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var nymphclass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var hateotnymph = library.Get<BlueprintUnit>("19e471c925c1b204f90c003d19b8cfb0");
            var stormbolt = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            var creepingdoom = library.Get<BlueprintAbility>("b974af13e45639a41a04843ce1c9aa12");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            var sunburst = library.Get<BlueprintAbility>("e96424f70ff884947b06f41a765b7658");
            var seamantle = library.Get<BlueprintAbility>("7ef49f184922063499b8f1346fb7f521");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var NaturalArmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var vinetrap = library.Get<BlueprintAbility>("6d1d48a939ce475409f06e1b376bc386");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var summonelderelemental = library.Get<BlueprintAbility>("8a7f8c1223bda1541b42fd0320cdbe2b");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            var SpitVenom = library.Get<BlueprintAbility>("9779c8578acd919419f563c33d7b2af5");
            var Sirocco = library.Get<BlueprintAbility>("093ed1d67a539ad4c939d9d05cfe192c");
            var SummonNaturesAllyVII = library.Get<BlueprintAbility>("051b979e7d7f8ec41b9fa35d04746b33");
            var SummonNaturesAllyVIII = library.Get<BlueprintAbility>("ea78c04f0bd13d049a1cce5daf8d83e0");


            hateotnymph.Wisdom = 24;


            hateotnymph.AddFacts = hateotnymph.AddFacts.AddToArray(quicken, freedomofmovementbuff,lightningbolt,calllightningability);

            {


                var nymphLevels = hateotnymph.ComponentsArray
                      .OfType<AddClassLevels>()
                      .First(c => c.CharacterClass == nymphclass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 18;
                var spell_list = newnymphLevels.MemorizeSpells.AddToArray(summonelderelemental, greaterdispel, heal, stoneskincommunal, seamantle, freedomofmovement, umbralstrike, umbralstrike, calllightningstorm,
                                                                          firesnake, firesnake, coneofcold, vinetrap, barkskin, flurryofsnowballs, flurryofsnowballs, snowball, snowball, snowball, snowball);
                newnymphLevels.MemorizeSpells = spell_list;
                hateotnymph.ReplaceComponent(nymphLevels, newnymphLevels);

                var nymphLevels3 = hateotnymph.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels3 = nymphLevels3.CreateCopy();
                var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(SpitVenom);
                newAddClassLevels3.MemorizeSpells = spell_list3;
                hateotnymph.ReplaceComponent(nymphLevels3, newAddClassLevels3);

                var nymphLevels4 = hateotnymph.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels4 = nymphLevels4.CreateCopy();
                var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(Sirocco);
                newAddClassLevels4.MemorizeSpells = spell_list4;
                hateotnymph.ReplaceComponent(nymphLevels4, newAddClassLevels4);

                var nymphLevels5 = hateotnymph.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels5 = nymphLevels5.CreateCopy();
                var spell_list5 = newAddClassLevels5.MemorizeSpells.RemoveFromArray(Sirocco);
                newAddClassLevels5.MemorizeSpells = spell_list5;
                hateotnymph.ReplaceComponent(nymphLevels5, newAddClassLevels5);

                var nymphLevels6 = hateotnymph.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels6 = nymphLevels6.CreateCopy();
                var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(SummonNaturesAllyVII);
                newAddClassLevels6.MemorizeSpells = spell_list6;
                hateotnymph.ReplaceComponent(nymphLevels6, newAddClassLevels6);

                var nymphLevels7 = hateotnymph.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels7 = nymphLevels7.CreateCopy();
                var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(SummonNaturesAllyVII);
                newAddClassLevels7.MemorizeSpells = spell_list7;
                hateotnymph.ReplaceComponent(nymphLevels7, newAddClassLevels7);

                var nymphLevels8 = hateotnymph.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels8 = nymphLevels8.CreateCopy();
                var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(SummonNaturesAllyVIII);
                newAddClassLevels8.MemorizeSpells = spell_list8;
                hateotnymph.ReplaceComponent(nymphLevels8, newAddClassLevels8);

                var nymphLevels9 = hateotnymph.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == nymphclass);
                var newAddClassLevels9 = nymphLevels9.CreateCopy();
                var spell_list9 = newAddClassLevels9.MemorizeSpells.RemoveFromArray(SummonNaturesAllyVIII);
                newAddClassLevels9.MemorizeSpells = spell_list9;
                hateotnymph.ReplaceComponent(nymphLevels9, newAddClassLevels9);

                var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.seamantle);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.barkskin);

                var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

                var new_actions = dumbmonsterbrain.Actions;

                hateotnymph.Brain.Actions = new_actions;


                var brain = hateotnymph.Brain;
                brain.Actions = brain.Actions.AddToArray(AiActions.healspell, AiActions.castgreaterdispellsisterabandoned, AiActions.tarpoolnymph, AiActions.stoneskincommunalsprig,AiActions.coneofcoldbloodmoon,
                                                            AiActions.chainlightningsister, AiActions.seamantle, AiActions.castfreedomofmovement, AiActions.lightningboltsister, AiActions.umbral_strikehateot,
                                                            AiActions.castfiresnakesister, AiActions.castvinetrap, AiActions.barkskingoblinking, AiActions.summonelderearthelemental,
                                                             AiActions.castflurryofsnowballssister, AiActions.castsnowballlostsister,AiActions.calllightningnymph,AiActions.calllightningstormnymph);
            }
        }

        static void updateHATEOTElderWaterElemental()
        {

            var ElderWater = library.Get<BlueprintUnit>("633e8d41e3eb62a4ebf154324ddedc5d");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var NaturalArmor11 = library.Get<BlueprintUnitFact>("fe38367139432294e8c229edc066e4ac");
            var NaturalArmor16 = library.Get<BlueprintUnitFact>("73a90b2a70d576f429ad401e7a5a8a4f");
            

            ElderWater.MaxHP = 150;
            ElderWater.Charisma = 24;

            ElderWater.AddFacts = ElderWater.AddFacts.RemoveFromArray(NaturalArmor11);
            ElderWater.AddFacts = ElderWater.AddFacts.AddToArray(coneofcold,NaturalArmor16);

            var outsiderLevels = ElderWater.ComponentsArray
                       .OfType<AddClassLevels>()
                       .First(c => c.CharacterClass == outsiderclass);
            var newnymphLevels = outsiderLevels.CreateCopy();
            newnymphLevels.Levels = 20;
            ElderWater.ReplaceComponent(outsiderLevels, newnymphLevels);




            var brain = ElderWater.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldelderwater,AiActions.cleave);

            ElderWater.GetComponent<Experience>().CR = 16;


        }

        static void changeMedusaSorcererArcane()
        {

            var MedusaSorcerer = library.Get<BlueprintUnit>("2ed270b0aef7bc944b7539bb3fbfc017");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var monsterClass = library.Get<BlueprintCharacterClass>("8a3c86893f383214da070e9c84c1e95b");
            var summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var dragonsbreathblue = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var magusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var eldritcharcher = library.Get<BlueprintArchetype>("44388c01eb4a29d4d90a25cc0574320d");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var disintegrate = library.Get<BlueprintAbility>("4aa7942c3e62a164387a73184bca3fc1");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var scorchingray = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var weaponfocusshortbow = library.Get<BlueprintFeature>("3dfac9eea9750c14b8851852b8d77dee");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");


            MedusaSorcerer.AddFacts = MedusaSorcerer.AddFacts.AddToArray(quicken, electricalfeat,frostfeat,rapidshotbuff,rapidshot,weaponfocusshortbow);

            var magusLevels = MedusaSorcerer.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = magusLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            newAddClassLevels.Levels = 18;
            var archetype = newAddClassLevels.Archetypes.AddToArray(eldritcharcher);
            newAddClassLevels.Archetypes = archetype;
            MedusaSorcerer.ReplaceComponent(magusLevels, newAddClassLevels);

            var magusLevels2 = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(slow,  hurricanebow, displacement, InvisibilityGreater, mirrorimage,
                                                                          mirrorimage,stoneskin,haste,catsgrace,scorchingray,scorchingray,snowball,snowball,scorchingray,controlledfireball,controlledfireball,balefulpolymorph,snowball,hellfireray,hellfireray);
            newAddClassLevels2.MemorizeSpells = spell_list;
            MedusaSorcerer.ReplaceComponent(magusLevels2, newAddClassLevels2);

            var magusLevels4 = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(slow, mirrorimage, InvisibilityGreater, hurricanebow, displacement, haste,stoneskin,catsgrace,shockinggrasp,scorchingray,controlledfireball,lightningbolt,balefulpolymorph,snowball,hellfireray);
            newAddClassLevels4.SelectSpells = spell_list4;
            MedusaSorcerer.ReplaceComponent(magusLevels4, newAddClassLevels4);

            var abberationLevels = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == monsterClass);
            var newAddClassLevels3 = abberationLevels.CreateCopy();
            newAddClassLevels3.Levels = 6;
            MedusaSorcerer.ReplaceComponent(abberationLevels, newAddClassLevels3);

            MedusaSorcerer.Intelligence = 26;
            MedusaSorcerer.Dexterity = 28;
            MedusaSorcerer.Strength = 20;
            MedusaSorcerer.Charisma = 17;

            MedusaSorcerer.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2f1673e87242d2941a1e49b850dbc9f2"); //shortbow +3
            MedusaSorcerer.Body.Head = library.Get<BlueprintItemEquipmentHead>("b9b49933be6ac7f4aa3c71c602227332"); //Headband of Mental Perfection +2
            MedusaSorcerer.Body.Wrist = library.Get<BlueprintItemEquipmentWrist>("4811d69bde8fb0243b61c2b41300ebe7"); //Bracers of Armor +6




            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);




            var brain = MedusaSorcerer.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage,AiActions.mirrorimagerecast, AiActions.hurricanebowgoblinking,AiActions.castcatsgrace,AiActions.displacementvordakai,
                                                    AiActions.stoneskin, AiActions.castphantasmalkillermagus,  AiActions.castscorchingraymedusa, AiActions.castinvisibilitygreater, AiActions.casthastemedusa,
                                                    AiActions.castcontrolledfireballmedusa,AiActions.castlightningboltmedusa,AiActions.castbalefulpolymorphmedusa,AiActions.castsnowballmedusa,AiActions.casthellfireraymedusa);


        }

        static void changeMedusaSorcererDivine()
        {

            var MedusaSorcerer = library.Get<BlueprintUnit>("a1c4c86d82cbadb4b8169de35f2cf113");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var monsterClass = library.Get<BlueprintCharacterClass>("8a3c86893f383214da070e9c84c1e95b");
            var summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var dragonsbreathblue = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var magusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var eldritcharcher = library.Get<BlueprintArchetype>("44388c01eb4a29d4d90a25cc0574320d");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var disintegrate = library.Get<BlueprintAbility>("4aa7942c3e62a164387a73184bca3fc1");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var scorchingray = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var weaponfocusshortbow = library.Get<BlueprintFeature>("3dfac9eea9750c14b8851852b8d77dee");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");

            MedusaSorcerer.AddFacts = MedusaSorcerer.AddFacts.AddToArray(quicken, electricalfeat, frostfeat, rapidshotbuff, rapidshot, weaponfocusshortbow);

            var magusLevels = MedusaSorcerer.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = magusLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            newAddClassLevels.Levels = 18;
            var archetype = newAddClassLevels.Archetypes.AddToArray(eldritcharcher);
            newAddClassLevels.Archetypes = archetype;
            MedusaSorcerer.ReplaceComponent(magusLevels, newAddClassLevels);

            var magusLevels2 = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(slow, hurricanebow, displacement, InvisibilityGreater, mirrorimage,
                                                                          mirrorimage, stoneskin, haste, catsgrace, scorchingray, scorchingray, snowball, snowball, scorchingray, controlledfireball, controlledfireball, balefulpolymorph, snowball, hellfireray, hellfireray);
            newAddClassLevels2.MemorizeSpells = spell_list;
            MedusaSorcerer.ReplaceComponent(magusLevels2, newAddClassLevels2);

            var magusLevels4 = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(slow, mirrorimage, InvisibilityGreater, hurricanebow, displacement, haste, stoneskin, catsgrace, shockinggrasp, scorchingray, controlledfireball, lightningbolt, balefulpolymorph, snowball, hellfireray);
            newAddClassLevels4.SelectSpells = spell_list4;
            MedusaSorcerer.ReplaceComponent(magusLevels4, newAddClassLevels4);

            var abberationLevels = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == monsterClass);
            var newAddClassLevels3 = abberationLevels.CreateCopy();
            newAddClassLevels3.Levels = 6;
            MedusaSorcerer.ReplaceComponent(abberationLevels, newAddClassLevels3);

            MedusaSorcerer.Intelligence = 26;
            MedusaSorcerer.Dexterity = 28;
            MedusaSorcerer.Strength = 20;
            MedusaSorcerer.Charisma = 17;

            MedusaSorcerer.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2f1673e87242d2941a1e49b850dbc9f2"); //shortbow +3
            MedusaSorcerer.Body.Head = library.Get<BlueprintItemEquipmentHead>("b9b49933be6ac7f4aa3c71c602227332"); //Headband of Mental Perfection +2
            MedusaSorcerer.Body.Wrist = library.Get<BlueprintItemEquipmentWrist>("4811d69bde8fb0243b61c2b41300ebe7"); //Bracers of Armor +6




            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);




            var brain = MedusaSorcerer.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.mirrorimagerecast, AiActions.hurricanebowgoblinking, AiActions.castcatsgrace, AiActions.displacementvordakai,
                                                    AiActions.stoneskin, AiActions.castphantasmalkillermagus, AiActions.castscorchingraymedusa, AiActions.castinvisibilitygreater, AiActions.casthastemedusa,
                                                    AiActions.castcontrolledfireballmedusa, AiActions.castlightningboltmedusa, AiActions.castbalefulpolymorphmedusa, AiActions.castsnowballmedusa, AiActions.casthellfireraymedusa);


        }

        static void changeHATEOTMedusa()
        {

            var MedusaSorcerer = library.Get<BlueprintUnit>("09faf70175679be42867590d2af100b8");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var monsterClass = library.Get<BlueprintCharacterClass>("8a3c86893f383214da070e9c84c1e95b");
            var summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var dragonsbreathblue = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var magusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var eldritcharcher = library.Get<BlueprintArchetype>("44388c01eb4a29d4d90a25cc0574320d");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var disintegrate = library.Get<BlueprintAbility>("4aa7942c3e62a164387a73184bca3fc1");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var scorchingray = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var weaponfocusshortbow = library.Get<BlueprintFeature>("3dfac9eea9750c14b8851852b8d77dee");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var branded = library.Get<BlueprintUnitTemplate>("b3fb486ae387c6b4ab8bc52afa6d4131");
            var SpellFocusTransmutation = library.Get<BlueprintFeature>("49907a2e51b49d641aad3c9781a3a698");
            var GreaterSpellFocusTransmutation = library.Get<BlueprintFeature>("74fd23356fc4c9847986d48f1a40bc7a");



            MedusaSorcerer.AdditionalTemplates = MedusaSorcerer.AdditionalTemplates.RemoveFromArray(branded);

            MedusaSorcerer.AddFacts = MedusaSorcerer.AddFacts.RemoveFromArray(deadlyaimbuff);
            MedusaSorcerer.AddFacts = MedusaSorcerer.AddFacts.AddToArray(quicken, electricalfeat, frostfeat, rapidshotbuff, rapidshot, weaponfocusshortbow,SpellFocusTransmutation,GreaterSpellFocusTransmutation);

            var magusLevels = MedusaSorcerer.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = magusLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            newAddClassLevels.Levels = 18;
            var archetype = newAddClassLevels.Archetypes.AddToArray(eldritcharcher);
            newAddClassLevels.Archetypes = archetype;
            MedusaSorcerer.ReplaceComponent(magusLevels, newAddClassLevels);

            var magusLevels2 = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(slow, hurricanebow, displacement, InvisibilityGreater, mirrorimage,
                                                                          mirrorimage, stoneskin, haste, catsgrace, scorchingray, scorchingray,shield, snowball, snowball, scorchingray, controlledfireball, controlledfireball, balefulpolymorph, snowball, hellfireray, hellfireray);
            newAddClassLevels2.MemorizeSpells = spell_list;
            MedusaSorcerer.ReplaceComponent(magusLevels2, newAddClassLevels2);

            var magusLevels4 = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(slow, mirrorimage, InvisibilityGreater, hurricanebow, displacement, haste,shield, stoneskin, catsgrace, shockinggrasp, scorchingray, controlledfireball, lightningbolt, balefulpolymorph, snowball, hellfireray);
            newAddClassLevels4.SelectSpells = spell_list4;
            MedusaSorcerer.ReplaceComponent(magusLevels4, newAddClassLevels4);

            var abberationLevels = MedusaSorcerer.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == monsterClass);
            var newAddClassLevels3 = abberationLevels.CreateCopy();
            newAddClassLevels3.Levels = 6;
            MedusaSorcerer.ReplaceComponent(abberationLevels, newAddClassLevels3);

            MedusaSorcerer.Intelligence = 26;
            MedusaSorcerer.Dexterity = 28;
            MedusaSorcerer.Strength = 20;
            MedusaSorcerer.Charisma = 17;

            MedusaSorcerer.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("2f1673e87242d2941a1e49b850dbc9f2"); //shortbow +3
            MedusaSorcerer.Body.Head = library.Get<BlueprintItemEquipmentHead>("b9b49933be6ac7f4aa3c71c602227332"); //Headband of Mental Perfection +2
            MedusaSorcerer.Body.Wrist = library.Get<BlueprintItemEquipmentWrist>("4811d69bde8fb0243b61c2b41300ebe7"); //Bracers of Armor +6




            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);




            var brain = MedusaSorcerer.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.mirrorimagerecast, AiActions.hurricanebowgoblinking, AiActions.castcatsgrace, AiActions.displacementvordakai, AiActions.castshieldsprig,
                                                    AiActions.stoneskin, AiActions.castphantasmalkillermagus, AiActions.castscorchingraymedusa, AiActions.castinvisibilitygreater, AiActions.casthastemedusa,
                                                    AiActions.castcontrolledfireballmedusa, AiActions.castlightningboltmedusa, AiActions.castbalefulpolymorphmedusa, AiActions.castsnowballmedusa, AiActions.casthellfireraymedusa);


        }

        static void changeMedusaPhomandala()
        {

            var MedusaPhomandala = library.Get<BlueprintUnit>("5e656378f2d6e6c428938d06de0ee677");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var monsterClass = library.Get<BlueprintCharacterClass>("8a3c86893f383214da070e9c84c1e95b");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var dragonsbreathblue = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var hurricanebow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var magusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var eldritcharcher = library.Get<BlueprintArchetype>("44388c01eb4a29d4d90a25cc0574320d");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var disintegrate = library.Get<BlueprintAbility>("4aa7942c3e62a164387a73184bca3fc1");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var scorchingray = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var balefulpolymorph = library.Get<BlueprintAbility>("3105d6e9febdc3f41a08d2b7dda1fe74");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var weaponfocusshortbow = library.Get<BlueprintFeature>("3dfac9eea9750c14b8851852b8d77dee");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var BarkskinFixedBuff5 = library.Get<BlueprintBuff>("063773c63d55dd94a94f9ffe3e710f95");
            var MageShieldBuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var EcholocationBuff = library.Get<BlueprintBuff>("cbfd2f5279f5946439fe82570fd61df2");
            var TrueSeeingBuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var VampiricShadowShieldBuff = library.Get<BlueprintBuff>("b23eb856f521ba041bccd05a0e472604");
            var vampireshield = library.Get<BlueprintAbility>("a34921035f2a6714e9be5ca76c5e34b5");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");



            MedusaPhomandala.AddFacts = MedusaPhomandala.AddFacts.RemoveFromArray(catsgracebuff);
            MedusaPhomandala.AddFacts = MedusaPhomandala.AddFacts.RemoveFromArray(EcholocationBuff);
            MedusaPhomandala.AddFacts = MedusaPhomandala.AddFacts.RemoveFromArray(TrueSeeingBuff);
            MedusaPhomandala.AddFacts = MedusaPhomandala.AddFacts.RemoveFromArray(VampiricShadowShieldBuff);
            MedusaPhomandala.AddFacts = MedusaPhomandala.AddFacts.RemoveFromArray(MageShieldBuff);
            MedusaPhomandala.AddFacts = MedusaPhomandala.AddFacts.RemoveFromArray(BarkskinFixedBuff5);
            MedusaPhomandala.AddFacts = MedusaPhomandala.AddFacts.AddToArray(quicken, electricalfeat, frostfeat, rapidshotbuff, rapidshot, weaponfocusshortbow,boneshatter);

            var magusLevels = MedusaPhomandala.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = magusLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            newAddClassLevels.Levels = 20;
            var archetype = newAddClassLevels.Archetypes.AddToArray(eldritcharcher);
            newAddClassLevels.Archetypes = archetype;
            MedusaPhomandala.ReplaceComponent(magusLevels, newAddClassLevels);

            var magusLevels2 = MedusaPhomandala.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels2 = magusLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(slow, hurricanebow, displacement, InvisibilityGreater, firesnake,firesnake,
                                                                          mirrorimage, stoneskin, haste, catsgrace, scorchingray, scorchingray, mirrorimage,
                                                                          snowball, snowball, scorchingray, balefulpolymorph, snowball,vampireshield,disintegrate,disintegrate,disintegrate,disintegrate,disintegrate);
            newAddClassLevels2.MemorizeSpells = spell_list;
            MedusaPhomandala.ReplaceComponent(magusLevels2, newAddClassLevels2);

            var magusLevels4 = MedusaPhomandala.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == magusClass);
            var newAddClassLevels4 = magusLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(slow, mirrorimage, InvisibilityGreater, hurricanebow, firesnake, displacement, haste, stoneskin, catsgrace, shockinggrasp, scorchingray, controlledfireball,disintegrate, balefulpolymorph, snowball, hellfireray,vampireshield);
            newAddClassLevels4.SelectSpells = spell_list4;
            MedusaPhomandala.ReplaceComponent(magusLevels4, newAddClassLevels4);

            var abberationLevels = MedusaPhomandala.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == monsterClass);
            var newAddClassLevels3 = abberationLevels.CreateCopy();
            newAddClassLevels3.Levels = 8;
            MedusaPhomandala.ReplaceComponent(abberationLevels, newAddClassLevels3);

            MedusaPhomandala.Intelligence = 26;
            MedusaPhomandala.Dexterity = 28;
            MedusaPhomandala.Strength = 20;
            MedusaPhomandala.Charisma = 17;

            MedusaPhomandala.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("327cd32ab719b1042bef7c45222eedf4"); //shortbow +4
            MedusaPhomandala.Body.Head = library.Get<BlueprintItemEquipmentHead>("df2aa195ecce07c4c8dcabb5ea8c696e"); //Headband of Mental Perfection +4
            MedusaPhomandala.Body.Wrist = library.Get<BlueprintItemEquipmentWrist>("4811d69bde8fb0243b61c2b41300ebe7"); //Bracers of Armor +6
            MedusaPhomandala.Body.Ring1  = library.Get<BlueprintItemEquipmentRing>("31315100c28e6a2418396fb152466fcd"); //Ring of Prot +3
            MedusaPhomandala.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("04dff7841c5f499478c91487d9bbdcef"); //Cloak of Protection +2


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);




            var brain = MedusaPhomandala.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.mirrorimagerecast, AiActions.hurricanebowgoblinking, AiActions.castcatsgrace, AiActions.displacementvordakai,AiActions.castvampiricshadowshield,
                                                    AiActions.stoneskin, AiActions.castphantasmalkillermagus, AiActions.castscorchingraymedusa, AiActions.castinvisibilitygreater, 
                                                    AiActions.casthastemedusa, AiActions.trueseeing, AiActions.castdisintegratearcane,
                                                    AiActions.castcontrolledfireballmedusa, AiActions.castlightningboltmedusa, AiActions.castbalefulpolymorphmedusa, AiActions.castsnowballmedusa, AiActions.casthellfireraymedusa);


        }

        static void updateMisbegottenTroll()
        {


            
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var MisbegottenTroll = library.Get<BlueprintUnit>("872755872c228ee4c8428fd1567523ea");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var MisbegottenTrollFeatures = library.Get<BlueprintFeature>("5b79afbe20f63d5488516f9e3db95c11");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var NaturalArmor15 = library.Get<BlueprintUnitFact>("72c294dca841e3944869fb087bacf272");
            var deflectionarmor9 = library.Get<BlueprintUnitFact>("3d6b4c5d23d7d7a4c8b338b995d32b8b");
            var NaturalArmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var unholyaura = library.Get<BlueprintAbility>("47f9cb1c367a5e4489cfa32fce290f86");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var constrictingcoils = library.Get<BlueprintAbility>("3fce8e988a51a2a4ea366324d6153001");
            var coldicestrike = library.Get<BlueprintAbility>("5ef85d426783a5347b420546f91a677b");
            var HealCast = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var UnholyAura = library.Get<BlueprintAbility>("47f9cb1c367a5e4489cfa32fce290f86");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var FrightfulAspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            var summondamnedtrolls = library.Get<BlueprintAbility>("79b350e94db34296bc9c028880a96f2b");

            MisbegottenTroll.AddFacts = MisbegottenTroll.AddFacts.RemoveFromArray(NaturalArmor15);
            MisbegottenTroll.AddFacts = MisbegottenTroll.AddFacts.AddToArray(improvedinitiative,combatcasting,deflectionarmor9,NaturalArmor6,quicken,summondamnedtrolls);





            MisbegottenTroll.MaxHP = 100;


            var humanoidLevels = MisbegottenTroll.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 10;
            MisbegottenTroll.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var clericLevels2 = MisbegottenTroll.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(prayer,coldicestrike,coldicestrike,constrictingcoils,constrictingcoils);
            newAddClassLevels2.MemorizeSpells = spell_list;
            MisbegottenTroll.ReplaceComponent(clericLevels2, newAddClassLevels2);

            var clericLevels3 = MisbegottenTroll.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(HealCast);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            MisbegottenTroll.ReplaceComponent(clericLevels3, newAddClassLevels3);

            var clericLevels4 = MisbegottenTroll.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.MemorizeSpells.RemoveFromArray(HealCast);
            newAddClassLevels4.MemorizeSpells = spell_list4;
            MisbegottenTroll.ReplaceComponent(clericLevels4, newAddClassLevels4);

            var clericLevels5 = MisbegottenTroll.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.MemorizeSpells.RemoveFromArray(UnholyAura);
            newAddClassLevels5.MemorizeSpells = spell_list5;
            MisbegottenTroll.ReplaceComponent(clericLevels5, newAddClassLevels5);

  

            var clericLevels6 = MisbegottenTroll.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(FrightfulAspect);
            newAddClassLevels6.MemorizeSpells = spell_list6;
            MisbegottenTroll.ReplaceComponent(clericLevels6, newAddClassLevels6);

            var clericLevels7 = MisbegottenTroll.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(FrightfulAspect);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            MisbegottenTroll.ReplaceComponent(clericLevels7, newAddClassLevels7);


            MisbegottenTroll.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("ded1c626212256641ae0fb07b7944711"); //Longspear +4


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            MisbegottenTroll.Brain.Actions = new_actions;

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            MisbegottenTroll.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{MisbegottenTroll.name}.name", "Dugokur the Misbegotten"));


            var brain = MisbegottenTroll.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.unholyaura,AiActions.castdivinepowerdelaypitax,AiActions.frightfulaspect, AiActions.castsummondamnedtrolls,
                 AiActions.prayerbandit,AiActions.castconstrictingmisbegotten,AiActions.coldicestrikeghostmage,AiActions.Casthealspellmisbegotten);


        }

        static void updateDamnedTroll()
        {


            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var TrollGuard = library.Get<BlueprintUnit>("1f35ffdfefb2442bb6f4d970831e44d6");
            var TrollClaw = library.Get<BlueprintItemWeapon>("de21b6c00e6adaa409a6e7c2ae9f87f4");
            var Claw2d6 = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221");
            var cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var GhostFX = library.Get<BlueprintBuff>("20f79fea035330b479fc899fa201d232");
            var UndeadType = library.Get<BlueprintFeature>("734a29b693e9ec346ba2951b27987e33");
            var UnholyGrace = library.Get<BlueprintFeature>("2334cca051360914d970839e81b1f7d9");
            var CorruptingTouchCast = library.Get<BlueprintAbility>("fb69d7e34d4892a4ab548dc1c08d6d0b");
            var FrightfulMoan = library.Get<BlueprintAbility>("3e356401077df2c4dbdc3e8a089f32a9");
            var Incorporeal = library.Get<BlueprintFeature>("c4a7f98d743bc784c9d4cf2105852c39");
            var Unlootable = library.Get<BlueprintBuff>("0f775c7d5d8b6494197e1ce937754482");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var RegenerationAcidOrFire5 = library.Get<BlueprintBuff>("ac95eba4690dbca46b9a2ab18f656d4f");
            var BearsEnduranceBuff = library.Get<BlueprintBuff>("c3de8cc9a0f50e2418dde526d8855faa");

            TrollGuard.AddFacts = TrollGuard.AddFacts.RemoveFromArray(BearsEnduranceBuff);
            TrollGuard.AddFacts = TrollGuard.AddFacts.RemoveFromArray(RegenerationAcidOrFire5);
            TrollGuard.AddFacts = TrollGuard.AddFacts.AddToArray(cornugon, improvedinitiative, powerattackfeature,GhostFX,UndeadType,Incorporeal,Unlootable);

            TrollGuard.Skills.Diplomacy = 15;

            TrollGuard.Strength = 32;
            TrollGuard.Dexterity = 26;
            TrollGuard.Charisma = 30;
            TrollGuard.MaxHP = 50;


            var undeadLevels = TrollGuard.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == humanoidClass);
            var newundeadLevels = undeadLevels.CreateCopy();
            newundeadLevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            newundeadLevels.Levels = 8;
            TrollGuard.ReplaceComponent(undeadLevels, newundeadLevels);


            

            var fighterLevels = TrollGuard.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == fighterClass);
            var newfighterLevels = fighterLevels.CreateCopy();
            newfighterLevels.Levels = 14;
            TrollGuard.ReplaceComponent(fighterLevels, newfighterLevels);

            TrollGuard.Body.Armor = library.Get<BlueprintItemArmor>("61787c56c01996f4c82866aca8fb0187"); //Full plate +2
            TrollGuard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw
            TrollGuard.Body.SecondaryHand = library.Get<BlueprintItemWeapon>("75254f19ca6e1d048a88b7545bb65221"); //2d6 Claw

            TrollGuard.GetComponent<Experience>().CR = 16;

        }

        static void updateKargstaad()
        {


            var Kargstaad = library.Get<BlueprintUnit>("f89d8d26b9265e44f8836274a2ad4944");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var DeadlyAccuracyFeature = library.Get<BlueprintFeature>("c841ffa13d39ce442a408f57feb3cb8e");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var LethalStance = library.Get<BlueprintFeature>("e4450dd9c06dc034fb7c0c08abcc202b");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var summonfrostgiants = library.Get<BlueprintAbility>("90c17d807cb04d5b9045480d1eef447c");

        Kargstaad.AddFacts = Kargstaad.AddFacts.AddToArray(Cornugon, DeadlyAccuracyFeature,LethalStance,frostfeat,summonfrostgiants);


            var barbarianLevels = Kargstaad.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            Kargstaad.ReplaceComponent(barbarianLevels, newAddClassLevels);


            var humanoidLevels = Kargstaad.ComponentsArray
           .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 8;
            Kargstaad.ReplaceComponent(humanoidLevels, newhumanoidLevels);


            Kargstaad.MaxHP = 120;
            Kargstaad.Dexterity = 14;


            Kargstaad.Body.Armor = library.Get<BlueprintItemArmor>("1d79532dae535f74b8cca70c330e20c3"); //Cloak of Protection +5
            Kargstaad.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("096125bfb3b364849b02ab65297f71de"); //Cloak of Protection +4
            Kargstaad.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("1c8d2d0358c664447bc9bff52220f027"); //Ring of Protection +4
            Kargstaad.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("20d5739babbde7442903909a44437fcf"); //Greataxe +5
            

            var brain = Kargstaad.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave,AiActions.castsummonfrostgiants);

        }

        static void updateHATEOT_FrostGiant()
        {


            var HATEOT_FrostGiant = library.Get<BlueprintUnit>("6828d36959036054895d1b9cc0094d96");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var dodge = library.Get<BlueprintFeature>("97e216dbb46ae3c4faef90cf6bbe6fd5");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");

            HATEOT_FrostGiant.AddFacts = HATEOT_FrostGiant.AddFacts.AddToArray(frostfeat,lightningreflexes,dodge,IronWill);



            var barbarianLevels = HATEOT_FrostGiant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 14;
            HATEOT_FrostGiant.ReplaceComponent(barbarianLevels, newAddClassLevels);


            var humanoidLevels = HATEOT_FrostGiant.ComponentsArray
           .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 6;
            HATEOT_FrostGiant.ReplaceComponent(humanoidLevels, newhumanoidLevels);


            HATEOT_FrostGiant.MaxHP = 60;



            HATEOT_FrostGiant.Body.Armor = library.Get<BlueprintItemArmor>("22c16b38998ebf342acdccba4f55a3b6"); //Chainmail +3

            HATEOT_FrostGiant.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("61c1565f7a9eeb74799d27f526718f40"); //Greataxe +3
            

            var brain = HATEOT_FrostGiant.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);

        }

        static void updateHATEOT_Satyr()
        {


            var HATEOT_Satyr = library.Get<BlueprintUnit>("5d430073a80ce0c43bb7eeac6984ce94");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var longbowspec = library.Get<BlueprintFeature>("63f67a2a2e10f024281f0d6cb196d421");
            var longbowfocus = library.Get<BlueprintFeature>("f641e7c569328614c87e0270ac5325dd");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var natarmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var natarmor5 = library.Get<BlueprintUnitFact>("7661741dbb9604842a642457456fd0e4");
            

            HATEOT_Satyr.AddFacts = HATEOT_Satyr.AddFacts.RemoveFromArray(natarmor5);
            HATEOT_Satyr.AddFacts = HATEOT_Satyr.AddFacts.AddToArray(pointblank,preciseshot,manyshot,rapidshot,rapidshot,rapidshotbuff,longbowfocus,longbowspec,
                                                        toughness,deadlyaim,deadlyaimbuff,greatfortitude,lightningreflexes,natarmor8);


            HATEOT_Satyr.Strength = 24;
            HATEOT_Satyr.Dexterity = 26;
            HATEOT_Satyr.Constitution = 20;
            HATEOT_Satyr.MaxHP = 50;



            HATEOT_Satyr.GetComponent<Experience>().CR = 12;

            HATEOT_Satyr.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("426c900c0787c844c85bb4ac8cba6d27"); //Longbow +3

            var feyLevels = HATEOT_Satyr.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = feyLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            HATEOT_Satyr.ReplaceComponent(feyLevels, newAddClassLevels);






        }

        static void updateHornedHunter()
        {


            var HornedHunter = library.Get<BlueprintUnit>("9f7dac682325ee34685b5ca867cb52af");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var longbowspec = library.Get<BlueprintFeature>("63f67a2a2e10f024281f0d6cb196d421");
            var longbowfocus = library.Get<BlueprintFeature>("f641e7c569328614c87e0270ac5325dd");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var rangerClass = library.Get<BlueprintCharacterClass>("cda0615668a6df14eb36ba19ee881af6");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var natarmor12 = library.Get<BlueprintUnitFact>("0b2d92c6aac8093489dfdadf1e448280");
  

            HornedHunter.AddFacts = HornedHunter.AddFacts.AddToArray(pointblank, preciseshot, manyshot, rapidshot, rapidshot, rapidshotbuff, longbowfocus, longbowspec,
                                                        toughness, deadlyaim, deadlyaimbuff, greatfortitude, lightningreflexes,natarmor12);


            HornedHunter.Strength = 26;
            HornedHunter.Dexterity = 30;
            HornedHunter.Constitution = 24;
            HornedHunter.MaxHP = 80;




            HornedHunter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f8ac61446aa93ef4794b0f7a60aead32"); //Longbow +4

            var fighterLevels = HornedHunter.ComponentsArray
 .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == rangerClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            newAddClassLevels.Levels = 18;
            HornedHunter.ReplaceComponent(fighterLevels, newAddClassLevels);




        }

        static void updateKnurlyWitch()
        {



            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var KnurlyWitch = library.Get<BlueprintUnit>("d220f02aa44e1454e8b311c0a34fa587");
            var frightfulaspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var monsterClass = library.Get<BlueprintCharacterClass>("8a3c86893f383214da070e9c84c1e95b");
            var summontreants = library.Get<BlueprintAbility>("b4beebe9cb3f4ca8967b1257289c23ea");
            var cloakofchaos = library.Get<BlueprintAbility>("9155dbc8268da1c49a7fc4834fa1a4b1");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var deflectionarmor10 = library.Get<BlueprintUnitFact>("2cee03e71cc3656438b3d49abefbefcf");
            var NaturalArmor15 = library.Get<BlueprintUnitFact>("72c294dca841e3944869fb087bacf272");
            var NaturalArmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var HarmCast = library.Get<BlueprintAbility>("cc09224ecc9af79449816c45bc5be218");
            var HealCast = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var inflictseriousmass = library.Get<BlueprintAbility>("820170444d4d2a14abc480fcbdb49535");
            var Destruction = library.Get<BlueprintAbility>("3b646e1db3403b940bf620e01d2ce0c7");
            var Weird = library.Get<BlueprintAbility>("870af83be6572594d84d276d7fc583e0");
            var overwhelmingpresence = library.Get<BlueprintAbility>("41cf93453b027b94886901dbfc680cb9");
            var MadnessDomainSpellListFeature = library.Get<BlueprintFeature>("130f72a5bff6961478b07a64bac50498");
            var MadnessDomainSpellList = library.Get<BlueprintSpellList>("1d1638d47e7f8404baeed23bc35ec2f2");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var wavesofecstasy = library.Get<BlueprintAbility>("1e2d1489781b10a45a3b70192bba9be3");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");

            KnurlyWitch.AddFacts = KnurlyWitch.AddFacts.RemoveFromArray(NaturalArmor15);
            KnurlyWitch.AddFacts = KnurlyWitch.AddFacts.AddToArray(summontreants,deflectionarmor10,NaturalArmor9,Weird,quicken);





            KnurlyWitch.MaxHP = 300;
            KnurlyWitch.Charisma = 34;

            var humanoidLevels = KnurlyWitch.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == monsterClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 10;
            KnurlyWitch.ReplaceComponent(humanoidLevels, newhumanoidLevels);

            var clericLevels2 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(frightfulaspect,prayer,greaterdispel,greaterdispel,inflictseriousmass, divinepower,
                                                                             inflictseriousmass,overwhelmingpresence,flamestrike,flamestrike);
            newAddClassLevels2.MemorizeSpells = spell_list;
            KnurlyWitch.ReplaceComponent(clericLevels2, newAddClassLevels2);




        
      


            var clericLevels4 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels4 = clericLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(frightfulaspect,Weird);
            newAddClassLevels2.SelectSpells = spell_list4;
            KnurlyWitch.ReplaceComponent(clericLevels4, newAddClassLevels4);

            var clericLevels3 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels3 = clericLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(cloakofchaos);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            KnurlyWitch.ReplaceComponent(clericLevels3, newAddClassLevels3);



            var clericLevels5 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels5 = clericLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.MemorizeSpells.RemoveFromArray(HarmCast);
            newAddClassLevels5.MemorizeSpells = spell_list5;
            KnurlyWitch.ReplaceComponent(clericLevels5, newAddClassLevels5);

            var clericLevels6 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels6 = clericLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(HarmCast);
            newAddClassLevels6.MemorizeSpells = spell_list6;
            KnurlyWitch.ReplaceComponent(clericLevels6, newAddClassLevels6);

            var clericLevels7 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels7 = clericLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(HarmCast);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            KnurlyWitch.ReplaceComponent(clericLevels7, newAddClassLevels7);

            var clericLevels8 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels8 = clericLevels8.CreateCopy();
            var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(HarmCast);
            newAddClassLevels8.MemorizeSpells = spell_list8;
            KnurlyWitch.ReplaceComponent(clericLevels8, newAddClassLevels8);

            var clericLevels9 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels9 = clericLevels9.CreateCopy();
            var spell_list9 = newAddClassLevels9.MemorizeSpells.RemoveFromArray(HealCast);
            newAddClassLevels9.MemorizeSpells = spell_list9;
            KnurlyWitch.ReplaceComponent(clericLevels9, newAddClassLevels9);

            var clericLevels10 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels10 = clericLevels10.CreateCopy();
            var spell_list10 = newAddClassLevels10.MemorizeSpells.RemoveFromArray(Destruction);
            newAddClassLevels10.MemorizeSpells = spell_list10;
            KnurlyWitch.ReplaceComponent(clericLevels10, newAddClassLevels10);

            var clericLevels11 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels11 = clericLevels11.CreateCopy();
            var spell_list11 = newAddClassLevels11.MemorizeSpells.RemoveFromArray(Destruction);
            newAddClassLevels11.MemorizeSpells = spell_list11;
            KnurlyWitch.ReplaceComponent(clericLevels11, newAddClassLevels11);

            var clericLevels12 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels12 = clericLevels12.CreateCopy();
            var spell_list12 = newAddClassLevels12.MemorizeSpells.RemoveFromArray(boneshatter);
            newAddClassLevels12.MemorizeSpells = spell_list12;
            KnurlyWitch.ReplaceComponent(clericLevels12, newAddClassLevels12);


            var clericLevels15 = KnurlyWitch.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == clericClass);
            var newAddClassLevels15 = clericLevels15.CreateCopy();
            var spell_list15 = newAddClassLevels15.MemorizeSpells.RemoveFromArray(boneshatter);
            newAddClassLevels15.MemorizeSpells = spell_list15;
            KnurlyWitch.ReplaceComponent(clericLevels15, newAddClassLevels15);


            KnurlyWitch.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("a34cd0f80d04ec647af741d924a3e2a3"); //Cloak of Protection +5
            KnurlyWitch.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("32257fb7aaee82946aad584a02d3211a"); //Staff +5
            KnurlyWitch.Body.Head = library.Get<BlueprintItemEquipmentHead>("6d7992679c557c842887c8bba08a12c8"); //Headband of Perfection



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var KnurlyWitchAuraOfMadnessAiAction = library.Get<BlueprintAiCastSpell>("2bfcc9e4e2da87e4eadb0d5a46a3f061");
            var KnurlyWitchWeirdAiAction = library.Get<BlueprintAiCastSpell>("a80dfdf30eebb2548b70742a6ba7b343");
            var KnurlyWitchBubonicPlagueAiAction = library.Get<BlueprintAiCastSpell>("dacb746aed5507847be5383dbc1701cf");
            var KnurlyWitchWavesOfEctasyAiAction = library.Get<BlueprintAiCastSpell>("03ec6b887c3329943a014d00778f3353");
            var KnurlyWitchConfusionAiAction = library.Get<BlueprintAiCastSpell>("e604fecf554b12645b00d62f5799dc2f");
            var KnurlyWitchHealAiAction = library.Get<BlueprintAiCastSpell>("f14f57a76b28de34bba9ad13bdf25ef6");

 

            var brain = KnurlyWitch.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(KnurlyWitchAuraOfMadnessAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(KnurlyWitchWeirdAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(KnurlyWitchBubonicPlagueAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(KnurlyWitchWavesOfEctasyAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(KnurlyWitchConfusionAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(KnurlyWitchHealAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castsummontreants,AiActions.castcloakofchaos,AiActions.castweirdknurly, AiActions.castdivinepowerknurly, AiActions.prayerknurly,AiActions.flamestrikeknurly,
                                                     AiActions.castoverwhelmingpresenceknurly,  AiActions.castdeathclutchknurly,AiActions.castwavesofecstasyknurly,AiActions.healspellknurly,AiActions.castconfusionknurly,
                                                     AiActions.frightfulaspect,AiActions.castshieldoffaith,AiActions.castauraofmadnessknurly,
                                                     AiActions.castplaguestormknurly,AiActions.inflictseriousmassknurly,AiActions.greaterdispelknurly);


        }

        static void updateHATEOTTreantSummoned()
        {

            var CR17Treant = library.Get<BlueprintUnit>("5c322493e13040c3a36981ed67d6f590");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var stunningblow = library.Get<BlueprintBuff>("daa0d328610e67b409efdd20be9a633c");


            CR17Treant.AddFacts = CR17Treant.AddFacts.AddToArray(stunningblow);


            CR17Treant.Dexterity = 16;




            var magicalbeastLevels = CR17Treant.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = magicalbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            CR17Treant.ReplaceComponent(magicalbeastLevels, newAddClassLevels);


            var barbarianLevels = CR17Treant.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels2 = barbarianLevels.CreateCopy();
            newAddClassLevels2.Levels = 10;
            CR17Treant.ReplaceComponent(barbarianLevels, newAddClassLevels2);


            CR17Treant.Faction = library.Get<BlueprintFaction>("0f539babafb47fe4586b719d02aff7c4");

            var TreantStunningBlowAiAction = library.Get<BlueprintAiCastSpell>("b2428bdc1e519104f8eb08e2fd06eb02");

            var brain = CR17Treant.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(TreantStunningBlowAiAction);

        }

        static void updateWrigglingMan()
        {


            var vermin = library.Get<BlueprintCharacterClass>("d1a15612d1a96334d94edf5f1d3b8d29");
            var wrigglingman = library.Get<BlueprintUnit>("baf4cbd8e093b314ea73b9315551af33");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var wizardclass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fireball = library.Get<BlueprintAbility>("2d81362af43aeac4387a3d4fced489c3");
            var fireresist15 = library.Get<BlueprintFeature>("24700a71dd3dc844ea585345f6dd18f6");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var dr15 = library.Get<BlueprintFeature>("a1477ed71c2329d4088192cac8d4e3bd");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var summonelderworms = library.Get<BlueprintAbility>("a89156c13eca4f6d91364f41ae8d00f9");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var MageShieldBuffPermanent = library.Get<BlueprintBuff>("f01f31b601e38034fa0460d16778a306");
            var WrigglingManSummonBulette = library.Get<BlueprintAbility>("bcb239e1d8cf79f4995bd084771f74dc");
            var WrigglingManSummonElementalElderAir = library.Get<BlueprintAbility>("03b02f96bf14a7d4290eb2605bd2c15e");
            var icyprisonmass = library.Get<BlueprintAbility>("1852a9393a23d5741b650a1ea7078abc");
            var clashingrocks = library.Get<BlueprintAbility>("01300baad090d634cb1a1b2defe068d6");
            var elementalassessor = library.Get<BlueprintAbility>("6303b404df12b0f4793fa0763b21dd2c");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var disintegrate = library.Get<BlueprintAbility>("4aa7942c3e62a164387a73184bca3fc1");
            var tsunami = library.Get<BlueprintAbility>("d8144161e352ca846a73cf90e85bf9ac");
            var SummonElementalElderBase = library.Get<BlueprintAbility>("8a7f8c1223bda1541b42fd0320cdbe2b");
            var polarray = library.Get<BlueprintAbility>("17696c144a0194c478cbe402b496cb23");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            var deflectionarmor4 = library.Get<BlueprintUnitFact>("e5c0125ea142dad44a799e0686dd329f");
            

            wrigglingman.AddFacts = wrigglingman.AddFacts.RemoveFromArray(MageShieldBuffPermanent);
            wrigglingman.AddFacts = wrigglingman.AddFacts.RemoveFromArray(WrigglingManSummonBulette);
            wrigglingman.AddFacts = wrigglingman.AddFacts.RemoveFromArray(WrigglingManSummonElementalElderAir);
            wrigglingman.AddFacts = wrigglingman.AddFacts.AddToArray(summonelderworms,deflectionarmor4);


            wrigglingman.Intelligence = 24;
            wrigglingman.Dexterity = 24;
            wrigglingman.MaxHP = 300;



            var verminlevels = wrigglingman.GetComponent<AddClassLevels>();
            var newverminLevels = verminlevels.CreateCopy();
            newverminLevels.CharacterClass = library.Get<BlueprintCharacterClass>("8a3c86893f383214da070e9c84c1e95b");
            newverminLevels.Levels = 10;
            wrigglingman.AddComponent(newverminLevels);



            var wizardLevels = wrigglingman.ComponentsArray
              .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(displacement, greaterdispel,mirrorimage,icyprisonmass, polarray,trueseeing,magearmor);
            newAddClassLevels.SelectSpells = spell_list;
            wrigglingman.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels2 = wrigglingman.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(displacement, greaterdispel,greaterdispel,greaterdispel,mirrorimage,icyprisonmass, polarray,polarray,trueseeing,magearmor );
            newAddClassLevels2.MemorizeSpells = spell_list2;
            wrigglingman.ReplaceComponent(wizardLevels2, newAddClassLevels2);

            var wizardLevels4 = wrigglingman.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels4 = wizardLevels4.CreateCopy();
            foreach (var selection in newAddClassLevels4.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(greatfortitude);

            }
            wrigglingman.ReplaceComponent(wizardLevels4, newAddClassLevels4);

            var wizardLevels3 = wrigglingman.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels3 = wizardLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(fireball);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            wrigglingman.ReplaceComponent(wizardLevels3, newAddClassLevels3);

            var wizardLevels5 = wrigglingman.ComponentsArray
    .OfType<AddClassLevels>()
    .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.MemorizeSpells.RemoveFromArray(clashingrocks);
            newAddClassLevels5.MemorizeSpells = spell_list5;
            wrigglingman.ReplaceComponent(wizardLevels5, newAddClassLevels5);

            var wizardLevels8 = wrigglingman.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels8 = wizardLevels8.CreateCopy();
            var spell_list8 = newAddClassLevels8.MemorizeSpells.RemoveFromArray(clashingrocks);
            newAddClassLevels8.MemorizeSpells = spell_list8;
            wrigglingman.ReplaceComponent(wizardLevels8, newAddClassLevels8);

            var wizardLevels9 = wrigglingman.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels9 = wizardLevels9.CreateCopy();
            var spell_list9 = newAddClassLevels9.MemorizeSpells.RemoveFromArray(clashingrocks);
            newAddClassLevels9.MemorizeSpells = spell_list9;
            wrigglingman.ReplaceComponent(wizardLevels9, newAddClassLevels9);

            var wizardLevels10 = wrigglingman.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels10 = wizardLevels10.CreateCopy();
            var spell_list10 = newAddClassLevels10.SelectSpells.RemoveFromArray(disintegrate);
            newAddClassLevels10.SelectSpells = spell_list10;
            wrigglingman.ReplaceComponent(wizardLevels10, newAddClassLevels10);

            var wizardLevels11 = wrigglingman.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels11 = wizardLevels11.CreateCopy();
            var spell_list11 = newAddClassLevels11.SelectSpells.RemoveFromArray(SummonElementalElderBase);
            newAddClassLevels11.SelectSpells = spell_list11;
            wrigglingman.ReplaceComponent(wizardLevels11, newAddClassLevels11);

            var wizardLevels6 = wrigglingman.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels6 = wizardLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.MemorizeSpells.RemoveFromArray(elementalassessor);
            newAddClassLevels6.MemorizeSpells = spell_list6;
            wrigglingman.ReplaceComponent(wizardLevels6, newAddClassLevels6);

            var wizardLevels7 = wrigglingman.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels7 = wizardLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.MemorizeSpells.RemoveFromArray(elementalassessor);
            newAddClassLevels7.MemorizeSpells = spell_list7;
            wrigglingman.ReplaceComponent(wizardLevels7, newAddClassLevels7);


            wrigglingman.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("a34cd0f80d04ec647af741d924a3e2a3"); //Cloak of Protection +5
            wrigglingman.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("32257fb7aaee82946aad584a02d3211a"); //Staff +5

            


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var tsunamiai = library.Get<BlueprintAiCastSpell>("349e589adc1e7974988f769af68a8123");
            var WrigglingManChainLightningAiAction = library.Get<BlueprintAiCastSpell>("90bdbc3d8eda74740bd47940643d3dc5");
            var WrigglingManCausticEruptionAiAction = library.Get<BlueprintAiCastSpell>("00394fde3dee8524aaee974373bfdd80");


            var brain = wrigglingman.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(tsunamiai);
            brain.Actions = brain.Actions.RemoveFromArray(WrigglingManChainLightningAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(WrigglingManCausticEruptionAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.displacement_first,AiActions.castmirrorimagebloodmoon,AiActions.mirrorimagerecast,AiActions.castsummonelderworms,
                                                            AiActions.castshieldgoblin,AiActions.casticyprisonmass,AiActions.greaterdispelwrigglingman,AiActions.castpolarray, AiActions.trueseeing,AiActions.castmagearmorsprig,
                                                            AiActions.castinvisibilitygreater,AiActions.tsunamiwrigglingman,AiActions.chainlightningwrigglingman,AiActions.castcausticeruptionwrigglingman);

           

        }

        static void changeWrigglingManWormSummon()
        {
            var WrigglingmanWorm = library.Get<BlueprintUnit>("f647bb3c11f1478cbb47f150bceb0a1e");
            var mobfaction = library.Get<BlueprintFaction>("0f539babafb47fe4586b719d02aff7c4");
            
            var magicbeastclass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");

            WrigglingmanWorm.Constitution = 34;
            WrigglingmanWorm.Strength = 46;
            WrigglingmanWorm.Dexterity = 16;

            var magicbeastLevels = WrigglingmanWorm.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == magicbeastclass);
            var newAddClassLevels = magicbeastLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            WrigglingmanWorm.ReplaceComponent(magicbeastLevels, newAddClassLevels);


            WrigglingmanWorm.Faction = library.Get<BlueprintFaction>("0f539babafb47fe4586b719d02aff7c4");



            WrigglingmanWorm.GetComponent<Experience>().CR = 15;




        }


        

        static void updateNyrissaBoss()

        {


            var fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var Nyrissa = library.Get<BlueprintUnit>("2e3bb762453b5ec458faf774924467f9");
            var stormbolt = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            var creepingdoom = library.Get<BlueprintAbility>("b974af13e45639a41a04843ce1c9aa12");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            var sunburst = library.Get<BlueprintAbility>("e96424f70ff884947b06f41a765b7658");
            var seamantle = library.Get<BlueprintAbility>("7ef49f184922063499b8f1346fb7f521");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var NaturalArmor6 = library.Get<BlueprintUnitFact>("987ba44303e88054c9504cb3083ba0c9");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var vinetrap = library.Get<BlueprintAbility>("6d1d48a939ce475409f06e1b376bc386");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var flurryofsnowballs = library.Get<BlueprintAbility>("390e16e9595f4e4696ca90d18b803092");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var Weird = library.Get<BlueprintAbility>("870af83be6572594d84d276d7fc583e0");
            var tsunami = library.Get<BlueprintAbility>("d8144161e352ca846a73cf90e85bf9ac");
            var deathclutch = library.Get<BlueprintAbility>("c3d2294a6740bc147870fff652f3ced5");
            var trueseeing = library.Get<BlueprintAbility>("b3da3fbee6a751d4197e446c7e852bcb");
            var frightfulaspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            var C61_NyrissaWeird = library.Get<BlueprintAbility>("f2dc04ba32ca7964faf88d590c3266c5");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var dispelgreater = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var bearsbuff = library.Get<BlueprintBuff>("c3de8cc9a0f50e2418dde526d8855faa");
            var catsbuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var DR10 = library.Get<BlueprintFeature>("e3b18255d373c494b83b4b95956fd847");
            var DRSlashing10 = library.Get<BlueprintFeature>("0df8cdae87d2a3047ad2b1c0568407e9");



            Nyrissa.AddFacts = Nyrissa.AddFacts.RemoveFromArray(C61_NyrissaWeird);
            Nyrissa.AddFacts = Nyrissa.AddFacts.RemoveFromArray(DRSlashing10);
            Nyrissa.AddFacts = Nyrissa.AddFacts.RemoveFromArray(seamantle);
            Nyrissa.AddFacts = Nyrissa.AddFacts.RemoveFromArray(tsunami);
            Nyrissa.AddFacts = Nyrissa.AddFacts.RemoveFromArray(deathclutch);
            Nyrissa.AddFacts = Nyrissa.AddFacts.RemoveFromArray(shield);
            Nyrissa.AddFacts = Nyrissa.AddFacts.AddToArray(Weird,catsbuff,bearsbuff,quicken,DR10);

            {


                var nymphLevels = Nyrissa.ComponentsArray
                      .OfType<AddClassLevels>()
                      .First(c => c.CharacterClass == feyClass);
                var newnymphLevels = nymphLevels.CreateCopy();
                newnymphLevels.Levels = 14;
                Nyrissa.ReplaceComponent(nymphLevels, newnymphLevels);

                var druidLevels = Nyrissa.GetComponent<AddClassLevels>();
                var newdruidLevels = druidLevels.CreateCopy();
                newdruidLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
                newdruidLevels.Levels = 20;
                var spell_list = newdruidLevels.MemorizeSpells.AddToArray(fire_storm,fire_storm, seamantle,tsunami,tsunami,deathclutch,deathclutch,heal,heal,heal,heal,trueseeing,stormbolt,stormbolt,sunburst,
                                                                          frightfulaspect,greaterdispel,greaterdispel,tarpool,stoneskin,firesnake,firesnake,firesnake,vinetrap,vinetrap);
                newdruidLevels.MemorizeSpells = spell_list;
                Nyrissa.AddComponent(newdruidLevels);


                var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.seamantle);

                var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
                auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.barkskin);


                Nyrissa.MaxHP = 230;


                var C61_NyrissaWeirdAiAction = library.Get<BlueprintAiCastSpell>("c18f8340d5e86e842b18e4abdba2aec9");
                var C61_NyrissaSeamantleAiAction = library.Get<BlueprintAiCastSpell>("3902a1b84f8529f41a3f95fe1ac28a2b");
                var C61_NyrissaFingerOfDeathAiAction = library.Get<BlueprintAiCastSpell>("ca6e22b9291d02549bf190c669b5a072");
                var C61_NyrissaDeathClutchAiAction = library.Get<BlueprintAiCastSpell>("a7928e1f41c18c74ead89c5b57eb9385");
                var C61_NyrissaTsunamiAiAction = library.Get<BlueprintAiCastSpell>("56fd246b71b8e864e888b66aeec9fb96");
                var C61_NyrissaHealAiAction = library.Get<BlueprintAiCastSpell>("a303531126ee4b148ad6cad621f465c8");
                var C61_NyrissaWailOfBansheeAiAction = library.Get<BlueprintAiCastSpell>("6ca0019045d94ff46a72b6279ec2bb61");
                var C61_NyrissaVinetrapAiAction = library.Get<BlueprintAiCastSpell>("3696034ad79f59d4fabcd1aba54afa20");


                var brain = Nyrissa.Brain;
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaWeirdAiAction);
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaSeamantleAiAction);
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaFingerOfDeathAiAction);
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaDeathClutchAiAction);
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaTsunamiAiAction);
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaHealAiAction);
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaWailOfBansheeAiAction);
                brain.Actions = brain.Actions.RemoveFromArray(C61_NyrissaVinetrapAiAction);
                brain.Actions = brain.Actions.AddToArray(AiActions.trueseeing,AiActions.seamantle,AiActions.frightfulaspect,AiActions.tsunaminyrissa, AiActions.castsunburstnyrissa,AiActions.greaterdispelnyrissa,
                                                          AiActions.castweirdnyrissa,AiActions.castdeathclutchnyrissa,AiActions.castfingerofdeathnyrissa,AiActions.castfirestormnyrissa,AiActions.caststormboltnyrissa,
                                                          AiActions.stoneskin,AiActions.tarpoolnyrissa,AiActions.healnyrissa,AiActions.wailbansheenyrissa,AiActions.castfiresnakenyrissa,AiActions.castvinetrapnyrissa);
            }
        }

        //CHAPTER 7

        //Final Dungeon (Ruined Capital)

        static void CR23_JabberwockStandard()
        {
            var Jabberwockgreater = library.Get<BlueprintUnit>("8f289ac0ca01c1f40ae8659655eb28e6");
            var trueseeing = library.Get<BlueprintAbility>("b3da3fbee6a751d4197e446c7e852bcb");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var TrueSeeingBuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusClaw = library.Get<BlueprintFeature>("153937f44fcd42a429a286a10babd82d");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection7 = library.Get<BlueprintUnitFact>("4f2fcce412802c1408e3b89ea8b6c17e");
            var NaturalArmor26 = library.Get<BlueprintUnitFact>("6f92384d2a6de5f4799b100571570f01");
            var NaturalArmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");


            Jabberwockgreater.AddFacts = Jabberwockgreater.AddFacts.RemoveFromArray(NaturalArmor26);
            Jabberwockgreater.AddFacts = Jabberwockgreater.AddFacts.AddToArray(trueseeing, WeaponFocusBite, WeaponFocusClaw, Cornugon, greatershout, toughness, deflection7, NaturalArmor19);

            Jabberwockgreater.MaxHP = 90;

            Jabberwockgreater.Constitution = 35;
            Jabberwockgreater.Strength = 44;
            Jabberwockgreater.Dexterity = 24;
            Jabberwockgreater.Charisma = 30;

            var dragonLevels = Jabberwockgreater.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == dragonclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 29;
            Jabberwockgreater.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = Jabberwockgreater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutjabber);

            Jabberwockgreater.GetComponent<Experience>().CR = 22;


        }

        static void C71_JabberwockStandard()
        {
            var Jabberwockgreater = library.Get<BlueprintUnit>("fe3a7a5455219f44baf2df01a2be7ba5");
            var trueseeing = library.Get<BlueprintAbility>("b3da3fbee6a751d4197e446c7e852bcb");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var TrueSeeingBuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusClaw = library.Get<BlueprintFeature>("153937f44fcd42a429a286a10babd82d");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection7 = library.Get<BlueprintUnitFact>("4f2fcce412802c1408e3b89ea8b6c17e");
            var NaturalArmor26 = library.Get<BlueprintUnitFact>("6f92384d2a6de5f4799b100571570f01");
            var NaturalArmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");


            Jabberwockgreater.AddFacts = Jabberwockgreater.AddFacts.RemoveFromArray(NaturalArmor26);
            Jabberwockgreater.AddFacts = Jabberwockgreater.AddFacts.AddToArray(trueseeing, WeaponFocusBite, WeaponFocusClaw, Cornugon, greatershout, toughness, deflection7, NaturalArmor19);

            Jabberwockgreater.MaxHP = 90;

            Jabberwockgreater.Constitution = 35;
            Jabberwockgreater.Strength = 44;
            Jabberwockgreater.Dexterity = 24;
            Jabberwockgreater.Charisma = 30;

            var dragonLevels = Jabberwockgreater.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == dragonclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 29;
            Jabberwockgreater.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = Jabberwockgreater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutjabber);

            Jabberwockgreater.GetComponent<Experience>().CR = 22;


        }

        static void FinalJabberwock()
        {
            var Jabberwockgreater = library.Get<BlueprintUnit>("95f564060d5a7a747a1489dbf4f7c5d4");
            var trueseeing = library.Get<BlueprintAbility>("b3da3fbee6a751d4197e446c7e852bcb");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var TrueSeeingBuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusClaw = library.Get<BlueprintFeature>("153937f44fcd42a429a286a10babd82d");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection7 = library.Get<BlueprintUnitFact>("4f2fcce412802c1408e3b89ea8b6c17e");
            var NaturalArmor26 = library.Get<BlueprintUnitFact>("6f92384d2a6de5f4799b100571570f01");
            var NaturalArmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");

            Jabberwockgreater.AddFacts = Jabberwockgreater.AddFacts.RemoveFromArray(NaturalArmor26);
            Jabberwockgreater.AddFacts = Jabberwockgreater.AddFacts.AddToArray(trueseeing,blur, WeaponFocusBite,blurbuff, WeaponFocusClaw, Cornugon, greatershout, toughness, deflection7, NaturalArmor19);

            Jabberwockgreater.MaxHP = 90;

            Jabberwockgreater.Constitution = 35;
            Jabberwockgreater.Strength = 44;
            Jabberwockgreater.Dexterity = 24;
            Jabberwockgreater.Charisma = 30;

            var dragonLevels = Jabberwockgreater.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == dragonclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 29;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(blur);
            newAddClassLevels.SelectSpells = spell_list;
            Jabberwockgreater.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = Jabberwockgreater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutjabber,AiActions.blurcast);

            Jabberwockgreater.GetComponent<Experience>().CR = 22;


        }

        static void updateFinalDungeon_GolemAdamantine()

        {


            var AbandonedKeep_GolemStone = library.Get<BlueprintUnit>("aaee8407cba7ab34891c8e54a0628698");
            var constructClass = library.Get<BlueprintCharacterClass>("fd66bdea5c33e5f458e929022322e6bf");
           



            AbandonedKeep_GolemStone.MaxHP = 600;

  


            var fighterLevels = AbandonedKeep_GolemStone.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == constructClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 32;
            AbandonedKeep_GolemStone.ReplaceComponent(fighterLevels, newAddClassLevels);




        }

        static void WerenDegar()
        {


            var WerenDegar = library.Get<BlueprintUnit>("6bbc1c21b319f4642981e10a17431017");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");

            WerenDegar.AddFacts = WerenDegar.AddFacts.AddToArray(auraofdoom, quicken, crushingdespair, sunder);

            WerenDegar.Strength = 34;
            WerenDegar.Dexterity = 27;
            WerenDegar.Constitution = 30;
            WerenDegar.Charisma = 30;

            var feyLevels = WerenDegar.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = feyLevels.CreateCopy();
            newAddClassLevels.Levels = 25;
            WerenDegar.ReplaceComponent(feyLevels, newAddClassLevels);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = WerenDegar.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn, AiActions.castcrushingdespairvilderavn, AiActions.usesunderarmorvilderavn);


        }

        static void WerenDegarEnemy()
        {


            var WerenDegar = library.Get<BlueprintUnit>("6719919cda715de4ba28bba8ac97dca3");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");

            WerenDegar.AddFacts = WerenDegar.AddFacts.AddToArray(auraofdoom, quicken, crushingdespair, sunder);

            WerenDegar.Strength = 34;
            WerenDegar.Dexterity = 27;
            WerenDegar.Constitution = 30;
            WerenDegar.Charisma = 30;

            var feyLevels = WerenDegar.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = feyLevels.CreateCopy();
            newAddClassLevels.Levels = 25;
            WerenDegar.ReplaceComponent(feyLevels, newAddClassLevels);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = WerenDegar.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn, AiActions.castcrushingdespairvilderavn, AiActions.usesunderarmorvilderavn);


        }

        static void WerenDegarEnemy2()
        {


            var WerenDegar = library.Get<BlueprintUnit>("80e1145ae18cdc048b8785e9067e83c1");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");

            WerenDegar.AddFacts = WerenDegar.AddFacts.AddToArray(auraofdoom, quicken, crushingdespair, sunder);

            WerenDegar.Strength = 34;
            WerenDegar.Dexterity = 27;
            WerenDegar.Constitution = 30;
            WerenDegar.Charisma = 30;

            var feyLevels = WerenDegar.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = feyLevels.CreateCopy();
            newAddClassLevels.Levels = 25;
            WerenDegar.ReplaceComponent(feyLevels, newAddClassLevels);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = WerenDegar.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn, AiActions.castcrushingdespairvilderavn, AiActions.usesunderarmorvilderavn);


        }

        static void updatePrimalOwlbear()
        {

            var Owlbearillusion = library.Get<BlueprintUnit>("eedf75b417655794cb7751ce434f5db3");
            var magicalbeastClass = library.Get<BlueprintCharacterClass>("b9e97f47cb86f2d45a0784a096ff8037");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            Owlbearillusion.AddFacts = Owlbearillusion.AddFacts.AddToArray(mirrorimage, combatcasting,displacement,quicken,displacementbuff);

            var brain = Owlbearillusion.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castmirrorimagebloodmoon,AiActions.displacementrecastowlbear);


        }

        static void changeAncientWarWisp()
        {

            var AncientWarwisp = library.Get<BlueprintUnit>("8cf8d0e90b593014bac6f0c11283ade5");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var abberationClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            var summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var dragonsbreathblue = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var stormbolt = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            var chainlightningai = library.Get<BlueprintAiAction>("2c50bf74c89aceb44a0fea93e39efcb3");
            var natarmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var deflectarmor3 = library.Get<BlueprintUnitFact>("6b0b0aa011d26da438a999b35ca97137");
            var deflectarmor8 = library.Get<BlueprintUnitFact>("05425bd28cbb71d4b9dbce0f83231333");
            var wavesofecstasy = library.Get<BlueprintAbility>("1e2d1489781b10a45a3b70192bba9be3");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");

            var sorcererLevels = AncientWarwisp.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == abberationClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 4;
            AncientWarwisp.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var druidLevels = AncientWarwisp.GetComponent<AddClassLevels>();
            var newdruidLevels = druidLevels.CreateCopy();
            newdruidLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            newdruidLevels.Levels = 16;
            var spell_list = newdruidLevels.SelectSpells.AddToArray(stormbolt, slow, mirrorimage, controlledfireball,
                                                                     chainlightning, displacement, crushingdespair, icyprison);
            newdruidLevels.SelectSpells = spell_list;
            AncientWarwisp.AddComponent(newdruidLevels);







            AncientWarwisp.AddFacts = AncientWarwisp.AddFacts.AddToArray(quicken);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            var brain = AncientWarwisp.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(oldmagicmissleswift);
            brain.Actions = brain.Actions.RemoveFromArray(chainlightningai);
            brain.Actions = brain.Actions.AddToArray(AiActions.caststormboltbloodmoon,
                                                    AiActions.magicmissleswift, AiActions.castslow,
                                                    AiActions.castmirrorimagebloodmoon, AiActions.castchainlightningbloodmoon,
                                                    AiActions.castdisplacementbloodmoon, 
                                                    AiActions.casticyprisonbloodmoon, AiActions.castcontrolledfireball);


        }


        //The Lantern King FINAL BOSS

        static void LanternKing1()
        {


            var LanternKingOldMan = library.Get<BlueprintUnit>("c86652802cf728d4aa4aad539e4f2ab2");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var DR15 = library.Get<BlueprintFeature>("a1477ed71c2329d4088192cac8d4e3bd");
            var AcidResistance20 = library.Get<BlueprintFeature>("416386972c8de2e42953533c4946599a");
            var ColdResistance20 = library.Get<BlueprintFeature>("9a50f9d13b7d829419b8d129b21e99e5");
            var ElectricityResistance20 = library.Get<BlueprintFeature>("871f009dc7fddfb43a5d107c780a4cce");
            var FireResistance20 = library.Get<BlueprintFeature>("137697b2929df514c9e4a3de66f60bc2");
            var ForceResistance20 = library.Get<BlueprintFeature>("cea02e0ba8797a446b24ce73e41c13cc");
            var SonicResistance20 = library.Get<BlueprintFeature>("d6f81771afd48bf4491e78b4fb29ddcb");
            var ImmunityToFear = library.Get<BlueprintFeature>("12a47d1d5d02fe34c8158ca58e0b3b60");
            var ImmunityToMindAffecting = library.Get<BlueprintFeature>("3eb606c0564d0814ea01a824dbe42fb0");
            var ImmunityToParalysis = library.Get<BlueprintFeature>("4b152a7bc5bab5042b437b955fea46cd");
            var ImmunityToPetrification = library.Get<BlueprintFeature>("b625283fc6eb72c47a2fc5e2a3ff9eb4");
            var NaturalArmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");



            LanternKingOldMan.MaxHP = 250;


            LanternKingOldMan.AddFacts = LanternKingOldMan.AddFacts.AddToArray(DR15,ImmunityToFear,ImmunityToMindAffecting,ImmunityToParalysis,ImmunityToPetrification, NaturalArmor2,
                                                                            AcidResistance20,ColdResistance20,ElectricityResistance20,FireResistance20,ForceResistance20,SonicResistance20);





        }

        static void LanternKing2()
        {


            var LanternKingGnome = library.Get<BlueprintUnit>("adbea1edebe494645b20810d8795bebe");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var DR15 = library.Get<BlueprintFeature>("a1477ed71c2329d4088192cac8d4e3bd");
            var AcidResistance20 = library.Get<BlueprintFeature>("416386972c8de2e42953533c4946599a");
            var ColdResistance20 = library.Get<BlueprintFeature>("9a50f9d13b7d829419b8d129b21e99e5");
            var ElectricityResistance20 = library.Get<BlueprintFeature>("871f009dc7fddfb43a5d107c780a4cce");
            var FireResistance20 = library.Get<BlueprintFeature>("137697b2929df514c9e4a3de66f60bc2");
            var ForceResistance20 = library.Get<BlueprintFeature>("cea02e0ba8797a446b24ce73e41c13cc");
            var SonicResistance20 = library.Get<BlueprintFeature>("d6f81771afd48bf4491e78b4fb29ddcb");
            var ImmunityToFear = library.Get<BlueprintFeature>("12a47d1d5d02fe34c8158ca58e0b3b60");
            var ImmunityToMindAffecting = library.Get<BlueprintFeature>("3eb606c0564d0814ea01a824dbe42fb0");
            var ImmunityToParalysis = library.Get<BlueprintFeature>("4b152a7bc5bab5042b437b955fea46cd");
            var ImmunityToPetrification = library.Get<BlueprintFeature>("b625283fc6eb72c47a2fc5e2a3ff9eb4");
            
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");
            var cacophonouscallmass = library.Get<BlueprintAbility>("1262284b6fa45b9458b8c3693edbd676");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var unbreakableheart = library.Get<BlueprintAbility>("dd38f33c56ad00a4da386c1afaa49967");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var inspirecourage = library.Get<BlueprintFeature>("65c2b39752cf54841b36c4dff47643e6");
            var shoutgreater = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var dirgebuff = library.Get<BlueprintBuff>("83eab9b139717ad478d84bbf48ab457f");
            var resonatingword = library.Get<BlueprintAbility>("df7d13c967bce6a40bec3ba7c9f0e64c");
            var overwhelmingpresence = library.Get<BlueprintAbility>("41cf93453b027b94886901dbfc680cb9");
            var goodhope = library.Get<BlueprintAbility>("a5e23522eda32dc45801e32c05dc9f96");





            LanternKingGnome.MaxHP = 250;
            LanternKingGnome.Dexterity = 38;



            LanternKingGnome.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("6f70d69ba33e44744b6d458a639f5ea5"); //Light Repeated Crossbow +5	


            LanternKingGnome.AddFacts = LanternKingGnome.AddFacts.AddToArray(DR15, ImmunityToFear, ImmunityToMindAffecting, ImmunityToParalysis, ImmunityToPetrification,  quicken, inspirecourage, dirgebuff,
                                                                            AcidResistance20, ColdResistance20, ElectricityResistance20, FireResistance20, ForceResistance20, SonicResistance20);

            LanternKingGnome.AddFacts = LanternKingGnome.AddFacts.AddToArray(mirrorimage, displacement, freedomofmovement, overwhelmingpresence,
                                                                             heroism, slow, crushingdespair, haste, goodhope); //Better to put spells here for the bonus



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);




            var LanternKingGnomeInvisibilityGreater = library.Get<BlueprintAiAction>("834be1cf21f711941b55c81908b253f1");
            var LanternKingGnomeMirrorImage = library.Get<BlueprintAiAction>("d0aa0681ec382a7449bee42959c02079");

            var brain = LanternKingGnome.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(LanternKingGnomeInvisibilityGreater);
            brain.Actions = brain.Actions.RemoveFromArray(LanternKingGnomeMirrorImage);
            brain.Actions = brain.Actions.AddToArray(AiActions.mirrorimage, AiActions.displacement_first,AiActions.castinvisibilitygreater, AiActions.castgoodhopelanternking,
                                                     AiActions.casthastelanternking, AiActions.castslowlanternking, AiActions.castfreedomofmovement,
                                                      AiActions.overwhelmingpresencelanternking, AiActions.mirrorimagerecast);

        }


        static void LanternKingTwoHander()

        {


            var LanternKingTwoHander = library.Get<BlueprintUnit>("eaefd909fbfb61e4584bccf6232af7a7");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var DR10 = library.Get<BlueprintFeature>("e3b18255d373c494b83b4b95956fd847");

            LanternKingTwoHander.MaxHP = 200;



            LanternKingTwoHander.AddFacts = LanternKingTwoHander.AddFacts.AddToArray(sunder,DR10);


            var feyLevels = LanternKingTwoHander.GetComponent<AddClassLevels>();
            var newfeyLevels = feyLevels.CreateCopy();
            newfeyLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            newfeyLevels.Levels = 5;
            LanternKingTwoHander.AddComponent(newfeyLevels);


            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var brain = LanternKingTwoHander.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb,AiActions.cleave);

        }

        static void LanternKingSwordandShield()

        {


            var LanternKingSwordandShield = library.Get<BlueprintUnit>("865bb3baf675cae41ab8ca4dcf75318b");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var DR5 = library.Get<BlueprintFeature>("f4b3dfedcc150d249be42c0d12302b20");

            LanternKingSwordandShield.MaxHP = 200;



            LanternKingSwordandShield.AddFacts = LanternKingSwordandShield.AddFacts.AddToArray(DR5);


            var feyLevels = LanternKingSwordandShield.GetComponent<AddClassLevels>();
            var newfeyLevels = feyLevels.CreateCopy();
            newfeyLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            newfeyLevels.Levels = 5;
            LanternKingSwordandShield.AddComponent(newfeyLevels);


            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var brain = LanternKingSwordandShield.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.cleave);

        }


        static void LanternDualWielder()

        {


            var LanternDualWielder = library.Get<BlueprintUnit>("79c322191f4c4f94d8b15425b95c8802");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var DR5 = library.Get<BlueprintFeature>("f4b3dfedcc150d249be42c0d12302b20");

            LanternDualWielder.MaxHP = 200;



            LanternDualWielder.AddFacts = LanternDualWielder.AddFacts.AddToArray(DR5);


            var feyLevels = LanternDualWielder.GetComponent<AddClassLevels>();
            var newfeyLevels = feyLevels.CreateCopy();
            newfeyLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            newfeyLevels.Levels = 5;
            LanternDualWielder.AddComponent(newfeyLevels);


            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var brain = LanternDualWielder.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);

        }

        static void LanternBow()

        {


            var LanternBow = library.Get<BlueprintUnit>("a25c189bbf44c7c4d8c04f1c644628c7");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var DR5 = library.Get<BlueprintFeature>("f4b3dfedcc150d249be42c0d12302b20");

            LanternBow.MaxHP = 200;



            LanternBow.AddFacts = LanternBow.AddFacts.AddToArray(DR5);


            var feyLevels = LanternBow.GetComponent<AddClassLevels>();
            var newfeyLevels = feyLevels.CreateCopy();
            newfeyLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            newfeyLevels.Levels = 5;
            LanternBow.AddComponent(newfeyLevels);


            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var brain = LanternBow.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);

        }

        static void LanternCrossbow()

        {


            var LanternCrossbow = library.Get<BlueprintUnit>("4891c404d51c7aa40aa422433aa6d674");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var DR5 = library.Get<BlueprintFeature>("f4b3dfedcc150d249be42c0d12302b20");

            LanternCrossbow.MaxHP = 200;



            LanternCrossbow.AddFacts = LanternCrossbow.AddFacts.AddToArray(DR5);


            var feyLevels = LanternCrossbow.GetComponent<AddClassLevels>();
            var newfeyLevels = feyLevels.CreateCopy();
            newfeyLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            newfeyLevels.Levels = 5;
            LanternCrossbow.AddComponent(newfeyLevels);


            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var brain = LanternCrossbow.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);

        }


        static void LanternKing3()
        {


            var LanternKingOldMan = library.Get<BlueprintUnit>("adbade242a602634fa1449c113718295");
            var DR15 = library.Get<BlueprintFeature>("a1477ed71c2329d4088192cac8d4e3bd");
            var AcidResistance20 = library.Get<BlueprintFeature>("416386972c8de2e42953533c4946599a");
            var ColdResistance20 = library.Get<BlueprintFeature>("9a50f9d13b7d829419b8d129b21e99e5");
            var ElectricityResistance20 = library.Get<BlueprintFeature>("871f009dc7fddfb43a5d107c780a4cce");
            var FireResistance20 = library.Get<BlueprintFeature>("137697b2929df514c9e4a3de66f60bc2");
            var ForceResistance20 = library.Get<BlueprintFeature>("cea02e0ba8797a446b24ce73e41c13cc");
            var SonicResistance20 = library.Get<BlueprintFeature>("d6f81771afd48bf4491e78b4fb29ddcb");
            var ImmunityToFear = library.Get<BlueprintFeature>("12a47d1d5d02fe34c8158ca58e0b3b60");
            var ImmunityToMindAffecting = library.Get<BlueprintFeature>("3eb606c0564d0814ea01a824dbe42fb0");
            var ImmunityToParalysis = library.Get<BlueprintFeature>("4b152a7bc5bab5042b437b955fea46cd");
            var ImmunityToPetrification = library.Get<BlueprintFeature>("b625283fc6eb72c47a2fc5e2a3ff9eb4");


            LanternKingOldMan.MaxHP = 250;


            LanternKingOldMan.AddFacts = LanternKingOldMan.AddFacts.AddToArray(DR15, ImmunityToFear, ImmunityToMindAffecting, ImmunityToParalysis, ImmunityToPetrification,
                                                                            AcidResistance20, ColdResistance20, ElectricityResistance20, FireResistance20, ForceResistance20, SonicResistance20);





        }

        static void LanternKing5()
        {


            var LanternKingFinal = library.Get<BlueprintUnit>("00087e3751d4f14489760d840a578b37");
            var DR15 = library.Get<BlueprintFeature>("a1477ed71c2329d4088192cac8d4e3bd");
            var DR10 = library.Get<BlueprintFeature>("e3b18255d373c494b83b4b95956fd847");
            var AcidResistance10 = library.Get<BlueprintFeature>("64e647c10eece1545b00a442330f49da");
            var ColdResistance20 = library.Get<BlueprintFeature>("9a50f9d13b7d829419b8d129b21e99e5");
            var ElectricityResistance20 = library.Get<BlueprintFeature>("871f009dc7fddfb43a5d107c780a4cce");
            var FireResistance10 = library.Get<BlueprintFeature>("24700a71dd3dc844ea585345f6dd18f6");
            var ForceResistance20 = library.Get<BlueprintFeature>("cea02e0ba8797a446b24ce73e41c13cc");
            var SonicResistance20 = library.Get<BlueprintFeature>("d6f81771afd48bf4491e78b4fb29ddcb");
            var ImmunityToFear = library.Get<BlueprintFeature>("12a47d1d5d02fe34c8158ca58e0b3b60");
            var ImmunityToMindAffecting = library.Get<BlueprintFeature>("3eb606c0564d0814ea01a824dbe42fb0");
            var ImmunityToParalysis = library.Get<BlueprintFeature>("4b152a7bc5bab5042b437b955fea46cd");
            var ImmunityToPetrification = library.Get<BlueprintFeature>("b625283fc6eb72c47a2fc5e2a3ff9eb4");


            LanternKingFinal.MaxHP = 400;

            LanternKingFinal.AddFacts = LanternKingFinal.AddFacts.RemoveFromArray(DR10);

            LanternKingFinal.AddFacts = LanternKingFinal.AddFacts.AddToArray(DR15, ImmunityToFear, ImmunityToMindAffecting, ImmunityToParalysis, ImmunityToPetrification,
                                                                            AcidResistance10, ColdResistance20, ElectricityResistance20, FireResistance10, ForceResistance20, SonicResistance20);





        }

        //Wild Hunt Enemies



        //Scouts

        static void CR15_WildHunt_ScoutStandart()
        {


            var CR15_WildHunt_ScoutStandart = library.Get<BlueprintUnit>("6f5ff0f1e359ee042ba49a746a507190");
            var improvedgreatfortitude = library.Get<BlueprintFeature>("f5db1cc7ad48d794f85252fa4a64157b");

            CR15_WildHunt_ScoutStandart.AddFacts = CR15_WildHunt_ScoutStandart.AddFacts.AddToArray(improvedgreatfortitude);


            CR15_WildHunt_ScoutStandart.Strength = 22;
            CR15_WildHunt_ScoutStandart.Constitution = 24;




        }

        static void WildHunt_ScoutSummon()
        {


            var WildHunt_ScoutSummon = library.Get<BlueprintUnit>("9ce94d8b91d08114f9f9db68c2e8b537");
            var improvedgreatfortitude = library.Get<BlueprintFeature>("f5db1cc7ad48d794f85252fa4a64157b");

            WildHunt_ScoutSummon.AddFacts = WildHunt_ScoutSummon.AddFacts.AddToArray(improvedgreatfortitude);



            WildHunt_ScoutSummon.Strength = 22;
            WildHunt_ScoutSummon.Constitution = 24;

            


        }

        static void HATEOT_WildHunt_Scout()
        {


            var HATEOT_WildHunt_Scout = library.Get<BlueprintUnit>("2bf602a36f490b54b840a6177786e91f");
            var improvedgreatfortitude = library.Get<BlueprintFeature>("f5db1cc7ad48d794f85252fa4a64157b");

            HATEOT_WildHunt_Scout.AddFacts = HATEOT_WildHunt_Scout.AddFacts.AddToArray(improvedgreatfortitude);



            HATEOT_WildHunt_Scout.Strength = 26;
            HATEOT_WildHunt_Scout.Constitution = 28;


        }

        static void HATEOT_WildHunt_Scout_1()
        {


            var HATEOT_WildHunt_Scout_1 = library.Get<BlueprintUnit>("d78af2d7e8a78f347a29419432cc9640");
            var improvedgreatfortitude = library.Get<BlueprintFeature>("f5db1cc7ad48d794f85252fa4a64157b");

            HATEOT_WildHunt_Scout_1.AddFacts = HATEOT_WildHunt_Scout_1.AddFacts.AddToArray(improvedgreatfortitude);



            HATEOT_WildHunt_Scout_1.Strength = 26;
            HATEOT_WildHunt_Scout_1.Constitution = 28;


        }


        //Archer




        static void CR13_WildHunt_ArcherHaste()
        {


            var CR13_WildHunt_ArcherHaste = library.Get<BlueprintUnit>("7bd0996e15059fc4aaef9b1fddcc0760");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");

            CR13_WildHunt_ArcherHaste.AddFacts = CR13_WildHunt_ArcherHaste.AddFacts.AddToArray(greatfortitude);



            CR13_WildHunt_ArcherHaste.Dexterity = 30;
            CR13_WildHunt_ArcherHaste.Constitution = 22;



           

        }

        static void CR13_WildHunt_ArcherStandart()
        {


            var CR13_WildHunt_ArcherStandart = library.Get<BlueprintUnit>("e21b6536b40aaad4e9c9cd6c216778a3");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");

            CR13_WildHunt_ArcherStandart.AddFacts = CR13_WildHunt_ArcherStandart.AddFacts.AddToArray(greatfortitude);



            CR13_WildHunt_ArcherStandart.Dexterity = 30;
            CR13_WildHunt_ArcherStandart.Constitution = 22;


        }

        static void WildHunt_ArcherSummon()
        {


            var WildHunt_ArcherSummon = library.Get<BlueprintUnit>("5333ac43535e27b4bb4cd13ebff95faf");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var NaturalArmor4 = library.Get<BlueprintUnitFact>("16fc201a83edcde4cbd64c291ebe0d07");


            WildHunt_ArcherSummon.AddFacts = WildHunt_ArcherSummon.AddFacts.AddToArray(greatfortitude, NaturalArmor4);



            WildHunt_ArcherSummon.Dexterity = 30;
            WildHunt_ArcherSummon.Constitution = 22;


        }

        static void HATEOT_WildArcher()
        {


            var HATEOT_WildArcher = library.Get<BlueprintUnit>("e1d82bca92b0efc4db4432fba7e846b6");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");

            HATEOT_WildArcher.AddFacts = HATEOT_WildArcher.AddFacts.AddToArray(greatfortitude);


            HATEOT_WildArcher.Constitution = 26;


        }

        static void HATEOT_WildHunt_Archer_1()
        {


            var HATEOT_WildHunt_Archer_1 = library.Get<BlueprintUnit>("68f8d8090ed88194782bce7a1d32348d");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");

            HATEOT_WildHunt_Archer_1.AddFacts = HATEOT_WildHunt_Archer_1.AddFacts.AddToArray(greatfortitude);


            HATEOT_WildHunt_Archer_1.Constitution = 26;


        }


        //Monarch



        static void CR19_WildHunt_MonarchStandart()
        {


            var CR19_WildHunt_MonarchStandart = library.Get<BlueprintUnit>("573009c2f6493514188a2844ba53bdf8");
            var firestorm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");

            CR19_WildHunt_MonarchStandart.AddFacts = CR19_WildHunt_MonarchStandart.AddFacts.AddToArray(firestorm,DominatePerson);

      

            var Wildhunt_MonarchGreaterDispellAiAction = library.Get<BlueprintAiAction>("07971f96badfa014989c022e0350ddf9");

            var brain = CR19_WildHunt_MonarchStandart.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(Wildhunt_MonarchGreaterDispellAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.greaterdispelmonarch,AiActions.castfirestormmonarch,AiActions.dominatepersonmonarch);


        }

        static void HATEOT_WildHunt_Monarch()
        {


            var HATEOT_WildHunt_Monarch = library.Get<BlueprintUnit>("51f074c44a38785428d62f7f59149886");
            var firestorm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");

            HATEOT_WildHunt_Monarch.AddFacts = HATEOT_WildHunt_Monarch.AddFacts.AddToArray(firestorm, DominatePerson);



            HATEOT_WildHunt_Monarch.Constitution = 30;
            HATEOT_WildHunt_Monarch.Charisma = 30;

            var Wildhunt_MonarchGreaterDispellAiAction = library.Get<BlueprintAiAction>("07971f96badfa014989c022e0350ddf9");

            var brain = HATEOT_WildHunt_Monarch.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(Wildhunt_MonarchGreaterDispellAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.greaterdispelmonarch, AiActions.castfirestormmonarch, AiActions.dominatepersonmonarch);


        }


        static void HATEOT_WildHunt_Monarch_1()
        {


            var HATEOT_WildHunt_Monarch_1 = library.Get<BlueprintUnit>("80449c72e68c7bb40a80a46111b847be");
            var firestorm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");

            HATEOT_WildHunt_Monarch_1.AddFacts = HATEOT_WildHunt_Monarch_1.AddFacts.AddToArray(firestorm, DominatePerson);



            HATEOT_WildHunt_Monarch_1.Constitution = 30;
            HATEOT_WildHunt_Monarch_1.Charisma = 30;

            var Wildhunt_MonarchGreaterDispellAiAction = library.Get<BlueprintAiAction>("07971f96badfa014989c022e0350ddf9");

            var brain = HATEOT_WildHunt_Monarch_1.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(Wildhunt_MonarchGreaterDispellAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.greaterdispelmonarch, AiActions.castfirestormmonarch, AiActions.dominatepersonmonarch);


        }




        //Vilderavn



        static void CR16_VilderavnStandard()
        {


            var VilderavnStandard = library.Get<BlueprintUnit>("1f9fa06a30ec720418ea04b1c9b41334");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            VilderavnStandard.AddFacts = VilderavnStandard.AddFacts.AddToArray(auraofdoom,quicken,crushingdespair,sunder);


            VilderavnStandard.Charisma = 26;
            VilderavnStandard.Constitution = 28;

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = VilderavnStandard.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn,AiActions.castcrushingdespairvilderavn,AiActions.usesunderarmorvilderavn);


        }

        

        static void HATEOT_Vilderavn()
        {


            var HATEOTVilderavn = library.Get<BlueprintUnit>("b69c03e59fb833f41be37081c0086181");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            HATEOTVilderavn.AddFacts = HATEOTVilderavn.AddFacts.AddToArray(auraofdoom, quicken, crushingdespair, sunder);

            HATEOTVilderavn.Strength = 34;
            HATEOTVilderavn.Dexterity = 27;
            HATEOTVilderavn.Constitution = 30;
            HATEOTVilderavn.Charisma = 30;


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = HATEOTVilderavn.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn, AiActions.castcrushingdespairvilderavn, AiActions.usesunderarmorvilderavn);


        }

        static void FinalDungeon_Vilderavn()
        {


            var HATEOTVilderavn = library.Get<BlueprintUnit>("cc19fc8b7cf02b34ea5d31f1e113741e");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");

            HATEOTVilderavn.AddFacts = HATEOTVilderavn.AddFacts.AddToArray(auraofdoom, quicken, crushingdespair, sunder);

            HATEOTVilderavn.Strength = 34;
            HATEOTVilderavn.Dexterity = 27;
            HATEOTVilderavn.Constitution = 30;
            HATEOTVilderavn.Charisma = 30;

            var feyLevels = HATEOTVilderavn.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = feyLevels.CreateCopy();
            newAddClassLevels.Levels = 25;
            HATEOTVilderavn.ReplaceComponent(feyLevels, newAddClassLevels);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = HATEOTVilderavn.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn, AiActions.castcrushingdespairvilderavn, AiActions.usesunderarmorvilderavn);


        }

        static void FinalDungeon_Vilderavn_team1()
        {


            var HATEOTVilderavn = library.Get<BlueprintUnit>("41f16c331c161e94f8130e78eb68a541");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");

            HATEOTVilderavn.AddFacts = HATEOTVilderavn.AddFacts.AddToArray(auraofdoom, quicken, crushingdespair, sunder);

            HATEOTVilderavn.Strength = 34;
            HATEOTVilderavn.Dexterity = 27;
            HATEOTVilderavn.Constitution = 30;
            HATEOTVilderavn.Charisma = 30;


            var feyLevels = HATEOTVilderavn.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = feyLevels.CreateCopy();
            newAddClassLevels.Levels = 25;
            HATEOTVilderavn.ReplaceComponent(feyLevels, newAddClassLevels);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = HATEOTVilderavn.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn, AiActions.castcrushingdespairvilderavn, AiActions.usesunderarmorvilderavn);


        }


        //Bald Hilltop

        static void changebloodmoondryad()
        {

            var silky = library.Get<BlueprintUnit>("82a6be0ba1d061243848871ce2feda27");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var scorchingray = library.Get<BlueprintAbility>("cdb106d53c65bbc4086183d54c3b97c7");
            var earpiercescream = library.Get<BlueprintAbility>("8e7cfa5f213a90549aadd18f8f6f4664");
            var blur = library.Get<BlueprintAbility>("14ec7a4e52e90fa47a4c8d63c69fd5c1");
            var blurbuff = library.Get<BlueprintBuff>("dd3ad347240624d46a11a092b4dd4674");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var colorspray = library.Get<BlueprintAbility>("91da41b9793a4624797921f221db653c");
            var MageShieldAiAction = library.Get<BlueprintAiCastSpell>("8df9d8605fa49554691de7d02b8397ed");
            var MagicMissileAiAction = library.Get<BlueprintAiCastSpell>("e689225185e99d3469052d9cce20316d");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("aee2f46dfa119d44b8bd415d2f5ad339");
            var HideousLaughterAiAction = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");
            var SpiderWebImmunity = library.Get<BlueprintFeature>("3051e7002c803fc47a11bcfa381b9fbd");


        silky.AddFacts = silky.AddFacts.AddToArray(blurbuff,toughness, SpiderWebImmunity);


            var sorcererLevels = silky.ComponentsArray
   .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(scorchingray, blur, haste, earpiercescream, colorspray);
            newAddClassLevels.SelectSpells = spell_list;
            silky.ReplaceComponent(sorcererLevels, newAddClassLevels);




            var humanoidLevels = silky.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == feyClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 5;
            silky.ReplaceComponent(humanoidLevels, newhumanoidLevels);








            var brain = silky.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(MageShieldAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(MagicMissileAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(HoldPersonAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(HideousLaughterAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.scorchingraydelaydryad,AiActions.casthaste,AiActions.castcolorspray,
                                                   AiActions.castmagicmissletransmuter,AiActions.holdpersonzombiecleric,AiActions.earpiercedryad);

        }

        static void changebloodmoonnymph()
        {

            var lostsister = library.Get<BlueprintUnit>("0bdeff53fd8249d478ff8276eb8a1658");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var nymphClass = library.Get<BlueprintCharacterClass>("9a20b40b57f4e684fa20d17c0edfd5ba");
            var druidclass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var spikestones = library.Get<BlueprintAbility>("d1afa8bc28c99104da7d784115552de5");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var aspectofthebear = library.Get<BlueprintAbility>("a4ad1b8fa11e7c347a608c004efce9d5");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var owlswisdombuff = library.Get<BlueprintBuff>("73fc1d19f14339042ba5af34872c1745");

            

            lostsister.AddFacts = lostsister.AddFacts.AddToArray(freedomofmovementbuff,quicken,calllightningability,owlswisdombuff);

            lostsister.Dexterity = 16;

            var druidLevels = lostsister.ComponentsArray
           .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = druidLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            newAddClassLevels.Levels = 10;
            lostsister.ReplaceComponent(druidLevels, newAddClassLevels);


            var druidLevels2 = lostsister.ComponentsArray
   .OfType<AddClassLevels>()
   .First(c => c.CharacterClass == druidclass);
            var newAddClassLevels2 = druidLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(barkskin,flamestrike,spikestones,dispel,aspectofthebear,calllightningstorm,snowball,snowball,snowball,frigidtouch,frigidtouch);
            newAddClassLevels2.MemorizeSpells = spell_list;
            lostsister.ReplaceComponent(druidLevels2, newAddClassLevels2);

            var druidLevels3 = lostsister.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == druidclass);
            var newAddClassLevels3 = druidLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.SelectSpells.AddToArray(barkskin, flamestrike, spikestones, dispel,aspectofthebear,calllightningstorm,snowball,frigidtouch,frigidtouch);
            newAddClassLevels3.SelectSpells = spell_list3;
            lostsister.ReplaceComponent(druidLevels3, newAddClassLevels3);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.barkskin);
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.aspectofthebear);

            var humanoidLevels = lostsister.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == nymphClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 4;
            lostsister.ReplaceComponent(humanoidLevels, newhumanoidLevels);








            var brain = lostsister.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castaspectbear,
                AiActions.barkskingoblinking,AiActions.calllightninglostsister,
                AiActions.calllightningstorm,AiActions.castspikestones,AiActions.dispel,AiActions.flamestrikegoblinshaman,AiActions.castsnowballlostsister,AiActions.castfrigidtouchlostsister);

        }

        static void changebloodmoonnereid()
        {

            var moray = library.Get<BlueprintUnit>("0ec270b3151e5fb4e889ef9c004dd366");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var icestorm = library.Get<BlueprintAbility>("fcb028205a71ee64d98175ff39a0abf9");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var SummonElementalHugeWater = library.Get<BlueprintAbility>("4695c4674e62eb3479fa03f0b47cc6a8");
            var SummonElementalGreaterWater = library.Get<BlueprintAbility>("cfa3ff71a42ab8a4c8a8a4b5db3f04d4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");

            moray.AddFacts = moray.AddFacts.RemoveFromArray(SummonElementalHugeWater);
            moray.AddFacts = moray.AddFacts.AddToArray(quicken,SummonElementalGreaterWater);
            moray.AddFacts = moray.AddFacts.AddToArray(quicken);

            var sorcererLevels = moray.ComponentsArray
           .OfType<AddClassLevels>()
           .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 11;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(icestorm, dragonsbreathsilver, stoneskincommunal, mirrorimage, lightningbolt, haste, displacement);
            newAddClassLevels.SelectSpells = spell_list;
            moray.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var feyLevels = moray.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels2 = feyLevels.CreateCopy();
            newAddClassLevels2.Levels = 5;
            moray.ReplaceComponent(feyLevels, newAddClassLevels2);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);





            var brain = moray.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal, AiActions.icestorm, AiActions.dragonsbreathsilver, AiActions.mirrorimage, 
                AiActions.summonelementalgreatwatermoray,AiActions.lightningboltfourturns,AiActions.casthastetartuk,AiActions.castdisplacementgoblin);

        }

        static void changebloodmoonhamadryad()
        {

            var LeaflessLady = library.Get<BlueprintUnit>("cd7c18ec9aa5c5d4e9294a6a936f3252");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var confusion = library.Get<BlueprintAbility>("cf6c901fb7acc904e85c63b342e9c949");
            var entangle = library.Get<BlueprintAbility>("0fd00984a2c0e0a429cf1a911b4ec5ca");
            var HurricaneBow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var HurricaneBowBuff = library.Get<BlueprintBuff>("002c51d933574824c8ef2b04c9d09ff5");
            var AspectoftheFalcon = library.Get<BlueprintAbility>("7bdb6a9fb6b37614e96f155748ae50c6");
            var AspectoftheFalconBuff = library.Get<BlueprintBuff>("5de9e71d013d1024eb14f4c5605b31dc");
            var Confuseai = library.Get<BlueprintAiCastSpell>("e0606a614d8081145b52e6700ebb91a3");

            


            LeaflessLady.AddFacts = LeaflessLady.AddFacts.AddToArray(rapidshot,rapidshotbuff,entangle, HurricaneBowBuff,AspectoftheFalconBuff,HurricaneBow,AspectoftheFalcon);


            var sorcererLevels = LeaflessLady.ComponentsArray
  .OfType<AddClassLevels>()
  .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 20;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(HurricaneBow,AspectoftheFalcon,entangle);
            newAddClassLevels.SelectSpells = spell_list;
            LeaflessLady.ReplaceComponent(sorcererLevels, newAddClassLevels);




            var brain = LeaflessLady.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(Confuseai);
            brain.Actions = brain.Actions.AddToArray(AiActions.castconfusionhamadryad,AiActions.entanglehamadryad);

        }

        static void changebloodmoonwarwisp()
        {

            var Dazzlelight = library.Get<BlueprintUnit>("77e097c3a1ba7ae4cb771e12eebdfc30");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var abberationClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            var summonmonsterVI = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var oldmagicmissleswift = library.Get<BlueprintAiCastSpell>("e8c30e8f2729fc44baedaa287fd8e9a5");
            var magicmissleswift = library.Get<BlueprintAbility>("e4fc6161735811f44b6ee8b2043fc086");
            var dragonsbreathblue = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var stormbolt = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            var chainlightningai = library.Get<BlueprintAiAction>("2c50bf74c89aceb44a0fea93e39efcb3");
            var natarmor2 = library.Get<BlueprintUnitFact>("45a52ce762f637f4c80cc741c91f58b7");
            var deflectarmor3 = library.Get<BlueprintUnitFact>("6b0b0aa011d26da438a999b35ca97137");
            var deflectarmor8 = library.Get<BlueprintUnitFact>("05425bd28cbb71d4b9dbce0f83231333");
            var wavesofecstasy = library.Get<BlueprintAbility>("1e2d1489781b10a45a3b70192bba9be3");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");
            var icyprison = library.Get<BlueprintAbility>("65e8d23aef5e7784dbeb27b1fca40931");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");


            var sorcererLevels = Dazzlelight.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 16;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(stormbolt, slow, mirrorimage,controlledfireball,
                                                                      wavesofecstasy,coneofcold,displacement,crushingdespair,icyprison);
            newAddClassLevels.SelectSpells = spell_list;
            Dazzlelight.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var abberationLevels = Dazzlelight.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == abberationClass);
            var newAddClassLevels2 = abberationLevels.CreateCopy();
            newAddClassLevels2.Levels = 9;
            Dazzlelight.ReplaceComponent(abberationLevels, newAddClassLevels2);





            Dazzlelight.AddFacts = Dazzlelight.AddFacts.AddToArray( augmentsummon, superiorsummmoning, quicken, deflectarmor3);
            Dazzlelight.AddFacts = Dazzlelight.AddFacts.RemoveFromArray(natarmor2);
            Dazzlelight.AddFacts = Dazzlelight.AddFacts.RemoveFromArray(deflectarmor8);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);

            var brain = Dazzlelight.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(oldmagicmissleswift);
            brain.Actions = brain.Actions.RemoveFromArray(chainlightningai);
            brain.Actions = brain.Actions.AddToArray(AiActions.caststormboltbloodmoon, 
                                                    AiActions.magicmissleswift, AiActions.castslow,
                                                    AiActions.castmirrorimagebloodmoon,AiActions.castchainlightningbloodmoon,
                                                    AiActions.castwavesofecstasy,AiActions.castdisplacementbloodmoon,AiActions.castcrushingdespair,
                                                    AiActions.casticyprisonbloodmoon,AiActions.coneofcoldbloodmoon, AiActions.castcontrolledfireball);


        }

        static void BloodmoonJabberwock()
        {
            var Jabberwock = library.Get<BlueprintUnit>("b8fc0a3a271a997448ce006d254cd285");
            var trueseeing = library.Get<BlueprintAbility>("b3da3fbee6a751d4197e446c7e852bcb");
            var dragonclass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");
            var powerattackfeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var TrueSeeingBuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var WeaponFocusBite = library.Get<BlueprintFeature>("b97edcf55321a814ea6b7807d246726c");
            var WeaponFocusClaw = library.Get<BlueprintFeature>("153937f44fcd42a429a286a10babd82d");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var deflection7 = library.Get<BlueprintUnitFact>("4f2fcce412802c1408e3b89ea8b6c17e");
            var NaturalArmor26 = library.Get<BlueprintUnitFact>("6f92384d2a6de5f4799b100571570f01");
            var NaturalArmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");


            Jabberwock.AddFacts = Jabberwock.AddFacts.RemoveFromArray(NaturalArmor26);
            Jabberwock.AddFacts = Jabberwock.AddFacts.AddToArray(trueseeing, WeaponFocusBite, WeaponFocusClaw, Cornugon, greatershout, toughness, deflection7, NaturalArmor19);

            Jabberwock.MaxHP = 70;

            Jabberwock.Constitution = 32;
            Jabberwock.Strength = 40;
            Jabberwock.Dexterity = 20;
            Jabberwock.Charisma = 26;

            var dragonLevels = Jabberwock.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == dragonclass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 26;
            Jabberwock.ReplaceComponent(dragonLevels, newAddClassLevels);




            var brain = Jabberwock.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usegreatershoutjabber);



        }

        static void BloodmoonWildHuntMonarch()
        {


            var CR19_WildHunt_MonarchStandart = library.Get<BlueprintUnit>("5a855ed523725fb4baa71c92caa3bb5a");
            var firestorm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var DominatePerson = library.Get<BlueprintAbility>("d7cbd2004ce66a042aeab2e95a3c5c61");

            CR19_WildHunt_MonarchStandart.AddFacts = CR19_WildHunt_MonarchStandart.AddFacts.AddToArray(firestorm, DominatePerson);



            var Wildhunt_MonarchGreaterDispellAiAction = library.Get<BlueprintAiAction>("07971f96badfa014989c022e0350ddf9");

            var brain = CR19_WildHunt_MonarchStandart.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(Wildhunt_MonarchGreaterDispellAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.greaterdispelmonarch, AiActions.castfirestormmonarch, AiActions.dominatepersonmonarch);


        }

        static void BloodmoonVilderavn()
        {


            var VilderavnBlood = library.Get<BlueprintUnit>("5355d94ad07046f4d92e6f6b9b7859a3");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var crushingdespair = library.Get<BlueprintAbility>("4baf4109145de4345861fe0f2209d903");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");

            VilderavnBlood.AddFacts = VilderavnBlood.AddFacts.AddToArray(auraofdoom, quicken, crushingdespair, sunder);


            VilderavnBlood.Charisma = 26;
            VilderavnBlood.Constitution = 28;

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);

            var brain = VilderavnBlood.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoomvilderavn, AiActions.castcrushingdespairvilderavn, AiActions.usesunderarmorvilderavn);


        }


        //Elementals

        static void updateElderAirElemental()
        {

            var ElderAir = library.Get<BlueprintUnit>("ddca501b2cc606741a513483d9c928dc");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");


            ElderAir.AddFacts = ElderAir.AddFacts.AddToArray(chainlightning);


            var brain = ElderAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.chainlightningelderair);


        }

        static void updateGreaterAirElemental()
        {

            var GreaterAir = library.Get<BlueprintUnit>("cb8ff0a7ba777ba4291dabb6008767be");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");


            GreaterAir.AddFacts = GreaterAir.AddFacts.AddToArray(chainlightning);


            var brain = GreaterAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.chainlightningelderair);


        }

        static void updateHugeAirElemental()
        {

            var HugeAir = library.Get<BlueprintUnit>("acfa5398635f1a746acd8035e9b98eab");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            HugeAir.AddFacts = HugeAir.AddFacts.AddToArray(lightningbolt);


            var brain = HugeAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }

        static void updateLargeAirElemental()
        {

            var LargeAir = library.Get<BlueprintUnit>("f968ae3c61d18c64e940c7b3ce09cca7");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            LargeAir.AddFacts = LargeAir.AddFacts.AddToArray(lightningbolt);


            var brain = LargeAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }

        static void updateMediumAirElemental()
        {

            var MediumAir = library.Get<BlueprintUnit>("f739047597b7a2849b14def122e1ee0d");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            MediumAir.AddFacts = MediumAir.AddFacts.AddToArray(lightningbolt);


            var brain = MediumAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }

        static void updateSmallAirElemental()
        {

            var SmallAir = library.Get<BlueprintUnit>("af7b264a209291740bdf105c1f5942a6");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            SmallAir.AddFacts = SmallAir.AddFacts.AddToArray(lightningbolt);


            var brain = SmallAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }

        static void updateSummonedElderAirElemental()
        {

            var ElderAir = library.Get<BlueprintUnit>("33bb90ffd13c87b4c8e45d920313752a");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");


            ElderAir.AddFacts = ElderAir.AddFacts.AddToArray(chainlightning);


            var brain = ElderAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.chainlightningelderair);


        }

        static void updateSummonedGreaterAirElemental()
        {

            var GreaterAir = library.Get<BlueprintUnit>("e770cfbb96b528c4db258d7d03fe6533");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");


            GreaterAir.AddFacts = GreaterAir.AddFacts.AddToArray(chainlightning);


            var brain = GreaterAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.chainlightningelderair);


        }

        static void updateSummonedHugeAirElemental()
        {

            var HugeAir = library.Get<BlueprintUnit>("2e24256e459468743b91fbb9aa85e1ab");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            HugeAir.AddFacts = HugeAir.AddFacts.AddToArray(lightningbolt);


            var brain = HugeAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }

        static void updateSummonedLargeAirElemental()
        {

            var LargeAir = library.Get<BlueprintUnit>("3764b43791a00e1468257adbca43ce9b");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            LargeAir.AddFacts = LargeAir.AddFacts.AddToArray(lightningbolt);


            var brain = LargeAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }

        static void updateSummonedMediumAirElemental()
        {

            var MediumAir = library.Get<BlueprintUnit>("676f8b7d0a170674cb6e504e0e30b4f0");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            MediumAir.AddFacts = MediumAir.AddFacts.AddToArray(lightningbolt);


            var brain = MediumAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }

        static void updateSummonedSmallAirElemental()
        {

            var SmallAir = library.Get<BlueprintUnit>("04944455200bc224d955a8e9bbd64f3f");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");


            SmallAir.AddFacts = SmallAir.AddFacts.AddToArray(lightningbolt);


            var brain = SmallAir.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.lightningboltairelemental);


        }




        static void updateElderEarthElemental()
        {

            var ElderEarth = library.Get<BlueprintUnit>("672433d2f2e99764db2eadc6f595a2ba");
            var acidicspray = library.Get<BlueprintAbility>("c543eef6d725b184ea8669dd09b3894c");


            ElderEarth.AddFacts = ElderEarth.AddFacts.AddToArray(acidicspray);


            var brain = ElderEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidicsprayelderearth);


        }

        static void updateGreaterEarthElemental()
        {

            var GreaterEarth = library.Get<BlueprintUnit>("55f39411dc3c9ef43aa61c2d7fe3bfc9");
            var acidicspray = library.Get<BlueprintAbility>("c543eef6d725b184ea8669dd09b3894c");


            GreaterEarth.AddFacts = GreaterEarth.AddFacts.AddToArray(acidicspray);


            var brain = GreaterEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidicsprayelderearth);


        }

        static void updateHugeEarthElemental()
        {

            var HugeEarth = library.Get<BlueprintUnit>("3e447739c6b1e2d41b301ee477e41ba7");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("48c4433acbcecae499d1d38a56f72f36");


            HugeEarth.AddFacts = HugeEarth.AddFacts.AddToArray(dragonsbreathgreen);


            var brain = HugeEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathearthelemental);


        }

        static void updateLargeEarthElemental()
        {

            var LargeEarth = library.Get<BlueprintUnit>("6345d091fc79e0840b14b908a4e65d4d");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("48c4433acbcecae499d1d38a56f72f36");


            LargeEarth.AddFacts = LargeEarth.AddFacts.AddToArray(dragonsbreathgreen);


            var brain = LargeEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathearthelemental);


        }

        static void updateMediumEarthElemental()
        {

            var MediumEarth = library.Get<BlueprintUnit>("11d8e4b048acc0e4c8e42e76b8ab869d");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");


            MediumEarth.AddFacts = MediumEarth.AddFacts.AddToArray(acidarrow);


            var brain = MediumEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidarrowearthelemental);


        }

        static void updateSmallEarthElemental()
        {

            var SmallEarth = library.Get<BlueprintUnit>("a940662426e68524680bc06e1794fa8d");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");


            SmallEarth.AddFacts = SmallEarth.AddFacts.AddToArray(acidarrow);


            var brain = SmallEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidarrowearthelemental);


        }

        static void updateSummonedElderEarthElemental()
        {

            var ElderEarth = library.Get<BlueprintUnit>("6b4cb9b6116f2194192e1e7e379c48d7");
            var acidicspray = library.Get<BlueprintAbility>("c543eef6d725b184ea8669dd09b3894c");


            ElderEarth.AddFacts = ElderEarth.AddFacts.AddToArray(acidicspray);


            var brain = ElderEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidicsprayelderearth);


        }

        static void updateSummonedGreaterEarthElemental()
        {

            var GreaterEarth = library.Get<BlueprintUnit>("cda7013db24f4c547b79bfc5c617066b");
            var acidicspray = library.Get<BlueprintAbility>("c543eef6d725b184ea8669dd09b3894c");


            GreaterEarth.AddFacts = GreaterEarth.AddFacts.AddToArray(acidicspray);


            var brain = GreaterEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidicsprayelderearth);


        }

        static void updateSummonedHugeEarthElemental()
        {

            var HugeEarth = library.Get<BlueprintUnit>("3b86a449e7264174eaccef9b8f02fe20");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("48c4433acbcecae499d1d38a56f72f36");


            HugeEarth.AddFacts = HugeEarth.AddFacts.AddToArray(dragonsbreathgreen);


            var brain = HugeEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathearthelemental);


        }

        static void updateSummonedLargeEarthElemental()
        {

            var LargeEarth = library.Get<BlueprintUnit>("d3d9ab560534bd948b10ac00abbff083");
            var dragonsbreathgreen = library.Get<BlueprintAbility>("48c4433acbcecae499d1d38a56f72f36");


            LargeEarth.AddFacts = LargeEarth.AddFacts.AddToArray(dragonsbreathgreen);


            var brain = LargeEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathearthelemental);


        }

        static void updateSummonedMediumEarthElemental()
        {

            var MediumEarth = library.Get<BlueprintUnit>("812c9a0348e004242ba4e46efa91e38e");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");


            MediumEarth.AddFacts = MediumEarth.AddFacts.AddToArray(acidarrow);


            var brain = MediumEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidarrowearthelemental);


        }

        static void updateSummonedSmallEarthElemental()
        {

            var SmallEarth = library.Get<BlueprintUnit>("651600a51edd20141adb67696986c582");
            var acidarrow = library.Get<BlueprintAbility>("9a46dfd390f943647ab4395fc997936d");


            SmallEarth.AddFacts = SmallEarth.AddFacts.AddToArray(acidarrow);


            var brain = SmallEarth.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.acidarrowearthelemental);


        }



        static void updateElderFireElemental()
        {

            var ElderFire = library.Get<BlueprintUnit>("d6b7b92ea00785f45b8e5a4bf8e87fa2");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");


            ElderFire.AddFacts = ElderFire.AddFacts.AddToArray(firesnake);


            var brain = ElderFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.firesnakeelderfire);


        }

        static void updateGreaterFireElemental()
        {

            var GreaterFire = library.Get<BlueprintUnit>("5b7fc5f74b0195e42ba17f1d7e21a3c9");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");


            GreaterFire.AddFacts = GreaterFire.AddFacts.AddToArray(firesnake);


            var brain = GreaterFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.firesnakeelderfire);


        }

        static void updateHugeFireElemental()
        {

            var HugeFire = library.Get<BlueprintUnit>("906b560315bb1bf4890431ce2676e485");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");


            HugeFire.AddFacts = HugeFire.AddFacts.AddToArray(controlledfireball);


            var brain = HugeFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.controlledfireballfireelemental);


        }

        static void updateLargeFireElemental()
        {

            var LargeFire = library.Get<BlueprintUnit>("25f8ba0f46a1df74b88746872aace0ee");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");


            LargeFire.AddFacts = LargeFire.AddFacts.AddToArray(controlledfireball);


            var brain = LargeFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.controlledfireballfireelemental);


        }

        static void updateMediumFireElemental()
        {

            var MediumFire = library.Get<BlueprintUnit>("37b3eb7ca48264247b3247c732007aef");
            var burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");


            MediumFire.AddFacts = MediumFire.AddFacts.AddToArray(burningarc);


            var brain = MediumFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.burninarcfireelemental);


        }

        static void updateSmallFireElemental()
        {

            var MediumFire = library.Get<BlueprintUnit>("42db8d382f3687a459ffde7921ccbbfc");
            var burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");


            MediumFire.AddFacts = MediumFire.AddFacts.AddToArray(burningarc);


            var brain = MediumFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.burninarcfireelemental);


        }

        static void updateSummonedElderFireElemental()
        {

            var ElderFire = library.Get<BlueprintUnit>("ea0f0bbc6e5e471428d535501b21eb26");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");


            ElderFire.AddFacts = ElderFire.AddFacts.AddToArray(firesnake);


            var brain = ElderFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.firesnakeelderfire);


        }

        static void updateSummonedGreaterFireElemental()
        {

            var GreaterFire = library.Get<BlueprintUnit>("b0b4091bdaebb464e903857a95189dea");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");


            GreaterFire.AddFacts = GreaterFire.AddFacts.AddToArray(firesnake);


            var brain = GreaterFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.firesnakeelderfire);


        }

        static void updateSummonedHugeFireElemental()
        {

            var HugeFire = library.Get<BlueprintUnit>("640fb7efb7c916945837bbcab995267e");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");


            HugeFire.AddFacts = HugeFire.AddFacts.AddToArray(controlledfireball);


            var brain = HugeFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.controlledfireballfireelemental);


        }

        static void updateSummonedLargeFireElemental()
        {

            var LargeFire = library.Get<BlueprintUnit>("ba5026596b06b204eb2efed2b411c5b9");
            var controlledfireball = library.Get<BlueprintAbility>("f72f8f03bf0136c4180cd1d70eb773a5");


            LargeFire.AddFacts = LargeFire.AddFacts.AddToArray(controlledfireball);


            var brain = LargeFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.controlledfireballfireelemental);


        }

        static void updateSummonedMediumFireElemental()
        {

            var MediumFire = library.Get<BlueprintUnit>("a0ab0c31b1a92554291a82e598f39ba4");
            var burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");


            MediumFire.AddFacts = MediumFire.AddFacts.AddToArray(burningarc);


            var brain = MediumFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.burninarcfireelemental);


        }

        static void updateSummmonedSmallFireElemental()
        {

            var MediumFire = library.Get<BlueprintUnit>("46cede83b1f34ad4fa46b8776e352b02");
            var burningarc = library.Get<BlueprintAbility>("eaac3d36e0336cb479209a6f65e25e7c");


            MediumFire.AddFacts = MediumFire.AddFacts.AddToArray(burningarc);


            var brain = MediumFire.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.burninarcfireelemental);


        }




        static void updateElderWaterElemental()
        {

            var ElderWater = library.Get<BlueprintUnit>("af612f1254e352641996915bc45d81b9");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");


            ElderWater.AddFacts = ElderWater.AddFacts.AddToArray(coneofcold);


            var brain = ElderWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldelderwater);


        }

        static void updateGreaterWaterElemental()
        {

            var GreaterWater = library.Get<BlueprintUnit>("dcb38324925468a4097f2f9f35399b2e");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");


            GreaterWater.AddFacts = GreaterWater.AddFacts.AddToArray(coneofcold);


            var brain = GreaterWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldelderwater);


        }

        static void updateHugeWaterElemental()
        {

            var HugeWater = library.Get<BlueprintUnit>("d2020789769c90f42ab780dcba70a6d4");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("45e0813484581514fbfcf49939ee050d");


            HugeWater.AddFacts = HugeWater.AddFacts.AddToArray(dragonsbreathsilver);


            var brain = HugeWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathwaterelemental);


        }

        static void updateLargeWaterElemental()
        {

            var LargeWater = library.Get<BlueprintUnit>("f647c00b160966849bc5c282c8244a6f");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("45e0813484581514fbfcf49939ee050d");


            LargeWater.AddFacts = LargeWater.AddFacts.AddToArray(dragonsbreathsilver);


            var brain = LargeWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathwaterelemental);


        }

        static void updateMediumWaterElemental()
        {

            var MediumWater = library.Get<BlueprintUnit>("9922c4c5d1ec4cf409cf3b4742c90b51");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");


            MediumWater.AddFacts = MediumWater.AddFacts.AddToArray(snowball);


            var brain = MediumWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsnowballwaterelemental);


        }

        static void updateSmallWaterElemental()
        {

            var SmallWater = library.Get<BlueprintUnit>("92c6145373ee5b64fa9e2ec2a0d907db");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");


            SmallWater.AddFacts = SmallWater.AddFacts.AddToArray(snowball);


            var brain = SmallWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsnowballwaterelemental);


        }


        static void updateSummonedElderWaterElemental()
        {

            var ElderWater = library.Get<BlueprintUnit>("3bd31a0b4d800f04a8c5b7b1a6d7061e");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");


            ElderWater.AddFacts = ElderWater.AddFacts.AddToArray(coneofcold);


            var brain = ElderWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldelderwater);


        }

        static void updateSummonedGreaterWaterElemental()
        {

            var GreaterWater = library.Get<BlueprintUnit>("fcc939e3acf355b458ddf9617d8c6c28");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");


            GreaterWater.AddFacts = GreaterWater.AddFacts.AddToArray(coneofcold);


            var brain = GreaterWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldelderwater);


        }

        static void updateSummonedHugeWaterElemental()
        {

            var HugeWater = library.Get<BlueprintUnit>("877c154a296ee8e45be1a00668319923");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("45e0813484581514fbfcf49939ee050d");


            HugeWater.AddFacts = HugeWater.AddFacts.AddToArray(dragonsbreathsilver);


            var brain = HugeWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathwaterelemental);


        }

        static void updateSummonedLargeWaterElemental()
        {

            var LargeWater = library.Get<BlueprintUnit>("680b5b61c80af664daec46af7644486c");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("45e0813484581514fbfcf49939ee050d");


            LargeWater.AddFacts = LargeWater.AddFacts.AddToArray(dragonsbreathsilver);


            var brain = LargeWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.dragonsbreathwaterelemental);


        }

        static void updateSummonedMediumWaterElemental()
        {

            var MediumWater = library.Get<BlueprintUnit>("62a3e860e6e72e6499c38bb8b2fe303e");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");


            MediumWater.AddFacts = MediumWater.AddFacts.AddToArray(snowball);


            var brain = MediumWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsnowballwaterelemental);


        }

        static void updateSummonedSmallWaterElemental()
        {

            var SmallWater = library.Get<BlueprintUnit>("56372b0a2749c224392a5ee74105c534");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");


            SmallWater.AddFacts = SmallWater.AddFacts.AddToArray(snowball);


            var brain = SmallWater.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsnowballwaterelemental);


        }

        //ExtraHealthToNPCs

        //Bartholomew

        static void updateBartholomew()
        {



            var SadisticMage = library.Get<BlueprintUnit>("85a0f58a844cf0d42940fdd2db741764");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff,mageshieldbuff,quicken,combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement,displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewBefore()
        {



            var SadisticMage = library.Get<BlueprintUnit>("e50a599961407de41a55b5cd87045364");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewFinal()
        {



            var SadisticMage = library.Get<BlueprintUnit>("c6fba7281fbf4c34c953097bcd67e06e");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewPacking()
        {



            var SadisticMage = library.Get<BlueprintUnit>("1eeffc7ae20bc6a408569a5606d18e83");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewWOwhip()
        {



            var SadisticMage = library.Get<BlueprintUnit>("637d5457bd886ad4a9ba4045853cbd5d");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewPrisonAsylum()
        {



            var SadisticMage = library.Get<BlueprintUnit>("7c1bb23864196714da9b95a3aeae3ace");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewHub()
        {



            var SadisticMage = library.Get<BlueprintUnit>("d3061fa21b8c19847bc58b21831a68ae");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewFW()
        {



            var SadisticMage = library.Get<BlueprintUnit>("9cb43eb67c428544187d1535901c4477");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        static void updateBartholomewCapital()
        {



            var SadisticMage = library.Get<BlueprintUnit>("884a076fe9a3e4b48ab60c5318caa4a3");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var magicmissle = library.Get<BlueprintAbility>("4ac47ddb9fa1eaf43a1b6809980cfbd2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");



            SadisticMage.MaxHP = 100;
            SadisticMage.Constitution = 18;

            SadisticMage.AddFacts = SadisticMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);

            var wizardLevels = SadisticMage.ComponentsArray
                    .OfType<AddClassLevels>()
                    .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels = wizardLevels.CreateCopy();
            newsorcererLevels.Levels = 11;
            var spell_list = newsorcererLevels.MemorizeSpells.AddToArray(displacement, displacement);
            newsorcererLevels.MemorizeSpells = spell_list;
            SadisticMage.ReplaceComponent(wizardLevels, newsorcererLevels);

            var wizardLevels2 = SadisticMage.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            SadisticMage.ReplaceComponent(wizardLevels2, newsorcererLevels2);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



            var brain = SadisticMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);



        }

        //Flintlock Grassland

        static void updateBrevoyOfficer()

        {


            var BrevoyOfficer = library.Get<BlueprintUnit>("b4864c5800dd7664d889f934195586ac");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoyOfficer.AddFacts[0], "BrevoyOfficerfeature", "322600c7bcd24ede8559470f9e9b465c");
            BrevoyOfficer.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoyOfficerfeature = library.Get<BlueprintFeature>("322600c7bcd24ede8559470f9e9b465c");


            var fighterLevels = BrevoyOfficerfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 12;
            BrevoyOfficerfeature.ReplaceComponent(fighterLevels, newAddClassLevels);



            BrevoyOfficer.Body.Armor = library.Get<BlueprintItemArmor>("65de3fcad4c01ac40bc8567f67901b5b"); //Halfplate +1




        }

        static void updateBrevoySoldierMelee()

        {


            var BrevoySoldierMelee = library.Get<BlueprintUnit>("65b4e923576c25e41900c62f3813173d");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
 

            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierMelee.AddFacts[0], "BrevoySoldierMeleefeature", "e0d343212a514baab1d33c3611397c80");
            BrevoySoldierMelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierMeleefeature = library.Get<BlueprintFeature>("e0d343212a514baab1d33c3611397c80");


            var fighterLevels = BrevoySoldierMeleefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            BrevoySoldierMeleefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1





        }

        static void updateBrevoySoldierMeleeSpear()

        {


            var BrevoySoldierMeleeSpear = library.Get<BlueprintUnit>("733387a28f08e96478a3a8345c84d39a");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierMeleeSpear.AddFacts[0], "BrevoySoldierMeleeSpearfeature", "1905cb60a83b428493fcd229143a39d0");
            BrevoySoldierMeleeSpear.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierMeleeSpearfeature = library.Get<BlueprintFeature>("1905cb60a83b428493fcd229143a39d0");


            var fighterLevels = BrevoySoldierMeleeSpearfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            BrevoySoldierMeleeSpearfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierMeleeSpear.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("9479af1ecd44ceb47a1e54b7268175c3"); //long spear +1





        }

        static void updateBrevoySoldierMeleeSword()

        {


            var BrevoySoldierMelee = library.Get<BlueprintUnit>("63e7133961137da4ea1fc48021ce63c2");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierMelee.AddFacts[0], "BrevoySoldierMeleeswordfeature", "b11e915e459d4e2595229ec3eb43790c");
            BrevoySoldierMelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierMeleefeature = library.Get<BlueprintFeature>("b11e915e459d4e2595229ec3eb43790c");


            var fighterLevels = BrevoySoldierMeleefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            BrevoySoldierMeleefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1





        }

        static void updateBrevoySoldierMeleeTough()

        {


            var BrevoySoldierMelee = library.Get<BlueprintUnit>("6c463785139aedb47a487287e667bae8");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierMelee.AddFacts[0], "BrevoySoldierMeleefeatureTough", "63eca384d89e4bf09194fc46e405a370");
            BrevoySoldierMelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierMeleefeature = library.Get<BlueprintFeature>("63eca384d89e4bf09194fc46e405a370");


            var fighterLevels = BrevoySoldierMeleefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            BrevoySoldierMeleefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1
            BrevoySoldierMelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); //heavy shield +1
            BrevoySoldierMelee.Body.Armor = library.Get<BlueprintItemArmor>("b277c8713472c3a4fb0f1e0ea6d6ed47"); //Banded +1

            

        }

        static void updateBrevoySoldierMeleeSpearTough()

        {


            var BrevoySoldierMeleeSpear = library.Get<BlueprintUnit>("2f3fba914c543c146a01c42716e9cb9b");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierMeleeSpear.AddFacts[0], "BrevoySoldierMeleeSpearfeatureTough", "a903dce5c5b3439caf5271f5de70133e");
            BrevoySoldierMeleeSpear.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierMeleeSpearfeature = library.Get<BlueprintFeature>("a903dce5c5b3439caf5271f5de70133e");


            var fighterLevels = BrevoySoldierMeleeSpearfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            BrevoySoldierMeleeSpearfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierMeleeSpear.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("9479af1ecd44ceb47a1e54b7268175c3"); //long spear +1
            BrevoySoldierMeleeSpear.Body.Armor = library.Get<BlueprintItemArmor>("b277c8713472c3a4fb0f1e0ea6d6ed47"); //Banded +1




        }

        static void updateBrevoySoldierMeleeToughSword()

        {


            var BrevoySoldierMelee = library.Get<BlueprintUnit>("f913f647dc0787348998f9c5c1013de4");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierMelee.AddFacts[0], "BrevoySoldierMeleefeatureToughSword", "6d5aa87126944edbb564fdbdb747c670");
            BrevoySoldierMelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierMeleefeature = library.Get<BlueprintFeature>("6d5aa87126944edbb564fdbdb747c670");


            var fighterLevels = BrevoySoldierMeleefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            BrevoySoldierMeleefeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierMelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("03d706655c07d804cb9d5a5583f9aec5"); //longsword +1
            BrevoySoldierMelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("5c7b898a1bfb6cb4f8c14a0ebc143abe"); //heavy shield +1
            BrevoySoldierMelee.Body.Armor = library.Get<BlueprintItemArmor>("b277c8713472c3a4fb0f1e0ea6d6ed47"); //Banded +1



        }

        static void updateBrevoySoldierRanged()

        {


            var BrevoySoldierRanged = library.Get<BlueprintUnit>("0a7798bd2b26b3249b2fd0da30cd1a90");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierRanged.AddFacts[0], "BrevoySoldierRangedfeature", "f4d3943bfbcd445fb2edb141d16310bf");
            BrevoySoldierRanged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierRangedfeature = library.Get<BlueprintFeature>("f4d3943bfbcd445fb2edb141d16310bf");


            var fighterLevels = BrevoySoldierRangedfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 8;
            BrevoySoldierRangedfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e8aa3f5ca26027b4b846de538b01ee50"); //heavy crossbow +1
            BrevoySoldierRanged.Body.Armor = library.Get<BlueprintItemArmor>("dd3834fe3f48182438b59fd99675fd6c"); //Chainmail +1


           

        }

        static void updateBrevoySoldierRangedTough()

        {


            var BrevoySoldierRanged = library.Get<BlueprintUnit>("553c95137a8d8b048a9ebce335b474fc");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoySoldierRanged.AddFacts[0], "BrevoySoldierRangedfeatureTough", "9ee06679daf3495bb562023faa722d49");
            BrevoySoldierRanged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();



            var BrevoySoldierRangedfeature = library.Get<BlueprintFeature>("9ee06679daf3495bb562023faa722d49");


            var fighterLevels = BrevoySoldierRangedfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            BrevoySoldierRangedfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            BrevoySoldierRanged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("e8aa3f5ca26027b4b846de538b01ee50"); //heavy crossbow +1
            BrevoySoldierRanged.Body.Armor = library.Get<BlueprintItemArmor>("dd3834fe3f48182438b59fd99675fd6c"); //Chainmail +1




        }

        static void updateBrevoyAttackMage()

        {


            var BrevoyAttackMage = library.Get<BlueprintUnit>("a8435360d1c1e8e4895c55b358dac0ad");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");


           


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoyAttackMage.AddFacts[0], "BrevoyAttackMagefeature", "47642f949e6e4d1db28b4988a1862c2c");
            BrevoyAttackMage.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            BrevoyAttackMage.AddFacts = BrevoyAttackMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);



            var BrevoyAttackMagefeature = library.Get<BlueprintFeature>("47642f949e6e4d1db28b4988a1862c2c");


            var wizardLevels = BrevoyAttackMagefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(displacement);
            newAddClassLevels.MemorizeSpells = spell_list;
            BrevoyAttackMagefeature.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels2 = BrevoyAttackMagefeature.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            BrevoyAttackMagefeature.ReplaceComponent(wizardLevels2, newsorcererLevels2);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var brain = BrevoyAttackMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);

        }

        static void updateBrevoyMage()

        {


            var BrevoyAttackMage = library.Get<BlueprintUnit>("3200e78107ede3f45bc12a5ff12615bc");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");





            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoyAttackMage.AddFacts[0], "BrevoyMagefeature", "72d60d4cf9de4341a16c70d504ec89dc");
            BrevoyAttackMage.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            BrevoyAttackMage.AddFacts = BrevoyAttackMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);



            var BrevoyAttackMagefeature = library.Get<BlueprintFeature>("72d60d4cf9de4341a16c70d504ec89dc");


            var wizardLevels = BrevoyAttackMagefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(displacement);
            newAddClassLevels.MemorizeSpells = spell_list;
            BrevoyAttackMagefeature.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels2 = BrevoyAttackMagefeature.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            BrevoyAttackMagefeature.ReplaceComponent(wizardLevels2, newsorcererLevels2);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var brain = BrevoyAttackMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);

        }

        static void updateBrevoyMageSupport()

        {


            var BrevoyAttackMage = library.Get<BlueprintUnit>("c721cd973b869354cbb2f8fea95c2baa");
            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var magearmorbuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var mageshieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");





            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)BrevoyAttackMage.AddFacts[0], "BrevoySupportMagefeature", "41500c4790ce4ca5897a76867f48a319");
            BrevoyAttackMage.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            BrevoyAttackMage.AddFacts = BrevoyAttackMage.AddFacts.AddToArray(magearmorbuff, mageshieldbuff, quicken, combatcasting);



            var BrevoyAttackMagefeature = library.Get<BlueprintFeature>("41500c4790ce4ca5897a76867f48a319");


            var wizardLevels = BrevoyAttackMagefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            newAddClassLevels.Levels = 9;
            var spell_list = newAddClassLevels.MemorizeSpells.AddToArray(displacement);
            newAddClassLevels.MemorizeSpells = spell_list;
            BrevoyAttackMagefeature.ReplaceComponent(wizardLevels, newAddClassLevels);

            var wizardLevels2 = BrevoyAttackMagefeature.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == wizardClass);
            var newsorcererLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newsorcererLevels2.SelectSpells.AddToArray(displacement);
            newsorcererLevels2.SelectSpells = spell_list2;
            BrevoyAttackMagefeature.ReplaceComponent(wizardLevels2, newsorcererLevels2);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);

            var brain = BrevoyAttackMage.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.displacementvordakai);

        }




        //Magical Prison Encounters and Others

        //Lizards

        static void updateThickLizardQueen()

        {


            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var clericClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var lizard_queen = library.Get<BlueprintUnit>("98efa959deae59a46b3007aca1621052");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");
            var PitaxPriest = library.Get<BlueprintUnit>("9656cbdc052f4404eae9890fef33afa2");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var summonelementalgreat = library.Get<BlueprintAbility>("8eb769e3b583f594faabe1cfdb0bb696");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            var chainsoflight = library.Get<BlueprintAbility>("f8cea58227f59c64399044a82c9735c4");
            var righteousmight = library.Get<BlueprintAbility>("90810e5cf53bf854293cbd5ea1066252");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var heal = library.Get<BlueprintAbility>("5da172c4c89f9eb4cbb614f3a67357d3");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var burstofglory = library.Get<BlueprintAbility>("1bc83efec9f8c4b42a46162d72cbf494");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var searing_light = library.Get<BlueprintAbility>("bf0accce250381a44b857d4af6c8e10d");
            var divinefavor = library.Get<BlueprintAbility>("9d5d2d3ffdd73c648af3eb3e585b1113");
            var sm4 = library.Get<BlueprintAbility>("7ed74a3ec8c458d4fb50b192fd7be6ef");
            var banditchannelpositiveai = library.Get<BlueprintAiAction>("2fc0766638579a94ba19779197f509ad");
            var selectivechannel = library.Get<BlueprintFeature>("fd30c69417b434d47b6b03b9c1f568ff");
            var prayeraiaction = library.Get<BlueprintAiAction>("c21e11b437ff4474b80171fea11f7709");
            var heroismbuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var WeaponFocusHeavyMace = library.Get<BlueprintFeature>("5627935cb95be864588aa1f134b7a1ca");
            var WeaponSpecialHeavyMace = library.Get<BlueprintFeature>("8b02149061a1ded49b2438c111021cb1");
            var PointBlankShot = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var bless = library.Get<BlueprintAbility>("90e59f4a4ada87243b7b3535a06d0638");
            var channelenergy = library.Get<BlueprintFeature>("a79013ff4bcd4864cb669622a29ddafb");
            var bardClass = library.Get<BlueprintCharacterClass>("772c83a25e2268e448e841dcd548235f");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var channelpositive = library.Get<BlueprintAbility>("507ba29b9238431baf0ff39c215b5899");
            var heroism = library.Get<BlueprintAbility>("5ab0d42fb68c9e34abae4921822b9d63");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var natarmor5 = library.Get<BlueprintUnitFact>("7661741dbb9604842a642457456fd0e4");

            lizard_queen.AddFacts = lizard_queen.AddFacts.AddToArray(quicken, heroismbuff, combatcasting, improvedinitiative, channelenergy, selectivechannel, channelpositive,natarmor10);
            lizard_queen.AddFacts = lizard_queen.AddFacts.RemoveFromArray(PointBlankShot);
            lizard_queen.AddFacts = lizard_queen.AddFacts.RemoveFromArray(natarmor5);

            lizard_queen.Wisdom = 20;

            lizard_queen.Strength = 8;

            lizard_queen.MaxHP = 50;

            var clericLevels = lizard_queen.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            newAddClassLevels.Levels = 17;
            lizard_queen.ReplaceComponent(clericLevels, newAddClassLevels);


            var clericLevels2 = lizard_queen.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == clericClass);
            var newAddClassLevels2 = clericLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(summonelementalgreat, umbralstrike, umbralstrike, chainsoflight, chainsoflight,
                                                                         righteousmight, bullsmass, heal, flamestrike, flamestrike, burstofglory, heroism,
                                                                         searing_light, searing_light, searing_light, prayer, divinepower, divinepower, shieldoffaith, bless, greaterdispel);
            newAddClassLevels2.MemorizeSpells = spell_list;
            lizard_queen.ReplaceComponent(clericLevels2, newAddClassLevels2);

            lizard_queen.Body.Armor = library.Get<BlueprintItemArmor>("fff10a480788961469261ba04f816803"); //Hide Armor +4
            lizard_queen.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("9f3c56d5247154e47b5ca9500f4d86ce"); //Cloak of Protection +3
            lizard_queen.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("254755ca73eb52a4d8ab1a663106659b"); //Ring of Protection +2
            lizard_queen.Body.Neck = library.Get<BlueprintItemEquipmentNeck>("081a2ffe763320a469de20f1e9b1cd71"); //Amulet of Natuarl armor  +3




            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.prayer);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);


            var auto_metamgic4 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.bless);


           

            var ai_action = library.CopyAndAdd<BlueprintAiCastSpell>("8066bed11e9aef74298d9988dfca3166", "DruidGuard_BullStrengthMassAiAction", "");

            var brain = lizard_queen.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castsearinglightbandit, AiActions.healspell,
                                                    AiActions.castshieldoffaithgorum, AiActions.righteousmightbandit,
                                                    AiActions.flamestrikebandit, AiActions.prayerbandit,
                                                    AiActions.summonelementalgreatfire, AiActions.chainsoflight, AiActions.castburstofglory,
                                                    AiActions.umbral_strikehateot, AiActions.divine_power_first, AiActions.castchannelpositivepitax,
                                                    AiActions.castbullsmasspitax, AiActions.castdivinepowerdelaypitax, AiActions.blesscastpitax);



        }

        static void updateThickLizardKing()
        {


            var lizard_king = library.Get<BlueprintUnit>("73b06130e76c4554897f97a8ac453cfb");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675"); 
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var natarmor12 = library.Get<BlueprintUnitFact>("0b2d92c6aac8093489dfdadf1e448280");
            var natarmor5 = library.Get<BlueprintUnitFact>("7661741dbb9604842a642457456fd0e4");


            lizard_king.AddFacts = lizard_king.AddFacts.AddToArray(Cornugon,natarmor12);
            lizard_king.AddFacts = lizard_king.AddFacts.RemoveFromArray(natarmor5);

            var barbarianLevels = lizard_king.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            lizard_king.ReplaceComponent(barbarianLevels, newAddClassLevels);


            var humanoidLevels = lizard_king.ComponentsArray
           .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 3;
            lizard_king.ReplaceComponent(humanoidLevels, newhumanoidLevels);


            lizard_king.MaxHP = 80;

            lizard_king.Skills.Diplomacy = 12;

            lizard_king.Body.Armor = library.Get<BlueprintItemArmor>("fff10a480788961469261ba04f816803"); //Hide Armor +4
            lizard_king.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("9f3c56d5247154e47b5ca9500f4d86ce"); //Cloak of Protection +3
            lizard_king.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("254755ca73eb52a4d8ab1a663106659b"); //Ring of Protection +2
            lizard_king.Body.Neck = library.Get<BlueprintItemEquipmentNeck>("081a2ffe763320a469de20f1e9b1cd71"); //Amulet of Natuarl armor  +3
           


        }

        static void updateThickLizardfolk()
        {


            var thicklizard = library.Get<BlueprintUnit>("d5b69b176517aa94887a0c457b3a5115");
            var rogueClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var natarmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var natarmor5 = library.Get<BlueprintUnitFact>("7661741dbb9604842a642457456fd0e4");


            thicklizard.AddFacts = thicklizard.AddFacts.AddToArray(natarmor8);
            thicklizard.AddFacts = thicklizard.AddFacts.RemoveFromArray(natarmor5);

            var barbarianLevels = thicklizard.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == rogueClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 12;
            thicklizard.ReplaceComponent(barbarianLevels, newAddClassLevels);


            var humanoidLevels = thicklizard.ComponentsArray
           .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == humanoidClass);
            var newhumanoidLevels = humanoidLevels.CreateCopy();
            newhumanoidLevels.Levels = 2;
            thicklizard.ReplaceComponent(humanoidLevels, newhumanoidLevels);




            thicklizard.Body.Armor = library.Get<BlueprintItemArmor>("f251cb7bbf176e340893b9e40f9a7c29"); //Leather Armor +2
            thicklizard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("0af6a4ac898a2ca4c9b0a7e76ec7522b");//Shortsword +2
            thicklizard.Body.SecondaryHand = library.Get<BlueprintItemShield>("2a298726445c2184bbeab9f34ece55eb"); //Light Shield +3



        }

        //Devourer

        static void updateDevourerEncounter()

        {


            var DevourerEncounter = library.Get<BlueprintUnit>("741f1f72663260c4fa6350a8829c843e");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var auraofdoom = library.Get<BlueprintAbility>("3244b350df4c474084de760c2aaf7974");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var DevourerSlayLivingAiAction = library.Get<BlueprintAiAction>("a497f680f30c4fd4f9a4e35df60aa9f6");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var summonbloodybones = library.Get<BlueprintAbility>("8bf285a86abd4e64a9613f185aa689a1");

            DevourerEncounter.AddFacts = DevourerEncounter.AddFacts.AddToArray(quicken, auraofdoom, summonbloodybones, Cornugon);


            DevourerEncounter.MaxHP = 150;
            DevourerEncounter.Strength = 36;
            DevourerEncounter.Charisma = 32;

            var barbarianLevels = DevourerEncounter.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == barbarianClass);
            var newAddClassLevels = barbarianLevels.CreateCopy();
            newAddClassLevels.Levels = 0;
            DevourerEncounter.ReplaceComponent(barbarianLevels, newAddClassLevels);


            var fighterLevels = DevourerEncounter.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels2 = fighterLevels.CreateCopy();
            newAddClassLevels2.Levels = 24;
            DevourerEncounter.ReplaceComponent(fighterLevels, newAddClassLevels2);

            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.auraofdoom);


            var brain = DevourerEncounter.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(DevourerSlayLivingAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castauraofdoom, AiActions.castslaylivingdevourer, AiActions.usesummonbloodybonesbeast);

            DevourerEncounter.GetComponent<AddTags>().UseInRandomEncounter = false;
            DevourerEncounter.GetComponent<AddTags>().UseInDungeon = false;

        }


        //Corrupted Deva

        static void updateInsaneWizard()

        {


            var wizardClass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var insane_wizard = library.Get<BlueprintUnit>("426bdee2866ab3f409ea2d6196d2c101");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var warpriestClass = library.Get<BlueprintCharacterClass>("e119d84528144a7797ad34fd718b1f87");
            var chainsoflight = library.Get<BlueprintAbility>("f8cea58227f59c64399044a82c9735c4");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var sm6 = library.Get<BlueprintAbility>("e740afbab0147944dab35d83faa0ae1c");
            var summonbloodybones = library.Get<BlueprintAbility>("8bf285a86abd4e64a9613f185aa689a1");
            var deflection11 = library.Get<BlueprintUnitFact>("5bd299862ce0e0b42901021c3872b4ad");
            var CallFallen = library.Get<BlueprintAbility>("259c56f85ed8425991a8889563ae0de9");

            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var shieldoffaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");
            var prayer = library.Get<BlueprintAbility>("faabd2cc67efa4646ac58c7bb3e40fcc");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var Effortlessarmorbuff = library.Get<BlueprintBuff>("40273fe8ff7437f41b72329284678995");
            var SpellResistanceBuff = library.Get<BlueprintBuff>("50a77710a7c4914499d0254e76a808e5");
            var firebrandbuff = library.Get<BlueprintBuff>("c6cc1c5356db4674dbd2be20ea205c86");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var acidfeat = library.Get<BlueprintFeature>("a1555920433647e6853e94316977727f");
            var warpriestdestructionbuff = library.Get<BlueprintBuff>("61c276ff8fd94fed92e7dac5cd090d11");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");

            //Old Facts
            var StoneskinBuff = library.Get<BlueprintBuff>("7aeaf147211349b40bb55c57fec8e28d");
            var MageArmorBuff = library.Get<BlueprintBuff>("a92acdf18049d784eaa8f2004f5d2304");
            var HeroismBuff = library.Get<BlueprintBuff>("87ab2fed7feaaff47b62a3320a57ad8d");
            var FireResistance30 = library.Get<BlueprintFeature>("4c7bf052b24c61b4d8da4e42785f2ea3");
            var AcidResistance30 = library.Get<BlueprintFeature>("1684273fa9c4736488356e31a7e3b3dc");
            var ElectricityResistance30 = library.Get<BlueprintFeature>("7db3897809a64f0498f77516b5023bf0");
            var FakeFamiliarBuff = library.Get<BlueprintBuff>("e728858c461e294428f2501405eac3a9");
            var SeeInvisibilitytBuff = library.Get<BlueprintBuff>("0adecbf63b614e846bfe15c33f34507e");



            //New Facts
            var fireimmunity = library.Get<BlueprintFeature>("11ac3433adfa74642a93111624376070");
            var acidimmunity = library.Get<BlueprintFeature>("c994f1a0dfce1c54f94420588da61617");
            var electricimmunity = library.Get<BlueprintFeature>("cd1e5ab641a833c49994aff99db98952");
            var coldimmunity = library.Get<BlueprintFeature>("9ae23798a9284e044ad2716a772a410e");
            var DR10good = library.Get<BlueprintFeature>("e19200a99d215074c935cb04175c5665");
            var SpellResistance11plusCR = library.Get<BlueprintFeature>("205205053a2915d4782cf48dc0cc3c09");
            var SubtypeAngel = library.Get<BlueprintFeature>("65d9b6889df167044abb624e2160c43b");
            var ImmunityToDeathEffects = library.Get<BlueprintFeature>("41d5e076fcea3fa4a9158ffded9185f7");
            var SubtypeEvil = library.Get<BlueprintFeature>("5279fc8380dd9ba419b4471018ffadd1");
            var WingsAngelBlack = library.Get<BlueprintBuff>("a19cda073f4c2b64ca1f8bf8fe285ece");
           // var MovanicDevaFeatures = library.Get<BlueprintFeature>("bd5f355d537dbb640b2755b618671bd8");
            var Unholyaura = library.Get<BlueprintAbility>("47f9cb1c367a5e4489cfa32fce290f86");
            var SubtypeExtraplanar = library.Get<BlueprintFeature>("136fa0343d5b4b348bdaa05d83408db3");
            var ImmunityToEnergyDrain = library.Get<BlueprintFeature>("efe0344bca1290244a277ed5c45d9ff2");
            
            var ImmunityToPetrification = library.Get<BlueprintFeature>("efe0344bca1290244a277ed5c45d9ff2");
            var ImmunityToPoison = library.Get<BlueprintFeature>("7e3f3228be49cce49bda37f7901bf246");
            var hellfireray = library.Get<BlueprintAbility>("700cfcbd0cb2975419bcab7dbb8c6210");


            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(StoneskinBuff);
            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(MageArmorBuff);
            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(HeroismBuff);
            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(FireResistance30);
            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(AcidResistance30);
            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(ElectricityResistance30);
            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(FakeFamiliarBuff);
            insane_wizard.AddFacts = insane_wizard.AddFacts.RemoveFromArray(SeeInvisibilitytBuff);

            insane_wizard.AddFacts = insane_wizard.AddFacts.AddToArray(quicken, fireimmunity, electricimmunity, DR10good, SpellResistance11plusCR, ImmunityToDeathEffects, SubtypeEvil,
                                                                        WingsAngelBlack, Unholyaura, SubtypeExtraplanar, ImmunityToEnergyDrain, acidimmunity, coldimmunity, ImmunityToPetrification,
                                                                        electricalfeat,warpriestdestructionbuff,deflection11,CallFallen);


            insane_wizard.Alignment = Alignment.LawfulEvil;
            insane_wizard.Race = library.Get<BlueprintRace>("b7f02ba92b363064fb873963bec275ee"); 


            insane_wizard.Strength = 20;
            insane_wizard.Dexterity = 17;
            insane_wizard.Constitution = 22;
            insane_wizard.Intelligence = 17;
            insane_wizard.Wisdom = 20;
            insane_wizard.Charisma = 17;

            var warpriestLevels = insane_wizard.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardClass);
            var newAddClassLevels = warpriestLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("e119d84528144a7797ad34fd718b1f87");
            newAddClassLevels.Levels = 17;
            insane_wizard.ReplaceComponent(warpriestLevels, newAddClassLevels);


            var sorcererLevels2 = insane_wizard.ComponentsArray
  .OfType<AddClassLevels>()
  .First(c => c.CharacterClass == warpriestClass);
            var newAddClassLevels2 = sorcererLevels2.CreateCopy();
            var spell_list5 = newAddClassLevels2.MemorizeSpells.AddToArray(divinepower, shieldoffaith, prayer, freedomofmovement,trueseeing,chainsoflight,flamestrike, flamestrike,chainsoflight,hellfireray);
            newAddClassLevels2.MemorizeSpells = spell_list5;
            insane_wizard.ReplaceComponent(sorcererLevels2, newAddClassLevels2);


            var sorcererLevels3 = insane_wizard.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == warpriestClass);
            var newAddClassLevels3 = sorcererLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.MemorizeSpells.RemoveFromArray(sm6);
            newAddClassLevels3.MemorizeSpells = spell_list3;
            insane_wizard.ReplaceComponent(sorcererLevels3, newAddClassLevels3);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var magusLevels = insane_wizard.GetComponent<AddClassLevels>();
            var newmagusLevels = magusLevels.CreateCopy();
            newmagusLevels.CharacterClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            newmagusLevels.Levels = 5;
            insane_wizard.AddComponent(newmagusLevels);


            insane_wizard.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{insane_wizard.name}.name", "Corrupted Ghaele Azata"));


            insane_wizard.Prefab = new UnitViewLink() { AssetId = "69aa28050e471024baa6f2150bcc0751" };

            insane_wizard.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("1d367acacbaf8504c99f0a38c0258468"); //Greatsword +2 Flaming
            insane_wizard.Body.Armor= library.Get<BlueprintItemArmor>("c77060ede0a983f4a8c7c47032ecf1ea"); //Breastplate +2
            insane_wizard.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("04dff7841c5f499478c91487d9bbdcef"); //Cloak of Protection +2
            insane_wizard.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("254755ca73eb52a4d8ab1a663106659b"); //Ring of Protection +2
            insane_wizard.Body.Neck = library.Get<BlueprintItemEquipmentNeck>("081a2ffe763320a469de20f1e9b1cd71"); //Amulet of Natuarl armor  +3

            
            var LairSummonMonsterIIId3AiAction = library.Get<BlueprintAiCastSpell>("4efd8abb25894704d8c82617f9c2dee9");


            insane_wizard.Faction = library.Get<BlueprintFaction>("0f539babafb47fe4586b719d02aff7c4");

            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            insane_wizard.Brain.Actions = new_actions;

            var brain = insane_wizard.Brain;
     
            brain.Actions = brain.Actions.AddToArray(AiActions.trueseeing,AiActions.unholyauradeva, AiActions.castdivinepowerdelaypitax, AiActions.castflamestrikedeva,AiActions.chainsoflightdeva, 
                AiActions.usecallfallen, AiActions.castshieldoffaithzorek, AiActions.prayergoblinshaman, AiActions.castfreedomofmovement,AiActions.hellfire_raydeva);

            insane_wizard.GetComponent<Experience>().CR = 15;


        }


        static void updateFallenDeva()

        {


            var fallendeva = library.Get<BlueprintUnit>("051dce1d2c60412d92a4c29081e18c08");

 
            var DR10evil = library.Get<BlueprintFeature>("f0937c058e82a2146adadff86887f014");
            var SubtypeGood = library.Get<BlueprintFeature>("23247ff3b44fd3a42ab752cd04e629b0");
            var MovanicDevaFeatures = library.Get<BlueprintFeature>("bd5f355d537dbb640b2755b618671bd8");
            var UnholyAuraBuff = library.Get<BlueprintBuff>("9eda82a1f78558747a03c17e0e9a1a68");
            

            //New Facts
            var fireimmunity = library.Get<BlueprintFeature>("11ac3433adfa74642a93111624376070");
            var acidimmunity = library.Get<BlueprintFeature>("c994f1a0dfce1c54f94420588da61617");
            var electricimmunity = library.Get<BlueprintFeature>("cd1e5ab641a833c49994aff99db98952");
            var coldimmunity = library.Get<BlueprintFeature>("9ae23798a9284e044ad2716a772a410e");
            var DR10good = library.Get<BlueprintFeature>("e19200a99d215074c935cb04175c5665");
            var SpellResistance11plusCR = library.Get<BlueprintFeature>("205205053a2915d4782cf48dc0cc3c09");
            var SubtypeAngel = library.Get<BlueprintFeature>("65d9b6889df167044abb624e2160c43b");
            var ImmunityToDeathEffects = library.Get<BlueprintFeature>("41d5e076fcea3fa4a9158ffded9185f7");
            var SubtypeEvil = library.Get<BlueprintFeature>("5279fc8380dd9ba419b4471018ffadd1");
            var WingsAngelBlack = library.Get<BlueprintBuff>("a19cda073f4c2b64ca1f8bf8fe285ece");
            // var MovanicDevaFeatures = library.Get<BlueprintFeature>("bd5f355d537dbb640b2755b618671bd8");
            var Unholyaura = library.Get<BlueprintAbility>("47f9cb1c367a5e4489cfa32fce290f86");
            var SubtypeExtraplanar = library.Get<BlueprintFeature>("136fa0343d5b4b348bdaa05d83408db3");
            var ImmunityToEnergyDrain = library.Get<BlueprintFeature>("efe0344bca1290244a277ed5c45d9ff2");

            var ImmunityToPetrification = library.Get<BlueprintFeature>("efe0344bca1290244a277ed5c45d9ff2");
            var ImmunityToPoison = library.Get<BlueprintFeature>("7e3f3228be49cce49bda37f7901bf246");
            
                var HolyAura = library.Get<BlueprintAbility>("808ab74c12df8784ab4eeaf6a107dbea");


            fallendeva.AddFacts = fallendeva.AddFacts.RemoveFromArray(DR10evil);

            fallendeva.AddFacts = fallendeva.AddFacts.RemoveFromArray(SubtypeAngel);
            fallendeva.AddFacts = fallendeva.AddFacts.RemoveFromArray(SubtypeGood);
            fallendeva.AddFacts = fallendeva.AddFacts.RemoveFromArray(MovanicDevaFeatures);
            fallendeva.AddFacts = fallendeva.AddFacts.RemoveFromArray(HolyAura);

            fallendeva.AddFacts = fallendeva.AddFacts.AddToArray(fireimmunity, electricimmunity, DR10good,  SubtypeEvil,
                                                                        Unholyaura,  ImmunityToEnergyDrain, acidimmunity, coldimmunity, ImmunityToPetrification,UnholyAuraBuff);

            fallendeva.Alignment = Alignment.LawfulEvil;






            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.shieldoffaith);
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.divinepower);

            var magusLevels = fallendeva.GetComponent<AddClassLevels>();
            var newmagusLevels = magusLevels.CreateCopy();
            newmagusLevels.CharacterClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            newmagusLevels.Levels = 4;
            fallendeva.AddComponent(newmagusLevels);

            fallendeva.Faction = library.Get<BlueprintFaction>("0f539babafb47fe4586b719d02aff7c4");










        }

        


        //Lady of Shallows

        static void updateLadyofShallows()

        {


            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var lady_shallows = library.Get<BlueprintUnit>("ac131b0101870b6489609a7f33b5e576");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var summonaidlake = library.Get<BlueprintAbility>("e09c4938682d490f918a9fc79d30b4c1");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var SummonElementalHugeWater = library.Get<BlueprintAbility>("4695c4674e62eb3479fa03f0b47cc6a8");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var mindfog = library.Get<BlueprintAbility>("eabf94e4edc6e714cabd96aa69f8b207");
            var kishout = library.Get<BlueprintAbility>("5c8cde7f0dcec4e49bfa2632dfe2ecc0");
            var EaglesSplendorMass = library.Get<BlueprintAbility>("2caa607eadda4ab44934c5c9875e01bc");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var shout = library.Get<BlueprintAbility>("f09453607e683784c8fca646eec49162");

        lady_shallows.AddFacts = lady_shallows.AddFacts.RemoveFromArray(SummonElementalHugeWater);
            lady_shallows.AddFacts = lady_shallows.AddFacts.AddToArray(quicken,summonaidlake,toughness,improvedinitiative,EaglesSplendorMass);

            var sorcererLevels = lady_shallows.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == sorcererClass);
            var newsorcererLevels = sorcererLevels.CreateCopy();
            newsorcererLevels.Levels = 18;
            lady_shallows.ReplaceComponent(sorcererLevels, newsorcererLevels);


            var sorcererLevels2 = lady_shallows.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == sorcererClass);
            var newsorcererLevels2 = sorcererLevels2.CreateCopy();
            var spell_list = newsorcererLevels2.SelectSpells.AddToArray(mirrorimage,displacement,freedomofmovement,chainlightning,mindfog,kishout,lightningbolt,shout);
            newsorcererLevels2.SelectSpells = spell_list;
            lady_shallows.ReplaceComponent(sorcererLevels2, newsorcererLevels2);

            var feyLevels = lady_shallows.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == feyClass);
            var newAddClassLevels2 = feyLevels.CreateCopy();
            newAddClassLevels2.Levels = 6;
            lady_shallows.ReplaceComponent(feyLevels, newAddClassLevels2);

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.EaglesSplendorMass);

            var NereidLairBoss_EaglesSplendorAiAction = library.Get<BlueprintAiCastSpell>("e93f14ff0c4d1e043bee2e3d40761bcd");
            var NereidLairBoss_ShieldAiAction = library.Get<BlueprintAiCastSpell>("f27eb59aca9a9704eaa0b8db0a67b753");
            var NereidLairBoss_MagicMissileAiAction = library.Get<BlueprintAiCastSpell>("517eddfcdd0bd3949a768926f8807490");
            var NereidLairBoss_SerenityAiAction = library.Get<BlueprintAiCastSpell>("b7e372b25d9edea4c8a7436ecff2b67e");
            var NereidLairBoss_DominateAiAction = library.Get<BlueprintAiCastSpell>("6d1a1aa7b1e4acb4fab5f8a84a58121c");
            var NereidLairBoss_CloakOfDreamsAiAction = library.Get<BlueprintAiCastSpell>("7f2c121b79b924d4f852360a4049fdda");


            var brain = lady_shallows.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(NereidLairBoss_EaglesSplendorAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(NereidLairBoss_ShieldAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(NereidLairBoss_MagicMissileAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(NereidLairBoss_SerenityAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(NereidLairBoss_DominateAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(NereidLairBoss_CloakOfDreamsAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesummonaidlake, AiActions.mirrorimage, AiActions.casteaglemass,AiActions.castfreedomofmovement, AiActions.castserenityshallow,
                                                        AiActions.displacementvordakai,AiActions.greaterdispelshallows,AiActions.castdominateshallow,AiActions.castmindfogshallow,
                                                       AiActions.castkishoutshallow,AiActions.chainlightningshallow, AiActions.castcloakofdreams,AiActions.castshieldsprig,
                                                       AiActions.lightningboltshallow,AiActions.castshoutshallow);

           


           


        }

        static void changenereidhelpers()
        {

            var nereidhelper = library.Get<BlueprintUnit>("9a9b22c8d9024798a36ef6848da7c7a2");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var icestorm = library.Get<BlueprintAbility>("fcb028205a71ee64d98175ff39a0abf9");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var dragonsbreathsilver = library.Get<BlueprintAbility>("5e826bcdfde7f82468776b55315b2403");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var SummonElementalHugeWater = library.Get<BlueprintAbility>("4695c4674e62eb3479fa03f0b47cc6a8");
            var SummonElementalGreaterWater = library.Get<BlueprintAbility>("cfa3ff71a42ab8a4c8a8a4b5db3f04d4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");

            nereidhelper.AddFacts = nereidhelper.AddFacts.RemoveFromArray(SummonElementalHugeWater);
            nereidhelper.AddFacts = nereidhelper.AddFacts.AddToArray(quicken);
      

            var sorcererLevels = nereidhelper.ComponentsArray
           .OfType<AddClassLevels>()
           .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = sorcererLevels.CreateCopy();
            newAddClassLevels.Levels = 15;
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(icestorm, dragonsbreathsilver, stoneskincommunal, mirrorimage, lightningbolt, haste, displacement);
            newAddClassLevels.SelectSpells = spell_list;
            nereidhelper.ReplaceComponent(sorcererLevels, newAddClassLevels);

            var feyLevels = nereidhelper.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels2 = feyLevels.CreateCopy();
            newAddClassLevels2.Levels = 5;
            nereidhelper.ReplaceComponent(feyLevels, newAddClassLevels2);


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.mirrorimage);





            var brain = nereidhelper.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.stoneskincommunal, AiActions.icestorm, AiActions.dragonsbreathsilver, AiActions.mirrorimage,
                AiActions.summonelementalgreatwatermoray, AiActions.lightningboltthreeturns, AiActions.casthastetartuk, AiActions.displacementvordakai);

        }

        static void updateLadyWaterElemental()
        {

            var ElderWater = library.Get<BlueprintUnit>("993612e826514bc9b3c6caaff5adefaa");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var NaturalArmor11 = library.Get<BlueprintUnitFact>("fe38367139432294e8c229edc066e4ac");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");

            ElderWater.MaxHP = 120;
            ElderWater.Charisma = 22;

            ElderWater.AddFacts = ElderWater.AddFacts.RemoveFromArray(NaturalArmor11);
            ElderWater.AddFacts = ElderWater.AddFacts.AddToArray(coneofcold, natarmor14);

            var outsiderLevels = ElderWater.ComponentsArray
                       .OfType<AddClassLevels>()
                       .First(c => c.CharacterClass == outsiderclass);
            var newnymphLevels = outsiderLevels.CreateCopy();
            newnymphLevels.Levels = 18;
            ElderWater.ReplaceComponent(outsiderLevels, newnymphLevels);




            var brain = ElderWater.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.coneofcoldelderwater, AiActions.cleave);

            ElderWater.GetComponent<Experience>().CR = 15;


        }


        //Great Ooze

        static void changeIronGolemBoss()

        {


            var GreatOoze = library.Get<BlueprintUnit>("a7eaa09a61b298e4ebe97695e8be4b03");
            var slamhuge4d8 = library.Get<BlueprintItemWeapon>("56af1655dd288b84d97aa185c9d2eaf5");
            var constructClass = library.Get<BlueprintCharacterClass>("fd66bdea5c33e5f458e929022322e6bf");
            var SlamTwoHanded2d10 = library.Get<BlueprintItemWeapon>("9088e563c33748b409bf165dd234fb25");
            var DRAdamantine15 = library.Get<BlueprintFeature>("5a5a56af90a05024e8e1f2f50187c2d1");
            var IronGolemImmunity = library.Get<BlueprintFeature>("4ccca90d0556b554eb6e7dbd665c4d41");
            var TripImmune = library.Get<BlueprintFeature>("c1b26f97b974aec469613f968439e7bb");
            var ImmunityToSleep = library.Get<BlueprintFeature>("c263f44f72df009489409af122b5eefc");
            var ImmunityToStun = library.Get<BlueprintFeature>("bd9df2d4a4cef274285b8827b6769bde");
            var ImmunityToMindAffecting = library.Get<BlueprintFeature>("3eb606c0564d0814ea01a824dbe42fb0");
            var AcidImmunity = library.Get<BlueprintFeature>("c994f1a0dfce1c54f94420588da61617");
            var MimicImmunesFeature = library.Get<BlueprintFeature>("72c7c3b95972c554b9302c537ae3f73f");
            var GolemIronBoss_PoisonOnAttack = library.Get<BlueprintFeature>("03900ffa5b5a8234f80b25c681aac631");
            var acidfeat = library.Get<BlueprintFeature>("a1555920433647e6853e94316977727f");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var deflectionarmor12 = library.Get<BlueprintUnitFact>("6ceb0f5d88f992c4bb31dde295c9a9a2");
            var natarmor22 = library.Get<BlueprintUnitFact>("eee672c8f6555b445a89dbbb91361d64");
            var acidicspray = library.Get<BlueprintAbility>("c543eef6d725b184ea8669dd09b3894c");
            var Split = library.Get<BlueprintAbility>("e8628038652343fcbe93de195e1d7885");
            var dr5 = library.Get<BlueprintFeature>("f4b3dfedcc150d249be42c0d12302b20");

            GreatOoze.AddFacts = GreatOoze.AddFacts.RemoveFromArray(DRAdamantine15);
            GreatOoze.AddFacts = GreatOoze.AddFacts.RemoveFromArray(IronGolemImmunity);
            GreatOoze.AddFacts = GreatOoze.AddFacts.RemoveFromArray(GolemIronBoss_PoisonOnAttack);
            GreatOoze.AddFacts = GreatOoze.AddFacts.RemoveFromArray(natarmor22);

            GreatOoze.AddFacts = GreatOoze.AddFacts.AddToArray(TripImmune,ImmunityToSleep,ImmunityToStun,ImmunityToMindAffecting, acidicspray,
                                                                AcidImmunity,MimicImmunesFeature,acidfeat,deflectionarmor12,natarmor10,Split,dr5);



            GreatOoze.MaxHP = 50;



            GreatOoze.Dexterity = 16;

            GreatOoze.Constitution = 32;

            GreatOoze.Intelligence = 1;

            GreatOoze.Wisdom = 1;

            GreatOoze.Charisma = 1;



            var oozeLevels = GreatOoze.ComponentsArray
         .OfType<AddClassLevels>()
          .First(c => c.CharacterClass == constructClass);
            var newAddClassLevels = oozeLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            newAddClassLevels.Levels = 22;
            GreatOoze.ReplaceComponent(oozeLevels, newAddClassLevels);




            GreatOoze.Body.AdditionalLimbs = GreatOoze.Body.AdditionalLimbs.AddToArray(slamhuge4d8);


            GreatOoze.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{GreatOoze.name}.name", "Great Mighty Ooze"));

            GreatOoze.Faction = library.Get<BlueprintFaction>("0f539babafb47fe4586b719d02aff7c4");
            GreatOoze.Visual.Barks = library.Get<BlueprintUnitAsksList>("3acd823cec0fc604ca00873b4fb6a864");
            GreatOoze.Prefab = new UnitViewLink() { AssetId = "4dfa7070edb996943a7b167c6cacab14" };

            var IronGolemBreathAiAction = library.Get<BlueprintAiCastSpell>("f1a1e3777adc23e41a72c7d43df1d134");


            var brain = GreatOoze.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(IronGolemBreathAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.acidicsprayooze,AiActions.usesplit);


        }


        static void changeBabyOoze()

        {


            var BabyOoze = library.Get<BlueprintUnit>("6216383fc3ea4b8a950c7bdfcb707547");
            var abberationClass = library.Get<BlueprintCharacterClass>("e40e01860956b8b4d80059d4437996f5");
            var natarmor10 = library.Get<BlueprintUnitFact>("4179c5c08d606a6439a62bf178b738e1");
            var natarmor3 = library.Get<BlueprintUnitFact>("f6e106931f95fec4eb995f0d0629fb84");


            BabyOoze.AddFacts = BabyOoze.AddFacts.RemoveFromArray(natarmor3);
            BabyOoze.AddFacts = BabyOoze.AddFacts.AddToArray(natarmor10);


            var outsiderLevels = BabyOoze.ComponentsArray
                      .OfType<AddClassLevels>()
                      .First(c => c.CharacterClass == abberationClass);
            var newnymphLevels = outsiderLevels.CreateCopy();
            newnymphLevels.Levels = 15;
            BabyOoze.ReplaceComponent(outsiderLevels, newnymphLevels);






            BabyOoze.Dexterity = 20;

           








        }

        



        //Zombie Lair (Zombie Magus)

        static void updateZombieLairFighter()

        {


            var ZombieFighter = library.Get<BlueprintUnit>("ed56719820877c54c995a942f6a94869");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");

            ZombieFighter.AddFacts = ZombieFighter.AddFacts.AddToArray(disarm, greatfortitude, lightningreflexes);




            var fighterLevels = ZombieFighter.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            ZombieFighter.ReplaceComponent(fighterLevels, newAddClassLevels);

            ZombieFighter.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("7bef1327d4cb31249823d9fcb24af332"); //Scimitar +1
            ZombieFighter.Body.SecondaryHand = library.Get<BlueprintItemShield>("d41ea649a1054b647aafc5b2cb4f8543"); //Heavy Shield +2
            ZombieFighter.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4"); //Breastplate +1




            var brain = ZombieFighter.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usedisarmspectre);

        }

        static void updateZombieLairArcher()

        {


            var ZombieArcher = library.Get<BlueprintUnit>("ccdc7654f83385c41aa3eea4c466a0c7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var blindfight = library.Get<BlueprintFeature>("4e219f5894ad0ea4daa0699e28c37b1d");


            ZombieArcher.AddFacts = ZombieArcher.AddFacts.AddToArray(lightningreflexes, blindfight);



            ZombieArcher.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("c98788ea762ecad44b73610c1e065bf8"); //Heavy Crossbow +2

            ZombieArcher.Body.Armor = library.Get<BlueprintItemArmor>("91bf657f26eb80f4ba05b0b8440b1e8c"); //Chainshirt +1


            var fighterLevels = ZombieArcher.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            ZombieArcher.ReplaceComponent(fighterLevels, newAddClassLevels);





        }

        static void updateZombieLairBarbarian()

        {


            var ZombieBarbarian = library.Get<BlueprintUnit>("42f804c9f37566842bef540d756ff597");
            var barbarianClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var animalfury = library.Get<BlueprintFeature>("25954b1652bebc2409f9cb9d5728bceb");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var PowerAttackFeature = library.Get<BlueprintFeature>("9972f33f977fc724c838e59641b2fca5");
            var ironwill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var RecklessStanceFeature = library.Get<BlueprintFeature>("cb502c65dab407b4e928f5d8355cafc9");
            var InspireFerocityFeature = library.Get<BlueprintFeature>("32c4d277007aed74c905779cd04a6fed");
            var BeastTotemFeature = library.Get<BlueprintFeature>("c085888db293f2741b881cc989a2ab14");
            var IncreasedDamageReductionFeature = library.Get<BlueprintFeature>("ddaee203ee4dcb24c880d633fbd77db6");

            ZombieBarbarian.AddFacts = ZombieBarbarian.AddFacts.AddToArray(sunder, animalfury,PowerAttackFeature,ironwill,lightningreflexes,
                                                                            RecklessStanceFeature,InspireFerocityFeature,BeastTotemFeature,IncreasedDamageReductionFeature);


            var warpriestLevels = ZombieBarbarian.ComponentsArray
.OfType<AddClassLevels>()
 .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = warpriestLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("f7d7eb166b3dd594fb330d085df41853");
            newAddClassLevels.Levels = 10;
            ZombieBarbarian.ReplaceComponent(warpriestLevels, newAddClassLevels);



            ZombieBarbarian.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("8b0ad785727b2154ab4029508738fbdd"); //Greatsword +2
            ZombieBarbarian.Body.Armor = library.Get<BlueprintItemArmor>("45e86ae29df5f4b48a66da15fde62217"); //Hide +1


            var brain = ZombieBarbarian.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);


        }

        static void changeZombieMagus()
        {
            
            var dread_zombie = library.Get<BlueprintUnit>("b421201cd8ab9af4a933602aa0786500");
            var dread_zombieoldfeature = library.Get<BlueprintFeature>("653d1afcb01ca694a9c867a65efe7f84");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var magusClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var shockinggrasp = library.Get<BlueprintAbility>("ab395d2335d3f384e99dddee8562978f");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var phantasmalkiller = library.Get<BlueprintAbility>("6717dbaef00c0eb4897a1c908a75dfe5");
            var vampirictouch = library.Get<BlueprintAbility>("8a28a811ca5d20d49a863e832c31cce1");
            var StoneskinBuffCL11 = library.Get<BlueprintBuff>("6215b25fbc1a36748b5606ebc0092074");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var catsgrace = library.Get<BlueprintAbility>("de7a025d48ad5da4991e7d3c682cf69d");
            var dimensionstrikefeat = library.Get<BlueprintFeature>("cb6916027e3c25e4185de068249254dc");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var greatcleavefeat = library.Get<BlueprintFeature>("cc9c862ef2e03af4f89be5088851ea35");
            var cleavefeat = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var ImprovedCleavingFinish = library.Get<BlueprintFeature>("ffa1b373190af4f4db7a5501904a1983");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var catsgracebuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var shieldbuff = library.Get<BlueprintBuff>("9c0fa9b438ada3f43864be8dd8b3e741");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var electricalfeat = library.Get<BlueprintFeature>("05ed8b77c652483b9ecda069592a29ae");
            var frostfeat = library.Get<BlueprintFeature>("8b4e01f6322d464a90105182d2ebcb01");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");


            dread_zombie.AddFacts = dread_zombie.AddFacts.AddToArray(dimensionstrikefeat, quicken, catsgracebuff, shieldbuff, electricalfeat, frostfeat);


            dread_zombie.Strength = 30;
            dread_zombie.Dexterity = 20;

            dread_zombie.Intelligence = 20;

            dread_zombie.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{dread_zombie.name}.name", "Great Lorekeeper"));


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)dread_zombie.AddFacts[0], "GreatLorekeeperFeatures", "73c032033823408e9f639df380c492c2");
            dread_zombie.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();

            var dread_lorekeeperfeatures = library.Get<BlueprintFeature>("73c032033823408e9f639df380c492c2");

            var magusLevels = dread_lorekeeperfeatures.ComponentsArray
        .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = magusLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("45a4607686d96a1498891b3286121780");
            newAddClassLevels.Levels = 18;
            dread_lorekeeperfeatures.ReplaceComponent(magusLevels, newAddClassLevels);



            var druidLevels = dread_zombie.ComponentsArray
         .OfType<AddClassLevels>()
         .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels8 = druidLevels.CreateCopy();
            newAddClassLevels8.Levels = 0;
            dread_zombie.ReplaceComponent(druidLevels, newAddClassLevels8);

            var druidLevels7 = dread_zombie.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels7 = druidLevels7.CreateCopy();
            newAddClassLevels7.Levels = 1;
            dread_zombie.ReplaceComponent(druidLevels7, newAddClassLevels7);

            var druidLevels20 = dread_lorekeeperfeatures.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels20 = druidLevels20.CreateCopy();
            newAddClassLevels20.Levels = 4;
            dread_lorekeeperfeatures.ReplaceComponent(druidLevels20, newAddClassLevels20);


            var druidLevels2 = dread_lorekeeperfeatures.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == magusClass);
            var newAddClassLevels2 = druidLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(frigidtouch, frigidtouch, frigidtouch, displacement,
                                                                             mirrorimage, shockinggrasp, shockinggrasp, shockinggrasp,
                                                                             haste, phantasmalkiller, vampirictouch, catsgrace, shield,bullsmass,
                                                                             coneofcold,coneofcold,umbralstrike,umbralstrike);
            newAddClassLevels2.MemorizeSpells = spell_list;
            dread_lorekeeperfeatures.ReplaceComponent(druidLevels2, newAddClassLevels2);

            var druidLevels4 = dread_lorekeeperfeatures.ComponentsArray
     .OfType<AddClassLevels>()
     .First(c => c.CharacterClass == magusClass);
            var newAddClassLevels4 = druidLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.AddToArray(frigidtouch, displacement, shockinggrasp, phantasmalkiller, haste, vampirictouch, mirrorimage, catsgrace, shield,
                                                                                    bullsmass, coneofcold, umbralstrike);
            newAddClassLevels4.SelectSpells = spell_list4;
            dread_lorekeeperfeatures.ReplaceComponent(druidLevels4, newAddClassLevels4);







            dread_zombie.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("3d9e3fc1d4f4d8640bc4fac27a50fd5c"); //battleaxe +3
            dread_zombie.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("04dff7841c5f499478c91487d9bbdcef"); //Cloak of Protection +2


            dread_zombie.AddFacts = dread_zombie.AddFacts.RemoveFromArray(greatcleavefeat);
            dread_zombie.AddFacts = dread_zombie.AddFacts.RemoveFromArray(cleavefeat);
            dread_zombie.AddFacts = dread_zombie.AddFacts.RemoveFromArray(ImprovedCleavingFinish);


            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);




            var brain = dread_zombie.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.castfrigidtouchmagus, AiActions.castphantasmalkillermagus, AiActions.castvampirictouch,
                                                    AiActions.mirrorimagecyclop, AiActions.displacementvordakai, AiActions.castcatsgrace,
                                                    AiActions.castshockgrasp, AiActions.casthaste, AiActions.castshieldsprig, 
                                                     AiActions.castbullsmasspitax,AiActions.stoneskincommunalevildruid,AiActions.umbral_strikezombiemagus,AiActions.coneofcoldzombiemagus);


        }



        //Evil Druid
        static void updateEvilDruid()

        {

            
            var evil_druid = library.Get<BlueprintUnit>("ca694cea2d423ec4f9dfb52187017ef4");
            var tarpool = library.Get<BlueprintAbility>("7d700cdf260d36e48bb7af3a8ca5031f");
            var seamantle = library.Get<BlueprintAbility>("7ef49f184922063499b8f1346fb7f521");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var fire_storm = library.Get<BlueprintAbility>("e3d0dfe1c8527934294f241e0ae96a8d");
            var sunburst = library.Get<BlueprintAbility>("e96424f70ff884947b06f41a765b7658");
            var plaguestorm = library.Get<BlueprintAbility>("82a5b848c05e3f342b893dedb1f9b446");
            var druidclass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var stormbolt = library.Get<BlueprintAbility>("7cfbefe0931257344b2cb7ddc4cdff6f");
            var summonelders = library.Get<BlueprintAbility>("5c373918f5aa44258d600c0765384d44");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var umbralstrike = library.Get<BlueprintAbility>("474ed0aa656cc38499cc9a073d113716");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var barkskinbuff = library.Get<BlueprintBuff>("64926aaee36f7534aaa34ae70ba8328c");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var aspectofthewolf = library.Get<BlueprintAbility>("6126b36fe22291543ad72f8b9f0d53a7");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var thornbody = library.Get<BlueprintAbility>("2daf9c5112f16d54ab3cd6904c705c59");
            var summongreaters = library.Get<BlueprintAbility>("f5f5f07f19e74650a1d10e612cdfad1e");
            var deflection3 = library.Get<BlueprintUnitFact>("6b0b0aa011d26da438a999b35ca97137");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");

            evil_druid.MaxHP = 100;
            evil_druid.AddFacts = evil_druid.AddFacts.AddToArray(summonelders,lightningbolt,combatcasting,summongreaters,deflection3,improvedinitiative,IronWill,greatfortitude,lightningreflexes);
            evil_druid.AddFacts = evil_druid.AddFacts.RemoveFromArray(barkskinbuff);

            evil_druid.Wisdom = 26;




            var druidLevels = evil_druid.ComponentsArray
                       .OfType<AddClassLevels>()
                          .First(c => c.CharacterClass == druidclass);
            var newAddClassLevels = druidLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            newAddClassLevels.Levels = 18;
            evil_druid.ReplaceComponent(druidLevels, newAddClassLevels);

            var druidLevels2 = evil_druid.ComponentsArray
                     .OfType<AddClassLevels>()
                   .First(c => c.CharacterClass == druidclass);
            var newAddClassLevels2 = druidLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(tarpool, seamantle, flamestrike,flamestrike, flamestrike, thornbody,
                                                                         greaterdispel, greaterdispel, trueseeing,stoneskincommunal,umbralstrike,umbralstrike,barkskin,aspectofthewolf);
            newAddClassLevels2.MemorizeSpells = spell_list;
            evil_druid.ReplaceComponent(druidLevels2, newAddClassLevels2);







            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.greaterdispel);




            var defaced_sister_brain = library.Get<BlueprintBrain>("6fbe3c1065a223f42857acee47543a60");

            var new_actions = defaced_sister_brain.Actions;

            evil_druid.Brain.Actions = new_actions;


            evil_druid.Body.Armor = library.Get<BlueprintItemArmor>("6870dfd46da933149b1b0e41f5ed6bea"); //Leather Armor Plus 4

            evil_druid.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{evil_druid.name}.name", "Vuldred"));

            var flamestrikeai = library.Get<BlueprintAiCastSpell>("4f48fd03d530f86439657e4d93bffc89");

            var brain = evil_druid.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(flamestrikeai);
            brain.Actions = brain.Actions.AddToArray(AiActions.greaterdispelevildruid, AiActions.seamantle, AiActions.trueseeing, AiActions.castflamestrikeevildruid,
                                                        AiActions.tarpoolevildruid, AiActions.castthornbody, AiActions.usesummonelders, AiActions.usesummongreater,
                                                        AiActions.umbral_strikehateevildruid,AiActions.stoneskincommunalevildruid,AiActions.lightningboltevildruid,AiActions.usewildshapesmilidonevildruid);

        }


        static void changequickwood()
        {


            var quickelk = library.Get<BlueprintUnit>("0281720121150704eaf8f5591ff3f0ef");
            var plantClass = library.Get<BlueprintCharacterClass>("9393cc36ea29d084bab7433e3a28d40b");
            var humanoidClass = library.Get<BlueprintCharacterClass>("6ab4526f94d2e3e439af0599a29b6675");
            var natarmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var natarmor5 = library.Get<BlueprintUnitFact>("7661741dbb9604842a642457456fd0e4");
            var playerfaction = library.Get<BlueprintFaction>("72f240260881111468db610b6c37c099");






            var animalLevels = quickelk.ComponentsArray
                        .OfType<AddClassLevels>()
                          .First(c => c.CharacterClass == plantClass);
            var newAddClassLevels = animalLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("4cd1757a0eea7694ba5c933729a53920");
            newAddClassLevels.Levels = 1;
            quickelk.ReplaceComponent(animalLevels, newAddClassLevels);

            quickelk.Prefab = null;
            quickelk.CustomizationPreset = null;
            quickelk.Visual.Barks = library.Get<BlueprintUnitAsksList>("baf9bab700feb334699acd07e3a691ad");

            quickelk.Faction = library.Get<BlueprintFaction>("6e3318c9f3f1b044c8e72823ba2f9000");


            quickelk.FactionOverrides.AttackFactionsToAdd = quickelk.FactionOverrides.AttackFactionsToAdd.RemoveFromArray(playerfaction);

            quickelk.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{quickelk.name}.name", "Elk"));

        }

       
        
        
        
        //Lady Primrose


        static void updatePrimrose()

        {

            var Primrose = library.Get<BlueprintUnit>("2a12eb4b5a380a34eb97449e91783401");
            var summonaidforest = library.Get<BlueprintAbility>("d22e1838adc447a9b908a3dd47cd76fc");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var SummonWorm = library.Get<BlueprintAbility>("954f1469ed62843409783c9fa7472998");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var PrimalRegression = library.Get<BlueprintAbility>("07d577a74441a3a44890e3006efcf604");
            var catsmass = library.Get<BlueprintAbility>("1f6c94d56f178b84ead4c02f1b1e1c48");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var barkskinbuff = library.Get<BlueprintBuff>("64926aaee36f7534aaa34ae70ba8328c");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var aspectofthewolf = library.Get<BlueprintAbility>("6126b36fe22291543ad72f8b9f0d53a7");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var thornbody = library.Get<BlueprintAbility>("2daf9c5112f16d54ab3cd6904c705c59");
            var BarkskinFixedBuff5 = library.Get<BlueprintBuff>("063773c63d55dd94a94f9ffe3e710f95");
            var aspectofthefalcon = library.Get<BlueprintAbility>("7bdb6a9fb6b37614e96f155748ae50c6");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");
            var druidClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var HurricaneBow = library.Get<BlueprintAbility>("3e9d1119d43d07c4c8ba9ebfd1671952");
            var Hurricanebowbuff = library.Get<BlueprintBuff>("002c51d933574824c8ef2b04c9d09ff5");
            

            var nymphLevels = Primrose.ComponentsArray
                     .OfType<AddClassLevels>()
                     .First(c => c.CharacterClass == feyClass);
            var newnymphLevels = nymphLevels.CreateCopy();
            newnymphLevels.Levels = 9;
            Primrose.ReplaceComponent(nymphLevels, newnymphLevels);

            var druidLevels = Primrose.GetComponent<AddClassLevels>();
            var newdruidLevels = druidLevels.CreateCopy();
            newdruidLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            newdruidLevels.Levels = 18;
            var spell_list = newdruidLevels.MemorizeSpells.AddToArray(trueseeing, greaterdispel, greaterdispel, catsmass, greaterdispel, thornbody, aspectofthefalcon);
            newdruidLevels.MemorizeSpells = spell_list;
            Primrose.AddComponent(newdruidLevels);


            Primrose.AddFacts = Primrose.AddFacts.RemoveFromArray(SummonWorm);
            Primrose.AddFacts = Primrose.AddFacts.RemoveFromArray(PrimalRegression);

            Primrose.AddFacts = Primrose.AddFacts.AddToArray(summonaidforest,improvedinitiative, pointblank, preciseshot, manyshot, rapidshot, combatcasting, Hurricanebowbuff);


            Primrose.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("862cf5b6dc694054bad497636834faa8"); //Composite Longbow +4

        




            var OldDeathClutch = library.Get<BlueprintAiCastSpell>("ab4f996bebcc9a643929de94e0b1c34a");

       

            var brain = Primrose.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(OldDeathClutch);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesummonaidforest,AiActions.castcatsmass, AiActions.castthornbody, AiActions.trueseeing,
                                                        AiActions.castdeathclutchprimrose, AiActions.castaspectfalcon, AiActions.greaterdispelprimrose);





        }

        static void updatePrimroseTreant()
        {

            var CR17Treant = library.Get<BlueprintUnit>("3d4ca2bc4dd44a3683709c389e3ef0e3");


       




            CR17Treant.Faction = library.Get<BlueprintFaction>("0f539babafb47fe4586b719d02aff7c4");

            var TreantStunningBlowAiAction = library.Get<BlueprintAiCastSpell>("b2428bdc1e519104f8eb08e2fd06eb02");

            var brain = CR17Treant.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(TreantStunningBlowAiAction);

        }


        static void changePrimalDryad()
        {

            var PrimalDryad = library.Get<BlueprintUnit>("42b38b9a9dbb4d55b28bdeda516eeedd");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");
            var sorcererClass = library.Get<BlueprintCharacterClass>("b3a505fb61437dc4097f43c3f8f9a4cf");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var MageShieldAiAction = library.Get<BlueprintAiCastSpell>("8df9d8605fa49554691de7d02b8397ed");
            var MagicMissileAiAction = library.Get<BlueprintAiCastSpell>("e689225185e99d3469052d9cce20316d");
            var HoldPersonAiAction = library.Get<BlueprintAiCastSpell>("aee2f46dfa119d44b8bd415d2f5ad339");
            var HideousLaughterAiAction = library.Get<BlueprintAiCastSpell>("8b944da00906b6f4f9b1d73c80e46b8c");


           
            var barkskin = library.Get<BlueprintAbility>("5b77d7cc65b8ab74688e74a37fc2f553");
            var flamestrike = library.Get<BlueprintAbility>("f9910c76efc34af41b6e43d5d8752f0f");
            var spikestones = library.Get<BlueprintAbility>("d1afa8bc28c99104da7d784115552de5");
            var freedomofmovementbuff = library.Get<BlueprintBuff>("235533b62159790499ced35860636bb2");
            var dispel = library.Get<BlueprintAbility>("92681f181b507b34ea87018e8f7a528a");
            var calllightningability = library.Get<BlueprintAbility>("cad052ef098f9f247ab73ae4c37ac687");
            var calllightningstorm = library.Get<BlueprintAbility>("d5a36a7ee8177be4f848b953d1c53c84");
            var aspectofthebear = library.Get<BlueprintAbility>("a4ad1b8fa11e7c347a608c004efce9d5");
            var snowball = library.Get<BlueprintAbility>("9f10909f0be1f5141bf1c102041f93d9");
            var frigidtouch = library.Get<BlueprintAbility>("b6010dda6333bcf4093ce20f0063cd41");
            var owlswisdombuff = library.Get<BlueprintBuff>("73fc1d19f14339042ba5af34872c1745");
            var NaturalArmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var DRMagic5 = library.Get<BlueprintFeature>("c656127672b90484285d4c80312f601d");
            var dryad = library.Get<BlueprintUnitType>("dfdb7f7b20b3e6b449da559afce978b9");
            var longbowprof = library.Get<BlueprintFeature>("0978f630fc5d6a6409ac641137bf6659");
            var stoneskincommunal = library.Get<BlueprintAbility>("7c5d556b9a5883048bf030e20daebe31");
            var bullsmass = library.Get<BlueprintAbility>("6a234c6dcde7ae94e94e9c36fd1163a7");
            var aspectofthefalcon = library.Get<BlueprintAbility>("7bdb6a9fb6b37614e96f155748ae50c6");
            var barkskin5 = library.Get<BlueprintBuff>("063773c63d55dd94a94f9ffe3e710f95");
            var echolocation = library.Get<BlueprintAbility>("20b548bf09bb3ea4bafea78dcb4f3db6");
            var firesnake = library.Get<BlueprintAbility>("ebade19998e1f8542a1b55bd4da766b3");
            var pointblank = library.Get<BlueprintFeature>("0da0c194d6e1d43419eb8d990b28e0ab");
            var preciseshot = library.Get<BlueprintFeature>("8f3d1e6b4be006f4d896081f2f889665");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");
            var rapidshot = library.Get<BlueprintFeature>("9c928dc570bb9e54a9649b3ebfe47a41");
            var rapidshotbuff = library.Get<BlueprintBuff>("0f310c1e709e15e4fa693db15a4baeb4");
            var deadlyaim = library.Get<BlueprintFeature>("f47df34d53f8c904f9981a3ee8e84892");
            var deadlyaimbuff = library.Get<BlueprintBuff>("6aaf11aa06ae0e7499a71b79725828df");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var NaturalArmor9 = library.Get<BlueprintUnitFact>("da6417809bdedfa468dd2fd0cc74be92");
            var DRColdIron5 = library.Get<BlueprintFeature>("a3a24fe738fc836479d6f4e9a8b84bc4");
            var AcidResistance10 = library.Get<BlueprintFeature>("64e647c10eece1545b00a442330f49da");
            var ColdResistance10 = library.Get<BlueprintFeature>("daf27e1f12e736d4294b525489e99de4");
            var ElectricityResistance10 = library.Get<BlueprintFeature>("a5049e0d1b1a1454aa1a221a6e20b714");
            var Weaponfocuslongbow = library.Get<BlueprintFeature>("f641e7c569328614c87e0270ac5325dd");
            var druidClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");




            PrimalDryad.Strength = 12;

            PrimalDryad.Dexterity = 23;

            PrimalDryad.Constitution = 18;

            PrimalDryad.Intelligence = 12;

            PrimalDryad.Wisdom = 19;

            PrimalDryad.Charisma = 16;





            PrimalDryad.AddFacts = PrimalDryad.AddFacts.AddToArray(toughness, longbowprof, quicken, pointblank,
                                                                preciseshot, manyshot, rapidshot, rapidshotbuff, deadlyaim, deadlyaimbuff, lightningbolt,
                                                                combatcasting, NaturalArmor9, DRColdIron5, Weaponfocuslongbow, AcidResistance10, ColdResistance10, ElectricityResistance10);




            var druidLevels = PrimalDryad.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == sorcererClass);
            var newAddClassLevels = druidLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("610d836f3a3a9ed42a4349b62f002e96");
            newAddClassLevels.Levels = 15;
            PrimalDryad.ReplaceComponent(druidLevels, newAddClassLevels);



            var druidLevels2 = PrimalDryad.ComponentsArray
               .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == druidClass);
            var newAddClassLevels2 = druidLevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(barkskin, dispel,dispel,bullsmass, calllightningstorm, stoneskincommunal, aspectofthefalcon, echolocation,flamestrike,flamestrike);
            newAddClassLevels2.MemorizeSpells = spell_list;
            PrimalDryad.ReplaceComponent(druidLevels2, newAddClassLevels2);



            var auto_metamgic3 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic3.GetComponent<AutoMetamagic>().Abilities.Add(Spells.aspectofthefalcon);



            PrimalDryad.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("335efd45aba89a245adf68a8da1fd3ca"); //Longbow +2
            PrimalDryad.Body.EmptyHandWeapon = library.Get<BlueprintItemWeapon>("20375b5a0c9243d45966bd72c690ab74"); // Empty Hand



            PrimalDryad.Prefab = new UnitViewLink() { AssetId = "30e934c2d2a0a7041a4111d3cfddf986" }; //Now holds a bow




            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            PrimalDryad.Brain.Actions = new_actions;






            var brain = PrimalDryad.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.castaspectfalcon, AiActions.barkskingoblinking, AiActions.castbullsmass, 
                                                     AiActions.stoneskincommunaldryadhelp, AiActions.castflamestrikedryadhelp, AiActions.castecholocation,AiActions.castlightningboltdryadhelp);

        }


        static void updateLostlarnSatyrBow()
        {

            var LostlarnSatyrBow = library.Get<BlueprintUnit>("124368ef5e4ef8c448189549b3004519");

            var rogueclass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var gore1d6 = library.Get<BlueprintItemWeapon>("daf4ab765feba8548b244e174e7af5be");
            var DebilitatingInjuryBewilderedActiveBuff = library.Get<BlueprintBuff>("116ee72b2149f4d44a330296a7e42d13");
            var IronWill = library.Get<BlueprintFeature>("175d1577bb6c9a04baf88eec99c66334");
            var FencingGrace = library.Get<BlueprintFeature>("47b352ea0f73c354aba777945760b441");
            var CriticalFocus = library.Get<BlueprintFeature>("8ac59959b1b23c347a0361dc97cc786d");
            var ImprovedCritical = library.Get<BlueprintFeature>("f4201c85a991369408740c6888362e20");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var weaponfocusshortsword = library.Get<BlueprintFeature>("1788f34569fe1d544af3896b9bade740");
            var weaponspecialshortsword = library.Get<BlueprintFeature>("1a17a89ba1a4c204ab120da9021c2767");
            var sneakattack = library.Get<BlueprintFeature>("9f0187869dc23744292c0e5bb364464e");
            var feyClass = library.Get<BlueprintCharacterClass>("f2e6e760ead99fb48ade27c7e9d4ac94");


            LostlarnSatyrBow.AddFacts = LostlarnSatyrBow.AddFacts.RemoveFromArray(DebilitatingInjuryBewilderedActiveBuff);
            LostlarnSatyrBow.AddFacts = LostlarnSatyrBow.AddFacts.RemoveFromArray(sneakattack);
            LostlarnSatyrBow.AddFacts = LostlarnSatyrBow.AddFacts.AddToArray(IronWill,FencingGrace,CriticalFocus,ImprovedCritical,improvedinitiative,weaponfocusshortsword,weaponspecialshortsword);

            var clericLevels = LostlarnSatyrBow.ComponentsArray
            .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == rogueclass);
            var newAddClassLevels = clericLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            newAddClassLevels.Levels = 12;
            LostlarnSatyrBow.ReplaceComponent(clericLevels, newAddClassLevels);

            var feyLevels = LostlarnSatyrBow.ComponentsArray
            .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == feyClass);
            var newAddClassLevels2 = feyLevels.CreateCopy();
            newAddClassLevels2.Levels = 4;
            LostlarnSatyrBow.ReplaceComponent(feyLevels, newAddClassLevels2);


            LostlarnSatyrBow.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("0af6a4ac898a2ca4c9b0a7e76ec7522b"); //Shortsword +2
            LostlarnSatyrBow.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("f333bf86cd122974792162cbcd27c9ed");//ring of protection +1
            LostlarnSatyrBow.Body.AdditionalLimbs = LostlarnSatyrBow.Body.AdditionalLimbs.AddToArray(gore1d6);


            LostlarnSatyrBow.LocalizedName = Helpers.Create<SharedStringAsset>(c => c.String = Helpers.CreateString($"{LostlarnSatyrBow.name}.name", "Satyr Follower"));

            LostlarnSatyrBow.Prefab = new UnitViewLink() { AssetId = "36a3ffb15f1331c489ac1ab666aa9d26" }; //Now holds a sword




            var brain = LostlarnSatyrBow.Brain;
  

        }

       



        static void updateWatchfulOmen()

        {

            var wicked_omen = library.Get<BlueprintUnit>("48f6d4e80a5ee1840a21b4d1b4f705a5");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var wailbanshee = library.Get<BlueprintAbility>("b24583190f36a8442b212e45226c54fc");
            var frightfulaspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            var wavesofexhaust = library.Get<BlueprintAbility>("3e4d3b9a5bd03734d9b053b9067c2f38");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var fear = library.Get<BlueprintAbility>("d2aeac47450c76347aebbc02e4f463e0");
            var natarmor15 = library.Get<BlueprintUnitFact>("72c294dca841e3944869fb087bacf272");
            var natarmor20 = library.Get<BlueprintUnitFact>("65c289f08343f5349b6dafbc0240d6ef");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var summonundeadminions = library.Get<BlueprintAbility>("616db5550a924aa0bf582cbb7ac5da6c");
            var trueseeing = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");

            wicked_omen.AddFacts = wicked_omen.AddFacts.RemoveFromArray(enervation);
            wicked_omen.AddFacts = wicked_omen.AddFacts.RemoveFromArray(natarmor15);
            wicked_omen.AddFacts = wicked_omen.AddFacts.AddToArray(natarmor20, quicken, frightfulaspect, wavesofexhaust, fear, summonundeadminions,trueseeing,bansheeblast);


            wicked_omen.MaxHP = 80;
            wicked_omen.Charisma = 30;




            var outsiderLevels = wicked_omen.ComponentsArray
           .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == outsiderclass);
            var newAddClassLevels = outsiderLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            newAddClassLevels.Levels = 24;
            wicked_omen.ReplaceComponent(outsiderLevels, newAddClassLevels);





            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.frightfulaspect);



            var brain = wicked_omen.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.wavesofexhaust, AiActions.frightfulaspect, AiActions.fear,AiActions.usesummonundeadminions,AiActions.trueseeing,AiActions.bansheeblastwatchfulomen);





        }

        static void changehellishskeletal()
        {
            var hellisharcher = library.Get<BlueprintUnit>("536c295c5f604b9ca3ffb03a945c5620");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var neutralfaction = library.Get<BlueprintFaction>("d8de50cc80eb4dc409a983991e0b77ad");
            var firefx = library.Get<BlueprintBuff>("f36e0e6f50f241d40aecbbe145a7b436");



            hellisharcher.AddFacts = hellisharcher.AddFacts.AddToArray( firefx );




            hellisharcher.FactionOverrides.AttackFactionsToRemove = hellisharcher.FactionOverrides.AttackFactionsToRemove.AddToArray(neutralfaction);

            hellisharcher.Charisma = 18;
            hellisharcher.Dexterity = 24;
            hellisharcher.Strength = 18;

            var fighterLevels = hellisharcher.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            hellisharcher.ReplaceComponent(fighterLevels, newAddClassLevels);

            hellisharcher.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("426c900c0787c844c85bb4ac8cba6d27"); //Longbowplus +3
            hellisharcher.Body.Armor = library.Get<BlueprintItemArmor>("22c16b38998ebf342acdccba4f55a3b6"); //Chainmail +3

            hellisharcher.GetComponent<Experience>().CR = 14;

            hellisharcher.GetComponent<AddTags>().UseInRandomEncounter = false;





        }






        static void changehellishskeletalchamp()
        {
            var hellishchamp = library.Get<BlueprintUnit>("4573a45ceb974197b192db5fb52ab8cd");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var GreatCleaveAiAction = library.Get<BlueprintAiCastSpell>("4f9cd89dbe6ee6f41b7db1320efe032c");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var CleaveFeature = library.Get<BlueprintFeature>("d809b6c4ff2aaff4fa70d712a70f7d7b");
            var neutralfaction = library.Get<BlueprintFaction>("d8de50cc80eb4dc409a983991e0b77ad");
            var firefx = library.Get<BlueprintBuff>("f36e0e6f50f241d40aecbbe145a7b436");



            hellishchamp.AddFacts = hellishchamp.AddFacts.AddToArray(firefx);




            hellishchamp.FactionOverrides.AttackFactionsToRemove = hellishchamp.FactionOverrides.AttackFactionsToRemove.AddToArray(neutralfaction);

            hellishchamp.Charisma = 20;
            hellishchamp.Dexterity = 16;
            hellishchamp.Strength = 24;

            var fighterLevels = hellishchamp.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            hellishchamp.ReplaceComponent(fighterLevels, newAddClassLevels);

            hellishchamp.AddFacts = hellishchamp.AddFacts.AddToArray(sunder);
            hellishchamp.AddFacts = hellishchamp.AddFacts.RemoveFromArray(CleaveFeature);

            hellishchamp.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("68fbe8e38f215d2448ce7610e8d57a29"); //longsword +3
            hellishchamp.Body.SecondaryHand = library.Get<BlueprintItemShield>("7e23918977b18524591204c93fae0a37"); //Heavy Shield +3
            hellishchamp.Body.Armor = library.Get<BlueprintItemArmor>("a7a2500acce8faf46b6ecb79ec05691e"); //Breastplate +3


            hellishchamp.GetComponent<Experience>().CR = 14;



            var brain = hellishchamp.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(GreatCleaveAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);
        }


        static void updatePatientShadow()

        {

            var patient_shadow = library.Get<BlueprintUnit>("ad43d3925f0754d498e07e7b1d43f385");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var vampireshield = library.Get<BlueprintAbility>("a34921035f2a6714e9be5ca76c5e34b5");
            var wizardclass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var frightfulaspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var wavesofexhaust = library.Get<BlueprintAbility>("3e4d3b9a5bd03734d9b053b9067c2f38");
            var vampirictouchastral = library.Get<BlueprintAbility>("5db2468da97174048bfb0b3096d01fd6");
            var enervation = library.Get<BlueprintAbility>("f34fb78eaaec141469079af124bcfa0f");
            var energydrain = library.Get<BlueprintAbility>("37302f72b06ced1408bf5bb965766d46");
            var fingerofdeath = library.Get<BlueprintAbility>("6f1dcf6cfa92d1948a740195707c0dbe");
            var fear = library.Get<BlueprintAbility>("d2aeac47450c76347aebbc02e4f463e0");
            var natarmor14 = library.Get<BlueprintUnitFact>("209a2920891b580418b4e5e80466e134");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var natarmor23 = library.Get<BlueprintUnitFact>("1431a03c2ee2c204e9749abca0eab5ea");
            var summonundeadminions = library.Get<BlueprintAbility>("616db5550a924aa0bf582cbb7ac5da6c");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");
            var AstradaemonFingerOfDeathAiAction = library.Get<BlueprintAiCastSpell>("f1a614b3719a7b24782e631eefcc1654");
            var displacementbuff = library.Get<BlueprintBuff>("00402bae4442a854081264e498e7a833");
            var trueseeingbuff = library.Get<BlueprintBuff>("09b4b69169304474296484c74aa12027");
            var summonsouleaters = library.Get<BlueprintAbility>("a15ecda6872b4246b0ea500767a38e75");




        patient_shadow.AddFacts = patient_shadow.AddFacts.RemoveFromArray(vampirictouchastral);
            patient_shadow.AddFacts = patient_shadow.AddFacts.RemoveFromArray(energydrain);
            patient_shadow.AddFacts = patient_shadow.AddFacts.RemoveFromArray(enervation);

            patient_shadow.AddFacts = patient_shadow.AddFacts.RemoveFromArray(natarmor14);
            patient_shadow.AddFacts = patient_shadow.AddFacts.AddToArray(natarmor23, quicken, trueseeing,frightfulaspect,vampireshield,displacement,trueseeingbuff,summonsouleaters);

            patient_shadow.MaxHP = 130;
            patient_shadow.Charisma = 32;



            var outsiderLevels = patient_shadow.ComponentsArray
           .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == outsiderclass);
            var newAddClassLevels = outsiderLevels.CreateCopy();
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            newAddClassLevels.Levels = 27;
            patient_shadow.ReplaceComponent(outsiderLevels, newAddClassLevels);



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.frightfulaspect);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);




            var brain = patient_shadow.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(AstradaemonFingerOfDeathAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesummonancientsouls,AiActions.frightfulaspect, AiActions.trueseeing, AiActions.castvampiricshadowshield, AiActions.displacementvordakai, AiActions.castfingerofdeathastraldaemonguard);


        }


        static void changeastraancientsoul()
        {
            var astrasoul = library.Get<BlueprintUnit>("4603223d326a4eb598b7da6cad633683");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var neutralfaction = library.Get<BlueprintFaction>("d8de50cc80eb4dc409a983991e0b77ad");





            astrasoul.FactionOverrides.AttackFactionsToRemove = astrasoul.FactionOverrides.AttackFactionsToRemove.AddToArray(neutralfaction);

            astrasoul.MaxHP = 40;
            astrasoul.Dexterity = 30;
            astrasoul.Strength = 26;

            var fighterLevels = astrasoul.ComponentsArray
             .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == outsiderclass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 17;
            astrasoul.ReplaceComponent(fighterLevels, newAddClassLevels);


            astrasoul.GetComponent<AddTags>().UseInRandomEncounter = false;





        }


        static void updateDweomerLion()

        {

            var dweomer_lion = library.Get<BlueprintUnit>("d18e88914526d38438463ea50541c4cd");
            var nat_arm_8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");
            var nat_arm_16 = library.Get<BlueprintUnitFact>("73a90b2a70d576f429ad401e7a5a8a4f");




            dweomer_lion.AddFacts = dweomer_lion.AddFacts.RemoveFromArray(nat_arm_8);

            dweomer_lion.AddFacts = dweomer_lion.AddFacts.AddToArray(nat_arm_16);


            dweomer_lion.ReplaceComponent<AddClassLevels>(a =>
            {
                a.Levels = 20;

            });
        }

        static void updateQueenRavena()

        {


            var fighterclass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var clericclass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            var rogueclass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            var queen_ravena = library.Get<BlueprintUnit>("23779e7e2168070469b588b03c570ed9"); //GlobalPuzzleLadyBoss
            var overwhelmingpresence = library.Get<BlueprintAbility>("41cf93453b027b94886901dbfc680cb9");
            var summonMonsterIX = library.Get<BlueprintAbility>("52b5df2a97df18242aec67610616ded0");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var augmentsummon = library.Get<BlueprintFeature>("38155ca9e4055bb48a89240a2055dcc3");
            var sneakattacker = library.Get<BlueprintFeature>("9f0187869dc23744292c0e5bb364464e");
            var blindingcriticalfeature = library.Get<BlueprintFeature>("787e56055e3ef864d9c78a3ec21e56be");
            var Cornugon = library.Get<BlueprintFeature>("ceea53555d83f2547ae5fc47e0399e14");
            var dazzlingdisplay = library.Get<BlueprintFeature>("bcbd674ec70ff6f4894bb5f07b6f4095");
            var basicfeatselection = library.Get<BlueprintFeatureSelection>("247a4068296e8be42890143f451b4b45");
            var combatcasting = library.Get<BlueprintFeature>("06964d468fde1dc4aa71a92ea04d930d");
            var frightfulaspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            var superiorsummmoning = library.Get<BlueprintFeature>("0477936c0f74841498b5c8753a8062a3");
            var blasphemy = library.Get<BlueprintAbility>("bd10c534a09f44f4ea632c8b8ae97145");
            var inflictseriousmass = library.Get<BlueprintAbility>("820170444d4d2a14abc480fcbdb49535");
            var heavyarmorprof = library.Get<BlueprintFeature>("1b0f68188dcc435429fb87a022239681");
            var shieldbash = library.Get<BlueprintFeature>("121811173a614534e8720d7550aae253");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var unholyaura = library.Get<BlueprintAbility>("47f9cb1c367a5e4489cfa32fce290f86");
            var improvedinitiative = library.Get<BlueprintFeature>("797f25d709f559546b29e7bcb181cc74");
            var sunder = library.Get<BlueprintFeature>("9719015edcbf142409592e2cbaab7fe1");
            var divinepower = library.Get<BlueprintAbility>("ef16771cb05d1344989519e87f25b3c5");
            var WarriorClass = library.Get<BlueprintCharacterClass>("b2d9af52cf680744eb0cdc3f3034395f");
            var summonerinyes = library.Get<BlueprintAbility>("e5a1f14eba86468988b8cd60c22af173");
            var energyresist15 = library.Get<BlueprintFeature>("156cfcb07f2d0bf45aa9d35c76dda5d3");
            var bastardswordprof = library.Get<BlueprintFeature>("57299a78b2256604dadf1ab9a42e2873");
            var DebilitatingInjuryBewilderedEffectBuff = library.Get<BlueprintBuff>("22b1d98502050cb4cbdb3679ac53115e");
            var effortlessarmor = library.Get<BlueprintAbility>("e1291272c8f48c14ab212a599ad17aac");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var deflectionarmor7 = library.Get<BlueprintUnitFact>("4f2fcce412802c1408e3b89ea8b6c17e");
            



            queen_ravena.AddFacts = queen_ravena.AddFacts.RemoveFromArray(DebilitatingInjuryBewilderedEffectBuff);
            queen_ravena.AddFacts = queen_ravena.AddFacts.AddToArray(summonerinyes,quicken,energyresist15,bastardswordprof,deflectionarmor7);


            // var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");

            queen_ravena.Alignment = Alignment.ChaoticEvil;


            queen_ravena.Wisdom = 26;
            queen_ravena.Constitution = 32;
            queen_ravena.Dexterity = 26;
            queen_ravena.Strength = 30;


            var verminlevels = queen_ravena.GetComponent<AddClassLevels>();
            var newverminLevels = verminlevels.CreateCopy();
            newverminLevels.CharacterClass = library.Get<BlueprintCharacterClass>("b2d9af52cf680744eb0cdc3f3034395f");
            newverminLevels.Levels = 5;
            queen_ravena.AddComponent(newverminLevels);




            var clericlevels = queen_ravena.ComponentsArray
               .OfType<AddClassLevels>()
               .First(c => c.CharacterClass == fighterclass);
            var newAddClassLevels = clericlevels.CreateCopy();
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.RemoveFromArray(sneakattacker);
                selection.Features = selection.Features.RemoveFromArray(Cornugon);
                selection.Features = selection.Features.RemoveFromArray(dazzlingdisplay);
                selection.Features = selection.Features.RemoveFromArray(blindingcriticalfeature);
                selection.Features = selection.Features.RemoveFromArray(shieldbash);
            }
            newAddClassLevels.CharacterClass = library.Get<BlueprintCharacterClass>("67819271767a9dd4fbfd4ae700befea0");
            newAddClassLevels.Levels = 20;
            queen_ravena.ReplaceComponent(clericlevels, newAddClassLevels);

            var roguelevels = queen_ravena.ComponentsArray
                .OfType<AddClassLevels>()
                .First(c => c.CharacterClass == rogueclass);
            var newAddClassLevels3 = roguelevels.CreateCopy();
            newAddClassLevels3.CharacterClass = library.Get<BlueprintCharacterClass>("299aa766dee3cbf4790da4efb8c72484");
            newAddClassLevels3.Levels = 0;
            queen_ravena.ReplaceComponent(roguelevels, newAddClassLevels3);



            var clericlevels2 = queen_ravena.ComponentsArray
                .OfType<AddClassLevels>()
                 .First(c => c.CharacterClass == clericclass);
            var newAddClassLevels2 = clericlevels2.CreateCopy();
            var spell_list = newAddClassLevels2.MemorizeSpells.AddToArray(overwhelmingpresence, frightfulaspect, unholyaura,divinepower,effortlessarmor,greaterdispel);
            newAddClassLevels2.MemorizeSpells = spell_list;
            queen_ravena.ReplaceComponent(clericlevels2, newAddClassLevels2);

            var clericlevels4 = queen_ravena.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == clericclass);
            var newAddClassLevels4 = clericlevels4.CreateCopy();
            foreach (var selection in newAddClassLevels4.Selections)
            {
                selection.Features = selection.Features.AddToArray(augmentsummon, combatcasting, superiorsummmoning, heavyarmorprof, toughness, improvedinitiative,sunder);

            }
            queen_ravena.ReplaceComponent(clericlevels4, newAddClassLevels4);

            


            queen_ravena.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("1c8d2d0358c664447bc9bff52220f027");//ring of protection +4

            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.frightfulaspect);


            var brain = queen_ravena.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.overwhelmingpresence, AiActions.frightfulaspect, AiActions.castsummonerinyes,
                AiActions.unholyaura, AiActions.blasphemy,AiActions.usesunderarmorzombiebarb,AiActions.castdivinepowerdelaypitax,AiActions.castgreaterdispellqueen,AiActions.casteffortlessarmor);


        }

        static void changeSummonedErinyes()
        {



            var summonederinyes = library.Get<BlueprintUnit>("0f36e9346d3f43948596f6a2ae41a5b8");
            var outsiderclass = library.Get<BlueprintCharacterClass>("92ab5f2fe00631b44810deffcc1a97fd");
            var toughness = library.Get<BlueprintFeature>("d09b20029e9abfe4480b356c92095623");
            var neutralfaction = library.Get<BlueprintFaction>("d8de50cc80eb4dc409a983991e0b77ad");
            var firefx = library.Get<BlueprintBuff>("f36e0e6f50f241d40aecbbe145a7b436");
            var natarmor12 = library.Get<BlueprintUnitFact>("0b2d92c6aac8093489dfdadf1e448280");
            var natarmor8 = library.Get<BlueprintUnitFact>("b9342e2a6dc5165489ba3412c50ca3d1");

            summonederinyes.AddFacts = summonederinyes.AddFacts.RemoveFromArray(natarmor8);
            summonederinyes.AddFacts = summonederinyes.AddFacts.AddToArray(toughness,firefx, natarmor12);

            var outsiderLevels = summonederinyes.ComponentsArray
                       .OfType<AddClassLevels>()
                          .First(c => c.CharacterClass == outsiderclass);
            var newAddClassLevels = outsiderLevels.CreateCopy();
            newAddClassLevels.Levels = 18;
            summonederinyes.ReplaceComponent(outsiderLevels, newAddClassLevels);

            var auto_metamgic2 = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic2.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);


            summonederinyes.FactionOverrides.AttackFactionsToRemove = summonederinyes.FactionOverrides.AttackFactionsToRemove.AddToArray(neutralfaction);


            summonederinyes.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("426c900c0787c844c85bb4ac8cba6d27");
            summonederinyes.Body.PrimaryHandAlternative1 = library.Get<BlueprintItemWeapon>("68fbe8e38f215d2448ce7610e8d57a29");



        }


       

     


        static void updateIllthuliak()
        {

            var Illthuliak = library.Get<BlueprintUnit>("e17b1478144b8ff49ba8d7b3da8fb7b5");
            var DragonClass = library.Get<BlueprintCharacterClass>("01a754e7c1b7c5946ba895a5ff0faffc");  
            var natarmor33 = library.Get<BlueprintUnitFact>("a4b01d1217647ff4a91a3dc7600e45fe");
            var natarmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");
            var deflectionarmor10 = library.Get<BlueprintUnitFact>("2cee03e71cc3656438b3d49abefbefcf");
            var dragonsbreathblack = library.Get<BlueprintAbility>("13ec8518bcf242e44aae59c1fd4f7198");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");

            Illthuliak.Strength = 42;
            Illthuliak.Charisma = 42;
            Illthuliak.Dexterity = 16;

            Illthuliak.MaxHP = 200;

            Illthuliak.AddFacts = Illthuliak.AddFacts.RemoveFromArray(natarmor33);
            Illthuliak.AddFacts = Illthuliak.AddFacts.AddToArray(dragonsbreathblack,natarmor19,deflectionarmor10,quicken,stoneskin);


            var dragonLevels = Illthuliak.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == DragonClass);
            var newAddClassLevels = dragonLevels.CreateCopy();
            newAddClassLevels.Levels = 28;
            Illthuliak.ReplaceComponent(dragonLevels, newAddClassLevels);


            var IllthuliakBreathWeaponAiAction = library.Get<BlueprintAiAction>("a145db67aabaf9c4e8f7953f111c548c");
            var IllthuliakEnervationAiAction = library.Get<BlueprintAiAction>("1a0bf38eb6310c64b874a3c2ee6dc288");
            var IllthuliakSeamantleAiAction = library.Get<BlueprintAiAction>("39e30db0e9c1ae741abe7f9caf701f15");
            var BlackDragonAdultFrightfulPresenseAiAction = library.Get<BlueprintAiAction>("476263dd25153a944b2590257a830958");
            var IllthuliakProfaneNimbusAiAction = library.Get<BlueprintAiAction>("0b76617d7b889f245996947a646dbdeb");
            var IllthuliakCausticEruptionAiAction = library.Get<BlueprintAiAction>("25dc4c231b8ee444694b786fa16062fb");
            var IllthuliakPolarMidnightAiAction = library.Get<BlueprintAiAction>("5a2ba5f36427d56469505b4464785868");


            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.haste);


            var brain = Illthuliak.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(IllthuliakBreathWeaponAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(IllthuliakEnervationAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(IllthuliakSeamantleAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(BlackDragonAdultFrightfulPresenseAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(IllthuliakProfaneNimbusAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(IllthuliakCausticEruptionAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(IllthuliakPolarMidnightAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.seamantle,AiActions.illthuliakbreath,AiActions.frightfulpresenceillthuliak,AiActions.castprofanenimbus,
                                                AiActions.castcausticeruptionillthuliak,AiActions.castpolarmidnightillthuliak,AiActions.casthastemedusa,AiActions.stoneskin);

        }

        static void updatedragonslavemelee()
        {

            var dragonslavemelee = library.Get<BlueprintUnit>("bdb51c927f5129c4ea7a63583ddfe519");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var trip = library.Get<BlueprintFeature>("0f15c6f70d8fb2b49aa6cc24239cc5fa");


            dragonslavemelee.AddFacts = dragonslavemelee.AddFacts.AddToArray(trip);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)dragonslavemelee.AddFacts[1], "dragonslavemeleefeature", "9c03f43e7be74d9fa4f37482f0f4fad9");
            dragonslavemelee.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var dragonslavemeleefeature = library.Get<BlueprintFeature>("9c03f43e7be74d9fa4f37482f0f4fad9");


            dragonslavemelee.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("9f455505128866146a9bd81895d4cecd");//Shortsword +1

            dragonslavemelee.Body.SecondaryHand = library.Get<BlueprintItemShield>("cac3ca0cae325b44b9d7833bbe0e6c69"); //Light Shield +1
            dragonslavemelee.Body.Armor = library.Get<BlueprintItemArmor>("5041415db3e6c394a8b2173c39fd4ec4");//Breastplate +1



            var fighterLevels = dragonslavemeleefeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            dragonslavemeleefeature.ReplaceComponent(fighterLevels, newAddClassLevels);






            var brain = dragonslavemelee.Brain;
            brain.Actions = brain.Actions.AddToArray(AiActions.trip);


        }

        static void updatedragonslaveranged()
        {

            var dragonslaveranged = library.Get<BlueprintUnit>("2cd8a8ee2b2219d4d82d16f4e69abb04");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");


            dragonslaveranged.AddFacts = dragonslaveranged.AddFacts.AddToArray(manyshot);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)dragonslaveranged.AddFacts[1], "dragonslaverangedfeature", "0ac16695ea50413a90aff7f831e95423");
            dragonslaveranged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();




            var dragonslaverangedfeature = library.Get<BlueprintFeature>("0ac16695ea50413a90aff7f831e95423");

            dragonslaveranged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f5528acb89757ab4fb9350f45cc4f3b4");//Light Crossbow +1
            dragonslaveranged.Body.Armor = library.Get<BlueprintItemArmor>("18c627302593ab142bb8219525e1aed1");//Breastplate +1



            var fighterLevels = dragonslaverangedfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 5;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            dragonslaverangedfeature.ReplaceComponent(fighterLevels, newAddClassLevels);







        }

        static void updatedragonslaveranged2()
        {

            var dragonslaveranged = library.Get<BlueprintUnit>("257ee55f9ab4b754697dfaaf4b4486a9");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var manyshot = library.Get<BlueprintFeature>("adf54af2a681792489826f7fd1b62889");


            dragonslaveranged.AddFacts = dragonslaveranged.AddFacts.AddToArray(manyshot);


            var clone = library.CopyAndAdd<BlueprintFeature>((BlueprintFeature)dragonslaveranged.AddFacts[1], "dragonslaverangedfeature2", "02e904f6b8c043a9876cddc9d2122c46");
            dragonslaveranged.AddFacts[0] = clone;
            clone.ComponentsArray = clone.ComponentsArray
                .Select(c => c.CreateCopy())
                .ToArray();


            dragonslaveranged.Strength = 16;
            dragonslaveranged.Dexterity = 22;

            var dragonslaverangedfeature = library.Get<BlueprintFeature>("02e904f6b8c043a9876cddc9d2122c46");

            dragonslaveranged.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("f5528acb89757ab4fb9350f45cc4f3b4");//Light Crossbow +1
            dragonslaveranged.Body.Armor = library.Get<BlueprintItemArmor>("18c627302593ab142bb8219525e1aed1");//Breastplate +1



            var fighterLevels = dragonslaverangedfeature.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == fighterClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 10;
            foreach (var selection in newAddClassLevels.Selections)
            {
                selection.Features = selection.Features.AddToArray();

            }
            dragonslaverangedfeature.ReplaceComponent(fighterLevels, newAddClassLevels);


            var dumbmonsterbrain = library.Get<BlueprintBrain>("5abc8884c6f15204c8604cb01a2efbab");

            var new_actions = dumbmonsterbrain.Actions;

            dragonslaveranged.Brain.Actions = new_actions;




        }

        static void updateLichKulich()
        {


            var vermin = library.Get<BlueprintCharacterClass>("d1a15612d1a96334d94edf5f1d3b8d29");
            var LichKulich = library.Get<BlueprintUnit>("d58b4a0df3282b84c97b751590053bcf");
            var quicken = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            var wizardclass = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");
            var displacement = library.Get<BlueprintAbility>("903092f6488f9ce45a80943923576ab3");
            var fireball = library.Get<BlueprintAbility>("2d81362af43aeac4387a3d4fced489c3");
            var fireresist15 = library.Get<BlueprintFeature>("24700a71dd3dc844ea585345f6dd18f6");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var dr15 = library.Get<BlueprintFeature>("a1477ed71c2329d4088192cac8d4e3bd");
            var greaterdispel = library.Get<BlueprintAbility>("f0f761b808dc4b149b08eaf44b99f633");
            var summonelderworms = library.Get<BlueprintAbility>("a89156c13eca4f6d91364f41ae8d00f9");
            var mirrorimage = library.Get<BlueprintAbility>("3e4ab69ada402d145a5e0ad3ad4b8564");
            var MageShieldBuffPermanent = library.Get<BlueprintBuff>("f01f31b601e38034fa0460d16778a306");
            var icyprisonmass = library.Get<BlueprintAbility>("1852a9393a23d5741b650a1ea7078abc");
            var clashingrocks = library.Get<BlueprintAbility>("01300baad090d634cb1a1b2defe068d6");
            var elementalassessor = library.Get<BlueprintAbility>("6303b404df12b0f4793fa0763b21dd2c");
            var chainlightning = library.Get<BlueprintAbility>("645558d63604747428d55f0dd3a4cb58");
            var disintegrate = library.Get<BlueprintAbility>("4aa7942c3e62a164387a73184bca3fc1");
            var tsunami = library.Get<BlueprintAbility>("d8144161e352ca846a73cf90e85bf9ac");
            var SummonElementalElderBase = library.Get<BlueprintAbility>("8a7f8c1223bda1541b42fd0320cdbe2b");
            var polarray = library.Get<BlueprintAbility>("17696c144a0194c478cbe402b496cb23");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            var FrightfulAspect = library.Get<BlueprintAbility>("e788b02f8d21014488067bdd3ba7b325");
            var horrid_wilting = library.Get<BlueprintAbility>("08323922485f7e246acb3d2276515526");
            var greatershout = library.Get<BlueprintAbility>("fd0d3840c48cafb44bb29e8eb74df204");
            var bansheeblast = library.Get<BlueprintAbility>("d42c6d3f29e07b6409d670792d72bc82");
            var vampireshield = library.Get<BlueprintAbility>("a34921035f2a6714e9be5ca76c5e34b5");
            var haste = library.Get<BlueprintAbility>("486eaff58293f6441a5c2759c4872f98");
            var boneshatter = library.Get<BlueprintAbility>("f2f1efac32ea2884e84ecaf14657298b");
            var slow = library.Get<BlueprintAbility>("f492622e473d34747806bdb39356eb89");
            var magearmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            var freedomofmovement = library.Get<BlueprintAbility>("0087fc2d64b6095478bc7b8d7d512caf");
            var lightningbolt = library.Get<BlueprintAbility>("d2cff9243a7ee804cb6d5be47af30c73");
            var trueseeing = library.Get<BlueprintAbility>("4cf3d0fae3239ec478f51e86f49161cb");
            var InvisibilityGreater = library.Get<BlueprintAbility>("ecaa0def35b38f949bd1976a6c9539e0");
            var BarkskinFixedBuff5 = library.Get<BlueprintBuff>("063773c63d55dd94a94f9ffe3e710f95");
            var shield = library.Get<BlueprintAbility>("ef768022b0785eb43a18969903c537c4");
            var Cloudkill = library.Get<BlueprintAbility>("548d339ba87ee56459c98e80167bdf10");
            var stoneskin = library.Get<BlueprintAbility>("c66e86905f7606c4eaa5c774f0357b2b");
            var holdmonster = library.Get<BlueprintAbility>("41e8a952da7a5c247b3ec1c2dbb73018");
            var stinkycloud = library.Get<BlueprintAbility>("68a9e6d7256f1354289a39003a46d826");
            var boneshaker = library.Get<BlueprintAbility>("b7731c2b4fa1c9844a092329177be4c3");
            var bearsbuff = library.Get<BlueprintBuff>("c3de8cc9a0f50e2418dde526d8855faa");
            var catsbuff = library.Get<BlueprintBuff>("f011d0ab4a405e54aa0e83cd10e54430");
            var fingerofdeath = library.Get<BlueprintAbility>("6f1dcf6cfa92d1948a740195707c0dbe");
            var wavesofexhaust = library.Get<BlueprintAbility>("3e4d3b9a5bd03734d9b053b9067c2f38");
            var causticeruption = library.Get<BlueprintAbility>("8c29e953190cc67429dc9c701b16b7c2");
            var coneofcold = library.Get<BlueprintAbility>("e7c530f8137630f4d9d7ee1aa7b1edc0");

            LichKulich.AddFacts = LichKulich.AddFacts.RemoveFromArray(MageShieldBuffPermanent);
            LichKulich.AddFacts = LichKulich.AddFacts.RemoveFromArray(BarkskinFixedBuff5);
            LichKulich.AddFacts = LichKulich.AddFacts.AddToArray(quicken,bearsbuff,catsbuff,boneshatter);


            LichKulich.MaxHP = 200;

            LichKulich.Intelligence = 29;


            var undeadlevels = LichKulich.GetComponent<AddClassLevels>();
            var newundeadlevels = undeadlevels.CreateCopy();
            undeadlevels.CharacterClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");
            undeadlevels.Levels = 10;
            LichKulich.AddComponent(newundeadlevels);



            var wizardLevels = LichKulich.ComponentsArray
              .OfType<AddClassLevels>()
              .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels = wizardLevels.CreateCopy();
            var spell_list = newAddClassLevels.SelectSpells.AddToArray(displacement,wavesofexhaust, coneofcold,greaterdispel, mirrorimage,horrid_wilting,shield,stoneskin,holdmonster,fingerofdeath,vampireshield,magearmor,bansheeblast,haste,slow,boneshatter,freedomofmovement,trueseeing,InvisibilityGreater);
            newAddClassLevels.SelectSpells = spell_list;
            LichKulich.ReplaceComponent(wizardLevels, newAddClassLevels);



            var wizardLevels2 = LichKulich.ComponentsArray
             .OfType<AddClassLevels>()
             .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels2 = wizardLevels2.CreateCopy();
            var spell_list2 = newAddClassLevels2.MemorizeSpells.AddToArray(displacement, greaterdispel, greaterdispel, mirrorimage,mirrorimage, bansheeblast,bansheeblast, vampireshield,shield, 
                                                                            freedomofmovement,trueseeing, InvisibilityGreater,stoneskin,holdmonster,holdmonster,fingerofdeath,fingerofdeath, coneofcold,coneofcold,
                                                                           horrid_wilting,horrid_wilting,horrid_wilting,magearmor,haste,slow,slow,boneshatter,boneshatter,boneshatter,wavesofexhaust);
            newAddClassLevels2.MemorizeSpells = spell_list2;
            LichKulich.ReplaceComponent(wizardLevels2, newAddClassLevels2);



            var wizardLevels3 = LichKulich.ComponentsArray
      .OfType<AddClassLevels>()
      .First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels3 = wizardLevels3.CreateCopy();
            var spell_list3 = newAddClassLevels3.SelectSpells.RemoveFromArray(greatershout);
            newAddClassLevels3.SelectSpells = spell_list3;
            LichKulich.ReplaceComponent(wizardLevels3, newAddClassLevels3);

            var wizardLevels4 = LichKulich.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels4 = wizardLevels4.CreateCopy();
            var spell_list4 = newAddClassLevels4.SelectSpells.RemoveFromArray(fireball);
            newAddClassLevels4.SelectSpells = spell_list4;
            LichKulich.ReplaceComponent(wizardLevels4, newAddClassLevels4);

            var wizardLevels5 = LichKulich.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels5 = wizardLevels5.CreateCopy();
            var spell_list5 = newAddClassLevels5.SelectSpells.RemoveFromArray(lightningbolt);
            newAddClassLevels5.SelectSpells = spell_list5;
            LichKulich.ReplaceComponent(wizardLevels5, newAddClassLevels5);

            var wizardLevels6 = LichKulich.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels6 = wizardLevels6.CreateCopy();
            var spell_list6 = newAddClassLevels6.SelectSpells.RemoveFromArray(Cloudkill);
            newAddClassLevels6.SelectSpells = spell_list6;
            LichKulich.ReplaceComponent(wizardLevels6, newAddClassLevels6);

            var wizardLevels7 = LichKulich.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels7 = wizardLevels7.CreateCopy();
            var spell_list7 = newAddClassLevels7.SelectSpells.RemoveFromArray(stinkycloud);
            newAddClassLevels7.SelectSpells = spell_list7;
            LichKulich.ReplaceComponent(wizardLevels7, newAddClassLevels7);

            var wizardLevels11 = LichKulich.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels11 = wizardLevels11.CreateCopy();
            var spell_list11 = newAddClassLevels11.SelectSpells.RemoveFromArray(boneshaker);
            newAddClassLevels11.SelectSpells = spell_list11;
            LichKulich.ReplaceComponent(wizardLevels11, newAddClassLevels11);

            var wizardLevels10 = LichKulich.ComponentsArray
.OfType<AddClassLevels>()
.First(c => c.CharacterClass == wizardclass);
            var newAddClassLevels10 = wizardLevels10.CreateCopy();
            var spell_list10 = newAddClassLevels10.MemorizeSpells.RemoveFromArray(causticeruption);
            newAddClassLevels10.MemorizeSpells = spell_list10;
            LichKulich.ReplaceComponent(wizardLevels10, newAddClassLevels10);


            LichKulich.Body.Shoulders = library.Get<BlueprintItemEquipmentShoulders>("a34cd0f80d04ec647af741d924a3e2a3"); //Cloak of Protection +5
            LichKulich.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("c6f3a5ef61e39154dae388d76e981e85"); //Light Crossbow +5
            LichKulich.Body.Ring1 = library.Get<BlueprintItemEquipmentRing>("2d576daea5f62ae489028bce40469285"); //Ring of Protection +5



            var auto_metamgic = library.Get<BlueprintFeature>("f65fc9a042f5e7247a03702dca121936");
            auto_metamgic.GetComponent<AutoMetamagic>().Abilities.Add(Spells.displacement);



           var LichKulichBrain_WailOfBansheeAiAction = library.Get<BlueprintAiAction>("57b797797ebaade4a93c1ecd59a19234");
            var LichKulichBrain_BoneshakerAiAction = library.Get<BlueprintAiAction>("6ec8dde44c15cea4bbcdc8de32850c6b");
            var LichKulichBrain_CausticEruptionAiAction = library.Get<BlueprintAiAction>("5c984ba5dd758b94d9087081be63ae2a");
            var ParalyzingTouchVordakaiAIAction = library.Get<BlueprintAiAction>("8a934d561b5cc7245a0db8400cec3621");



            var brain = LichKulich.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(LichKulichBrain_WailOfBansheeAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(LichKulichBrain_BoneshakerAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(LichKulichBrain_CausticEruptionAiAction);
            brain.Actions = brain.Actions.RemoveFromArray(ParalyzingTouchVordakaiAIAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.displacement_first, AiActions.castmirrorimagebloodmoon, AiActions.mirrorimagerecast, AiActions.trueseeing,AiActions.castfreedomofmovement, AiActions.bansheeblastlich,
                                                             AiActions.greaterdispelwrigglingman, AiActions.castvampiricshadowshield, AiActions.castshieldsprig, AiActions.castcausticeruptionlich,
                                                             AiActions.castboneshatterlich, AiActions.horridwiltinglich, AiActions.coneofcoldlich, AiActions.castfingerofdeathlich,
                                                             AiActions.seamantle, AiActions.wavesofexhaustlich, AiActions.castinvisibilitygreater, 
                                                             AiActions.wailofthebansheelich,AiActions.stoneskin,AiActions.castholdmonsterlich);



        }

        static void updateGuardianArmor()

        {


            var GuardianArmor = library.Get<BlueprintUnit>("378a8a2b9da035b47830bf9b33a4bcb7");
            var fighterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            var disarm = library.Get<BlueprintAbility>("45d94c6db453cfc4a9b99b72d6afe6f6");
            var disarmfeat = library.Get<BlueprintFeature>("63d8e3a9ab4d72e4081a7862d7246a79");
            var greatfortitude = library.Get<BlueprintFeature>("79042cb55f030614ea29956177977c52");
            var lightningreflexes = library.Get<BlueprintFeature>("15e7da6645a7f3d41bdad7c8c4b9de1e");
            var undeadClass = library.Get<BlueprintCharacterClass>("19a2d9e58d916d04db4cd7ad2c7a3ee2");

            GuardianArmor.AddFacts = GuardianArmor.AddFacts.AddToArray(greatfortitude, lightningreflexes);



            var undeadlevels = GuardianArmor.GetComponent<AddClassLevels>();
            var newundeadlevels = undeadlevels.CreateCopy();
            undeadlevels.CharacterClass = library.Get<BlueprintCharacterClass>("48ac8db94d5de7645906c7d0ad3bcfbd");
            undeadlevels.Levels = 16;
            GuardianArmor.AddComponent(newundeadlevels);



            var fighterLevels = GuardianArmor.ComponentsArray
            .OfType<AddClassLevels>()
            .First(c => c.CharacterClass == undeadClass);
            var newAddClassLevels = fighterLevels.CreateCopy();
            newAddClassLevels.Levels = 7;
            GuardianArmor.ReplaceComponent(fighterLevels, newAddClassLevels);

            var SunderArmorAiAction = library.Get<BlueprintAiAction>("23bcb18f2dd735c4d9d2d228f654efce");






            GuardianArmor.Body.PrimaryHand = library.Get<BlueprintItemWeapon>("87af8fc76ecaf444bb1089db05cb1258"); //Longsword +4
            GuardianArmor.Body.SecondaryHand = library.Get<BlueprintItemShield>("777f5b91bdda1804cacd3f45dd9f0cf1"); //Light Shield +4
            GuardianArmor.Body.Armor = library.Get<BlueprintItemArmor>("4e3f583caaf179d4fa6ff9e9573f072f");//Fullplate +4


            var brain = GuardianArmor.Brain;
            brain.Actions = brain.Actions.RemoveFromArray(SunderArmorAiAction);
            brain.Actions = brain.Actions.AddToArray(AiActions.usesunderarmorzombiebarb);

        }


        //Tenebrious Depths

        static void updatespawnofrovagug()

        {

            var spawnofrovagug = library.Get<BlueprintUnit>("b9f65b155af23ac4e8687101d0b6377c");
            var deflectionarmor6 = library.Get<BlueprintUnitFact>("a7771abd8ff02124dbbc0e1936992b7b");
            var deflectionarmor15 = library.Get<BlueprintUnitFact>("ff6bc97b289d73044ba244872df8f120");
            var natarmor26 = library.Get<BlueprintUnitFact>("6f92384d2a6de5f4799b100571570f01");
            var natarmor19 = library.Get<BlueprintUnitFact>("fa6089e0f74bb5e4c9ff9025f2d00cbc");



            spawnofrovagug.AddFacts = spawnofrovagug.AddFacts.RemoveFromArray(deflectionarmor6);
            spawnofrovagug.AddFacts = spawnofrovagug.AddFacts.RemoveFromArray(natarmor26);
            spawnofrovagug.AddFacts = spawnofrovagug.AddFacts.AddToArray(deflectionarmor15, natarmor19);


            
        }

        //Lantern King Debuff Reduction

        static void updateLanternKingDebuff4()
        {

            var LanternkingBuff4 = library.Get<BlueprintBuff>("67258454b7602b240b820f6af9df8e99");



      

            var HitPointReduction = LanternkingBuff4.ComponentsArray
               .OfType<AddStatModifier>()
               .First(c => c.Stat == StatType.HitPoints);
            var valuechange = HitPointReduction.CreateCopy();
            valuechange.ModifierPercents.Value = 80;
            LanternkingBuff4.ReplaceComponent(HitPointReduction, valuechange);







        }


        //Dimensional Door Changes

        static void changewrigglingmandoor()
        {

            var wrigglingdoor = library.Get<BlueprintAiCastSpell>("aa2c1af4ca1615d48bdc0d9c8f39a577");



            wrigglingdoor.BaseScore = 300;







        }

        static void changeNyrissadoor()
        {

            var nyrissadoor = library.Get<BlueprintAiCastSpell>("faa9d2e1047f67a4aa6857f0a7320631");



           nyrissadoor.BaseScore = 300;







        }


        static void changeNyrissacharm()
        {

            var nyrissacharm = library.Get<BlueprintAiCastSpell>("8310d237ac7b6db4f872ac50f6e22f31");



            nyrissacharm.BaseScore = 120;



        }

        static void changeNyrissasummon()
        {

            var nyrissasummon = library.Get<BlueprintAiCastSpell>("67826363e8c877c42a335f8bb3012251");



            nyrissasummon.BaseScore = 120;



        }

        static void changeLanternKingdoor()
        {

            var nyrissasummon = library.Get<BlueprintAiCastSpell>("a2e1e6d3c4d74634a989eb68f8588ba6");



            nyrissasummon.BaseScore = 30;



        }



        public override string ToString()
        {
            return base.ToString();
        }

        public override bool Equals(object obj)
        {
            return base.Equals(obj);
        }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }
    }

}
